Manim
=========1==========
class UpdatersExample(Scene):
    def construct(self):
        decimal = DecimalNumber(
            0,
            show_ellipsis=True,
            num_decimal_places=3,
            include_sign=True,
        )
        square = Square().to_edge(UP)

        decimal.add_updater(lambda d: d.next_to(square, RIGHT))
        decimal.add_updater(lambda d: d.set_value(square.get_center()[1]))
        self.add(square, decimal)
        self.play(
            square.to_edge, DOWN,
            rate_func=there_and_back,
            run_time=5,
        )
        self.wait()
=========1==========
=========2==========
class AskWhyRewriteIt(TeacherStudentsScene):
    def construct(self):
        self.student_says(
            "Why?", student_index=1,
            bubble_kwargs={"height": 2, "width": 2},
        )
        self.students[1].bubble = None
        self.teacher_says(
            "One step closer\\\\to derivatives"
        )
        self.change_student_modes(
            "thinking", "thinking", "thinking",
            look_at_arg=4 * LEFT + 2 * UP
        )
        self.wait(2)

=========2==========
=========3==========
    def add_title(self):
        square = Square(side_length=2 * self.L)
        title = TextMobject("Brownian motion")
        title.scale(1.5)
        title.next_to(square, UP)

        self.add(square)
        self.add(title)
=========3==========
=========4==========
        def func(x, y):
            return np.array([
                x, y,
                2.7 + 0.5 * (np.sin(x) + np.cos(y)) -
                0.025 * (x**2 + y**2)
            ])
=========4==========
=========5==========
    def get_d3_group(self):
        group = VGroup(
            self.get_d3_words(),
            self.get_d3_equation(),
        )
        group.arrange(DOWN, buff=MED_LARGE_BUFF)
        return group
=========5==========
=========6==========
def get_binomial_distribution(n, p):
    return lambda k : choose(n, k)*(p**(k))*((1-p)**(n-k))
=========6==========
=========7==========
    def cross_out_assumption(self):
        cross = Cross(self.assumption)
        cross.set_color(GREY)
        self.bar_chart.save_state()

        self.play(ShowCreation(cross))
        self.play(self.bar_chart.fade, 0.7)
        self.wait(2)
        self.play(self.bar_chart.restore)
=========7==========
=========8==========
    def text_box(self, str):
        box = TextMobject(str).scale(0.3)
        box.add(SurroundingRectangle(box, stroke_color = DARK_GREY))
        return box
=========8==========
=========9==========
    def false_compliment(self):
        friend = self.friends[0]
        bubble = SpeechBubble(
            height = 1.25, width = 4.5, direction = RIGHT,
            fill_opacity = 0,
        )
        content = TextMobject("The beat was consistent.")
        content.scale(0.75)
        bubble.add_content(content)
        VGroup(bubble, content).next_to(friend, LEFT, SMALL_BUFF)
        VGroup(bubble, content).to_edge(UP, SMALL_BUFF)

        self.play(
            friend.change_mode, "maybe",
            ShowCreation(bubble),
            Write(content)
        )
        self.change_pi_creature_with_guitar("happy")
        self.wait()
        self.play(*list(map(FadeOut, [bubble, content])))

        self.bubble = bubble
=========9==========
=========10==========
    def get_stroke_rgbas(self, vmobject, background=False):
        return self.modified_rgbas(
            vmobject, vmobject.get_stroke_rgbas(background)
        )
=========10==========