[2020-01-30 21:30:24,743][INFO ][node                     ] [Immortus] version[2.2.0], pid[12736], build[8ff36d1/2016-01-27T13:32:39Z]
[2020-01-30 21:30:24,755][INFO ][node                     ] [Immortus] initializing ...
[2020-01-30 21:30:25,308][INFO ][plugins                  ] [Immortus] modules [lang-expression, lang-groovy], plugins [], sites []
[2020-01-30 21:30:25,335][INFO ][env                      ] [Immortus] using [1] data paths, mounts [[Local Disk B (D:)]], net usable_space [51.1gb], net total_space [465.6gb], spins? [unknown], types [NTFS]
[2020-01-30 21:30:25,335][INFO ][env                      ] [Immortus] heap size [910.5mb], compressed ordinary object pointers [true]
[2020-01-30 21:30:27,307][INFO ][node                     ] [Immortus] initialized
[2020-01-30 21:30:27,308][INFO ][node                     ] [Immortus] starting ...
[2020-01-30 21:30:27,697][INFO ][transport                ] [Immortus] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}
[2020-01-30 21:30:27,706][INFO ][discovery                ] [Immortus] stackoverflow/EGPe7vtjRHSivUTFFzbEaQ
[2020-01-30 21:30:32,232][INFO ][cluster.service          ] [Immortus] new_master {Immortus}{EGPe7vtjRHSivUTFFzbEaQ}{127.0.0.1}{127.0.0.1:9300}, reason: zen-disco-join(elected_as_master, [0] joins received)
[2020-01-30 21:30:32,572][INFO ][http                     ] [Immortus] publish_address {127.0.0.1:9200}, bound_addresses {127.0.0.1:9200}, {[::1]:9200}
[2020-01-30 21:30:32,573][INFO ][node                     ] [Immortus] started
[2020-01-30 21:30:32,687][INFO ][gateway                  ] [Immortus] recovered [8] indices into cluster_state
[2020-01-30 21:30:34,080][INFO ][cluster.routing.allocation] [Immortus] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[siamese][0], [siamese][0]] ...]).
[2020-01-30 21:34:38,536][INFO ][node                     ] [Immortus] stopping ...
[2020-01-30 21:34:38,570][INFO ][node                     ] [Immortus] stopped
[2020-01-30 21:34:38,571][INFO ][node                     ] [Immortus] closing ...
[2020-01-30 21:34:38,582][INFO ][node                     ] [Immortus] closed
[2020-01-30 21:34:42,688][INFO ][node                     ] [Boomer] version[2.2.0], pid[6968], build[8ff36d1/2016-01-27T13:32:39Z]
[2020-01-30 21:34:42,688][INFO ][node                     ] [Boomer] initializing ...
[2020-01-30 21:34:43,381][INFO ][plugins                  ] [Boomer] modules [lang-expression, lang-groovy], plugins [], sites []
[2020-01-30 21:34:43,436][INFO ][env                      ] [Boomer] using [1] data paths, mounts [[Local Disk B (D:)]], net usable_space [51.3gb], net total_space [465.6gb], spins? [unknown], types [NTFS]
[2020-01-30 21:34:43,436][INFO ][env                      ] [Boomer] heap size [910.5mb], compressed ordinary object pointers [true]
[2020-01-30 21:34:45,657][INFO ][node                     ] [Boomer] initialized
[2020-01-30 21:34:45,658][INFO ][node                     ] [Boomer] starting ...
[2020-01-30 21:34:46,135][INFO ][transport                ] [Boomer] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}
[2020-01-30 21:34:46,144][INFO ][discovery                ] [Boomer] stackoverflow/iHRZiAGJT_6uIMVzefMSKA
[2020-01-30 21:34:50,668][INFO ][cluster.service          ] [Boomer] new_master {Boomer}{iHRZiAGJT_6uIMVzefMSKA}{127.0.0.1}{127.0.0.1:9300}, reason: zen-disco-join(elected_as_master, [0] joins received)
[2020-01-30 21:34:50,830][INFO ][gateway                  ] [Boomer] recovered [2] indices into cluster_state
[2020-01-30 21:34:51,147][INFO ][http                     ] [Boomer] publish_address {127.0.0.1:9200}, bound_addresses {127.0.0.1:9200}, {[::1]:9200}
[2020-01-30 21:34:51,152][INFO ][node                     ] [Boomer] started
[2020-01-30 21:34:51,622][INFO ][cluster.routing.allocation] [Boomer] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[teddy][0], [teddy][0]] ...]).
[2020-01-30 21:35:12,509][INFO ][node                     ] [Boomer] stopping ...
[2020-01-30 21:35:12,568][INFO ][node                     ] [Boomer] stopped
[2020-01-30 21:35:12,568][INFO ][node                     ] [Boomer] closing ...
[2020-01-30 21:35:12,576][INFO ][node                     ] [Boomer] closed
[2020-03-04 13:16:13,144][INFO ][node                     ] [Benjamin Jacob Grimm] version[2.2.0], pid[8668], build[8ff36d1/2016-01-27T13:32:39Z]
[2020-03-04 13:16:13,145][INFO ][node                     ] [Benjamin Jacob Grimm] initializing ...
[2020-03-04 13:16:14,221][INFO ][plugins                  ] [Benjamin Jacob Grimm] modules [lang-expression, lang-groovy], plugins [], sites []
[2020-03-04 13:16:14,276][INFO ][env                      ] [Benjamin Jacob Grimm] using [1] data paths, mounts [[Local Disk B (D:)]], net usable_space [42.7gb], net total_space [465.6gb], spins? [unknown], types [NTFS]
[2020-03-04 13:16:14,277][INFO ][env                      ] [Benjamin Jacob Grimm] heap size [910.5mb], compressed ordinary object pointers [true]
[2020-03-04 13:16:22,233][INFO ][node                     ] [Benjamin Jacob Grimm] initialized
[2020-03-04 13:16:22,266][INFO ][node                     ] [Benjamin Jacob Grimm] starting ...
[2020-03-04 13:16:23,488][INFO ][transport                ] [Benjamin Jacob Grimm] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}
[2020-03-04 13:16:23,502][INFO ][discovery                ] [Benjamin Jacob Grimm] stackoverflow/9-UKJnW5SUuf_ma4Y0o90g
[2020-03-04 13:16:28,085][INFO ][cluster.service          ] [Benjamin Jacob Grimm] new_master {Benjamin Jacob Grimm}{9-UKJnW5SUuf_ma4Y0o90g}{127.0.0.1}{127.0.0.1:9300}, reason: zen-disco-join(elected_as_master, [0] joins received)
[2020-03-04 13:16:28,357][INFO ][gateway                  ] [Benjamin Jacob Grimm] recovered [2] indices into cluster_state
[2020-03-04 13:16:28,869][INFO ][http                     ] [Benjamin Jacob Grimm] publish_address {127.0.0.1:9200}, bound_addresses {127.0.0.1:9200}, {[::1]:9200}
[2020-03-04 13:16:28,870][INFO ][node                     ] [Benjamin Jacob Grimm] started
[2020-03-04 13:16:29,582][INFO ][cluster.routing.allocation] [Benjamin Jacob Grimm] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[teddy][0], [teddy][0]] ...]).
[2020-03-04 13:25:14,592][INFO ][bootstrap                ] running graceful exit on windows
[2020-03-04 13:25:14,593][INFO ][node                     ] [Benjamin Jacob Grimm] stopping ...
[2020-03-04 13:25:14,886][INFO ][node                     ] [Benjamin Jacob Grimm] stopped
[2020-03-04 13:25:14,887][INFO ][node                     ] [Benjamin Jacob Grimm] closing ...
[2020-03-04 13:25:14,900][INFO ][node                     ] [Benjamin Jacob Grimm] closed
[2020-03-04 14:40:23,746][INFO ][node                     ] [Talisman] version[2.2.0], pid[14796], build[8ff36d1/2016-01-27T13:32:39Z]
[2020-03-04 14:40:23,747][INFO ][node                     ] [Talisman] initializing ...
[2020-03-04 14:40:24,473][INFO ][plugins                  ] [Talisman] modules [lang-expression, lang-groovy], plugins [], sites []
[2020-03-04 14:40:24,505][INFO ][env                      ] [Talisman] using [1] data paths, mounts [[Local Disk B (D:)]], net usable_space [42.7gb], net total_space [465.6gb], spins? [unknown], types [NTFS]
[2020-03-04 14:40:24,505][INFO ][env                      ] [Talisman] heap size [910.5mb], compressed ordinary object pointers [true]
[2020-03-04 14:40:28,457][INFO ][node                     ] [Talisman] initialized
[2020-03-04 14:40:28,458][INFO ][node                     ] [Talisman] starting ...
[2020-03-04 14:40:29,062][INFO ][transport                ] [Talisman] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}
[2020-03-04 14:40:29,082][INFO ][discovery                ] [Talisman] stackoverflow/SoqYBqkDRtS2Ca6464DPgQ
[2020-03-04 14:40:33,606][INFO ][cluster.service          ] [Talisman] new_master {Talisman}{SoqYBqkDRtS2Ca6464DPgQ}{127.0.0.1}{127.0.0.1:9300}, reason: zen-disco-join(elected_as_master, [0] joins received)
[2020-03-04 14:40:33,893][INFO ][gateway                  ] [Talisman] recovered [2] indices into cluster_state
[2020-03-04 14:40:34,254][INFO ][http                     ] [Talisman] publish_address {127.0.0.1:9200}, bound_addresses {127.0.0.1:9200}, {[::1]:9200}
[2020-03-04 14:40:34,254][INFO ][node                     ] [Talisman] started
[2020-03-04 14:40:34,644][INFO ][cluster.routing.allocation] [Talisman] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[teddy][0], [teddy][0]] ...]).
[2020-03-04 14:42:55,599][DEBUG][action.search.type       ] [Talisman] [teddy][0], node[SoqYBqkDRtS2Ca6464DPgQ], [P], v[12], s[STARTED], a[id=wxxi8XevSVClcvvlVwqUYw]: Failed to execute [org.elasticsearch.action.search.SearchRequest@7482ac6b]
RemoteTransportException[[Talisman][127.0.0.1:9300][indices:data/read/search[phase/query+fetch]]]; nested: SearchParseException[failed to parse search source [{"from":0,"size":100,"query":{"bool":{"should":[{"match":{"tokenizedsrc":{"query":"\n \"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\" \n import os \n import sys \n import warnings \n from datetime import timedelta \n from functools import update_wrapper \n from itertools import chain \n from threading import Lock \n from werkzeug . datastructures import Headers \n from werkzeug . datastructures import ImmutableDict \n from werkzeug . exceptions import BadRequest \n from werkzeug . exceptions import BadRequestKeyError \n from werkzeug . exceptions import default_exceptions \n from werkzeug . exceptions import HTTPException \n from werkzeug . exceptions import InternalServerError \n from werkzeug . routing import BuildError \n from werkzeug . routing import Map \n from werkzeug . routing import RequestRedirect \n from werkzeug . routing import RoutingException \n from werkzeug . routing import Rule \n from werkzeug . wrappers import BaseResponse \n from . import cli \n from . import json \n from . _compat import integer_types \n from . _compat import reraise \n from . _compat import string_types \n from . _compat import text_type \n from . config import Config \n from . config import ConfigAttribute \n from . ctx import _AppCtxGlobals \n from . ctx import AppContext \n from . ctx import RequestContext \n from . globals import _request_ctx_stack \n from . globals import g \n from . globals import request \n from . globals import session \n from . helpers import _endpoint_from_view_func \n from . helpers import _PackageBoundObject \n from . helpers import find_package \n from . helpers import get_debug_flag \n from . helpers import get_env \n from . helpers import get_flashed_messages \n from . helpers import get_load_dotenv \n from . helpers import locked_cached_property \n from . helpers import url_for \n from . json import jsonify \n from . logging import create_logger \n from . sessions import SecureCookieSessionInterface \n from . signals import appcontext_tearing_down \n from . signals import got_request_exception \n from . signals import request_finished \n from . signals import request_started \n from . signals import request_tearing_down \n from . templating import _default_template_ctx_processor \n from . templating import DispatchingJinjaLoader \n from . templating import Environment \n from . wrappers import Request \n from . wrappers import Response \n _sentinel = object ( ) \n def _make_timedelta ( value ) : \t \t if not isinstance ( value , timedelta ) : \t \t\t return timedelta ( seconds = value ) \t \t return value \n \n def setupmethod ( f ) : \t \t \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\" \t def wrapper_func ( self , * args , ** kwargs ) : \t \t\t if self . debug and self . _got_first_request : \t \t\t\t raise AssertionError ( \"A setup function was called after the \" \"first request was handled.  This usually indicates a bug \" \"in the application where a module was not imported \" \"and decorators or other functionality was called too late.\\n\" \"To fix this make sure to import all your view modules, \" \"database models and everything related at a central place \" \"before the application starts serving requests.\" ) \t \t return f ( self , * args , ** kwargs ) \t \t return update_wrapper ( wrapper_func , f ) \n \n class Flask ( _PackageBoundObject ) : \t \t \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\" \t request_class = Request \t response_class = Response \t jinja_environment = Environment \t app_ctx_globals_class = _AppCtxGlobals \t config_class = Config \t testing = ConfigAttribute ( \"TESTING\" ) \t secret_key = ConfigAttribute ( \"SECRET_KEY\" ) \t session_cookie_name = ConfigAttribute ( \"SESSION_COOKIE_NAME\" ) \t permanent_session_lifetime = ConfigAttribute ( \"PERMANENT_SESSION_LIFETIME\" , get_converter = _make_timedelta ) \t send_file_max_age_default = ConfigAttribute ( \"SEND_FILE_MAX_AGE_DEFAULT\" , get_converter = _make_timedelta ) \t use_x_sendfile = ConfigAttribute ( \"USE_X_SENDFILE\" ) \t json_encoder = json . JSONEncoder \t json_decoder = json . JSONDecoder \t jinja_options = { \"extensions\" : [ \"jinja2.ext.autoescape\" , \"jinja2.ext.with_\" ] } \t default_config = ImmutableDict ( { \"ENV\" : None , \"DEBUG\" : None , \"TESTING\" : False , \"PROPAGATE_EXCEPTIONS\" : None , \"PRESERVE_CONTEXT_ON_EXCEPTION\" : None , \"SECRET_KEY\" : None , \"PERMANENT_SESSION_LIFETIME\" : timedelta ( days = 31 ) , \"USE_X_SENDFILE\" : False , \"SERVER_NAME\" : None , \"APPLICATION_ROOT\" : \"/\" , \"SESSION_COOKIE_NAME\" : \"session\" , \"SESSION_COOKIE_DOMAIN\" : None , \"SESSION_COOKIE_PATH\" : None , \"SESSION_COOKIE_HTTPONLY\" : True , \"SESSION_COOKIE_SECURE\" : False , \"SESSION_COOKIE_SAMESITE\" : None , \"SESSION_REFRESH_EACH_REQUEST\" : True , \"MAX_CONTENT_LENGTH\" : None , \"SEND_FILE_MAX_AGE_DEFAULT\" : timedelta ( hours = 12 ) , \"TRAP_BAD_REQUEST_ERRORS\" : None , \"TRAP_HTTP_EXCEPTIONS\" : False , \"EXPLAIN_TEMPLATE_LOADING\" : False , \"PREFERRED_URL_SCHEME\" : \"http\" , \"JSON_AS_ASCII\" : True , \"JSON_SORT_KEYS\" : True , \"JSONIFY_PRETTYPRINT_REGULAR\" : False , \"JSONIFY_MIMETYPE\" : \"application/json\" , \"TEMPLATES_AUTO_RELOAD\" : None , \"MAX_COOKIE_SIZE\" : 4093 , } ) \t url_rule_class = Rule \t url_map_class = Map \t test_client_class = None \t test_cli_runner_class = None \t session_interface = SecureCookieSessionInterface ( ) \t import_name = None \t template_folder = None \t root_path = None \t def __init__ ( self , import_name , static_url_path = None , static_folder = \"static\" , static_host = None , host_matching = False , subdomain_matching = False , template_folder = \"templates\" , instance_path = None , instance_relative_config = False , root_path = None , ) : \t \t\t _PackageBoundObject . __init__ ( self , import_name , template_folder = template_folder , root_path = root_path ) \t self . static_url_path = static_url_path \t self . static_folder = static_folder \t if instance_path is None : \t \t\t\t instance_path = self . auto_find_instance_path ( ) \t \t elif not os . path . isabs ( instance_path ) : \t \t\t\t raise ValueError ( \"If an instance path is provided it must be absolute.\" \" A relative path was given instead.\" ) \t \t self . instance_path = instance_path \t self . config = self . make_config ( instance_relative_config ) \t self . view_functions = { } \t self . error_handler_spec = { } \t self . url_build_error_handlers = [ ] \t self . before_request_funcs = { } \t self . before_first_request_funcs = [ ] \t self . after_request_funcs = { } \t self . teardown_request_funcs = { } \t self . teardown_appcontext_funcs = [ ] \t self . url_value_preprocessors = { } \t self . url_default_functions = { } \t self . template_context_processors = { None : [ _default_template_ctx_processor ] } \t self . shell_context_processors = [ ] \t self . blueprints = { } \t self . _blueprint_order = [ ] \t self . extensions = { } \t self . url_map = self . url_map_class ( ) \t self . url_map . host_matching = host_matching \t self . subdomain_matching = subdomain_matching \t self . _got_first_request = False \t self . _before_request_lock = Lock ( ) \t if self . has_static_folder : \t \t\t\t assert ( bool ( static_host ) == host_matching ) , \"Invalid static_host/host_matching combination\" \t self . add_url_rule ( self . static_url_path + \"/<path:filename>\" , endpoint = \"static\" , host = static_host , view_func = self . send_static_file , ) \t \t self . cli . name = self . name \t \t @ locked_cached_property \t def name ( self ) : \t \t\t \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\" \t if self . import_name == \"__main__\" : \t \t\t\t fn = getattr ( sys . modules [ \"__main__\" ] , \"__file__\" , None ) \t if fn is None : \t \t\t\t\t return \"__main__\" \t \t return os . path . splitext ( os . path . basename ( fn ) ) [ 0 ] \t \t return self . import_name \t \t @ property \t def propagate_exceptions ( self ) : \t \t\t \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t rv = self . config [ \"PROPAGATE_EXCEPTIONS\" ] \t if rv is not None : \t \t\t\t return rv \t \t return self . testing or self . debug \t \t @ property \t def preserve_context_on_exception ( self ) : \t \t\t \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t rv = self . config [ \"PRESERVE_CONTEXT_ON_EXCEPTION\" ] \t if rv is not None : \t \t\t\t return rv \t \t return self . debug \t \t @ locked_cached_property \t def logger ( self ) : \t \t\t \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\" \t return create_logger ( self ) \t \t @ locked_cached_property \t def jinja_env ( self ) : \t \t\t \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\" \t return self . create_jinja_environment ( ) \t \t @ property \t def got_first_request ( self ) : \t \t\t \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\" \t return self . _got_first_request \t \t def make_config ( self , instance_relative = False ) : \t \t\t \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\" \t root_path = self . root_path \t if instance_relative : \t \t\t\t root_path = self . instance_path \t \t defaults = dict ( self . default_config ) \t defaults [ \"ENV\" ] = get_env ( ) \t defaults [ \"DEBUG\" ] = get_debug_flag ( ) \t return self . config_class ( root_path , defaults ) \t \t def auto_find_instance_path ( self ) : \t \t\t \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\" \t prefix , package_path = find_package ( self . import_name ) \t if prefix is None : \t \t\t\t return os . path . join ( package_path , \"instance\" ) \t \t return os . path . join ( prefix , \"var\" , self . name + \"-instance\" ) \t \t def open_instance_resource ( self , resource , mode = \"rb\" ) : \t \t\t \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\" \t return open ( os . path . join ( self . instance_path , resource ) , mode ) \t \t @ property \t def templates_auto_reload ( self ) : \t \t\t \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\" \t rv = self . config [ \"TEMPLATES_AUTO_RELOAD\" ] \t return rv if rv is not None else self . debug \t \t @ templates_auto_reload . setter \t def templates_auto_reload ( self , value ) : \t \t\t self . config [ \"TEMPLATES_AUTO_RELOAD\" ] = value \t \t def create_jinja_environment ( self ) : \t \t\t \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\" \t options = dict ( self . jinja_options ) \t if \"autoescape\" not in options : \t \t\t\t options [ \"autoescape\" ] = self . select_jinja_autoescape \t \t if \"auto_reload\" not in options : \t \t\t\t options [ \"auto_reload\" ] = self . templates_auto_reload \t \t rv = self . jinja_environment ( self , ** options ) \t rv . globals . update ( url_for = url_for , get_flashed_messages = get_flashed_messages , config = self . config , request = request , session = session , g = g , ) \t rv . filters [ \"tojson\" ] = json . tojson_filter \t return rv \t \t def create_global_jinja_loader ( self ) : \t \t\t \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\" \t return DispatchingJinjaLoader ( self ) \t \t def select_jinja_autoescape ( self , filename ) : \t \t\t \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\" \t if filename is None : \t \t\t\t return True \t \t return filename . endswith ( ( \".html\" , \".htm\" , \".xml\" , \".xhtml\" ) ) \t \t def update_template_context ( self , context ) : \t \t\t \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\" \t funcs = self . template_context_processors [ None ] \t reqctx = _request_ctx_stack . top \t if reqctx is not None : \t \t\t\t bp = reqctx . request . blueprint \t if bp is not None and bp in self . template_context_processors : \t \t\t\t\t funcs = chain ( funcs , self . template_context_processors [ bp ] ) \t \t \t orig_ctx = context . copy ( ) \t for func in funcs : \t \t\t\t context . update ( func ( ) ) \t \t context . update ( orig_ctx ) \t \t def make_shell_context ( self ) : \t \t\t \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\" \t rv = { \"app\" : self , \"g\" : g } \t for processor in self . shell_context_processors : \t \t\t\t rv . update ( processor ( ) ) \t \t return rv \t \t env = ConfigAttribute ( \"ENV\" ) \t @ property \t def debug ( self ) : \t \t\t \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\" \t return self . config [ \"DEBUG\" ] \t \t @ debug . setter \t def debug ( self , value ) : \t \t\t self . config [ \"DEBUG\" ] = value \t self . jinja_env . auto_reload = self . templates_auto_reload \t \t def run ( self , host = None , port = None , debug = None , load_dotenv = True , ** options ) : \t \t\t \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\" \t if os . environ . get ( \"FLASK_RUN_FROM_CLI\" ) == \"true\" : \t \t\t\t from . debughelpers import explain_ignored_app_run \t explain_ignored_app_run ( ) \t return \t \t if get_load_dotenv ( load_dotenv ) : \t \t\t\t cli . load_dotenv ( ) \t if \"FLASK_ENV\" in os . environ : \t \t\t\t\t self . env = get_env ( ) \t self . debug = get_debug_flag ( ) \t \t elif \"FLASK_DEBUG\" in os . environ : \t \t\t\t\t self . debug = get_debug_flag ( ) \t \t \t if debug is not None : \t \t\t\t self . debug = bool ( debug ) \t \t _host = \"127.0.0.1\" \t _port = 5000 \t server_name = self . config . get ( \"SERVER_NAME\" ) \t sn_host , sn_port = None , None \t if server_name : \t \t\t\t sn_host , _ , sn_port = server_name . partition ( \":\" ) \t \t host = host or sn_host or _host \t port = int ( next ( ( p for p in ( port , sn_port ) if p is not None ) , _port ) ) \t options . setdefault ( \"use_reloader\" , self . debug ) \t options . setdefault ( \"use_debugger\" , self . debug ) \t options . setdefault ( \"threaded\" , True ) \t cli . show_server_banner ( self . env , self . debug , self . name , False ) \t from werkzeug . serving import run_simple \t try : \t \t\t\t run_simple ( host , port , self , ** options ) \t \t finally : \t \t\t\t self . _got_first_request = False \t \t \t def test_client ( self , use_cookies = True , ** kwargs ) : \t \t\t \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\" \t cls = self . test_client_class \t if cls is None : \t \t\t\t from . testing import FlaskClient as cls \t \t return cls ( self , self . response_class , use_cookies = use_cookies , ** kwargs ) \t \t def test_cli_runner ( self , ** kwargs ) : \t \t\t \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\" \t cls = self . test_cli_runner_class \t if cls is None : \t \t\t\t from . testing import FlaskCliRunner as cls \t \t return cls ( self , ** kwargs ) \t \t def open_session ( self , request ) : \t \t\t \"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"open_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.open_session\" instead.' ) ) \t return self . session_interface . open_session ( self , request ) \t \t def save_session ( self , session , response ) : \t \t\t \"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"save_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.save_session\" instead.' ) ) \t return self . session_interface . save_session ( self , session , response ) \t \t def make_null_session ( self ) : \t \t\t \"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"make_null_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.make_null_session\" instead.' ) ) \t return self . session_interface . make_null_session ( self ) \t \t @ setupmethod \t def register_blueprint ( self , blueprint , ** options ) : \t \t\t \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\" \t first_registration = False \t if blueprint . name in self . blueprints : \t \t\t\t assert self . blueprints [ blueprint . name ] is blueprint , ( \"A name collision occurred between blueprints %r and %r. Both\" ' share the same name \"%s\". Blueprints that are created on the' \" fly need unique names.\" % ( blueprint , self . blueprints [ blueprint . name ] , blueprint . name ) ) \t \t else : \t \t\t\t self . blueprints [ blueprint . name ] = blueprint \t self . _blueprint_order . append ( blueprint ) \t first_registration = True \t \t blueprint . register ( self , options , first_registration ) \t \t def iter_blueprints ( self ) : \t \t\t \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\" \t return iter ( self . _blueprint_order ) \t \t @ setupmethod \t def add_url_rule ( self , rule , endpoint = None , view_func = None , provide_automatic_options = None , ** options ) : \t \t\t \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t if endpoint is None : \t \t\t\t endpoint = _endpoint_from_view_func ( view_func ) \t \t options [ \"endpoint\" ] = endpoint \t methods = options . pop ( \"methods\" , None ) \t if methods is None : \t \t\t\t methods = getattr ( view_func , \"methods\" , None ) or ( \"GET\" , ) \t \t if isinstance ( methods , string_types ) : \t \t\t\t raise TypeError ( \"Allowed methods have to be iterables of strings, \" 'for example: @app.route(..., methods=[\"POST\"])' ) \t \t methods = set ( item . upper ( ) for item in methods ) \t required_methods = set ( getattr ( view_func , \"required_methods\" , ( ) ) ) \t if provide_automatic_options is None : \t \t\t\t provide_automatic_options = getattr ( view_func , \"provide_automatic_options\" , None ) \t \t if provide_automatic_options is None : \t \t\t\t if \"OPTIONS\" not in methods : \t \t\t\t\t provide_automatic_options = True \t required_methods . add ( \"OPTIONS\" ) \t \t else : \t \t\t\t\t provide_automatic_options = False \t \t \t methods |= required_methods \t rule = self . url_rule_class ( rule , methods = methods , ** options ) \t rule . provide_automatic_options = provide_automatic_options \t self . url_map . add ( rule ) \t if view_func is not None : \t \t\t\t old_func = self . view_functions . get ( endpoint ) \t if old_func is not None and old_func != view_func : \t \t\t\t\t raise AssertionError ( \"View function mapping is overwriting an \" \"existing endpoint function: %s\" % endpoint ) \t \t self . view_functions [ endpoint ] = view_func \t \t \t def route ( self , rule , ** options ) : \t \t\t \"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t endpoint = options . pop ( \"endpoint\" , None ) \t self . add_url_rule ( rule , endpoint , f , ** options ) \t return f \t \t return decorator \t \t @ setupmethod \t def endpoint ( self , endpoint ) : \t \t\t \"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . view_functions [ endpoint ] = f \t return f \t \t return decorator \t \t @ staticmethod \t def _get_exc_class_and_code ( exc_class_or_code ) : \t \t\t \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\" \t if isinstance ( exc_class_or_code , integer_types ) : \t \t\t\t exc_class = default_exceptions [ exc_class_or_code ] \t \t else : \t \t\t\t exc_class = exc_class_or_code \t \t assert issubclass ( exc_class , Exception ) \t if issubclass ( exc_class , HTTPException ) : \t \t\t\t return exc_class , exc_class . code \t \t else : \t \t\t\t return exc_class , None \t \t \t @ setupmethod \t def errorhandler ( self , code_or_exception ) : \t \t\t \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . _register_error_handler ( None , code_or_exception , f ) \t return f \t \t return decorator \t \t @ setupmethod \t def register_error_handler ( self , code_or_exception , f ) : \t \t\t \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\" \t self . _register_error_handler ( None , code_or_exception , f ) \t \t @ setupmethod \t def _register_error_handler ( self , key , code_or_exception , f ) : \t \t\t \"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\" \t if isinstance ( code_or_exception , HTTPException ) : \t \t\t\t raise ValueError ( \"Tried to register a handler for an exception instance {0!r}.\" \" Handlers can only be registered for exception classes or\" \" HTTP error codes.\" . format ( code_or_exception ) ) \t \t try : \t \t\t\t exc_class , code = self . _get_exc_class_and_code ( code_or_exception ) \t \t except KeyError : \t \t\t\t raise KeyError ( \"'{0}' is not a recognized HTTP error code. Use a subclass of\" \" HTTPException with that code instead.\" . format ( code_or_exception ) ) \t \t handlers = self . error_handler_spec . setdefault ( key , { } ) . setdefault ( code , { } ) \t handlers [ exc_class ] = f \t \t @ setupmethod \t def template_filter ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_filter ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_filter ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . filters [ name or f . __name__ ] = f \t \t @ setupmethod \t def template_test ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_test ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_test ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . tests [ name or f . __name__ ] = f \t \t @ setupmethod \t def template_global ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_global ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_global ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . globals [ name or f . __name__ ] = f \t \t @ setupmethod \t def before_request ( self , f ) : \t \t\t \"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\" \t self . before_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def before_first_request ( self , f ) : \t \t\t \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\" \t self . before_first_request_funcs . append ( f ) \t return f \t \t @ setupmethod \t def after_request ( self , f ) : \t \t\t \"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\" \t self . after_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def teardown_request ( self , f ) : \t \t\t \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\" \t self . teardown_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def teardown_appcontext ( self , f ) : \t \t\t \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\" \t self . teardown_appcontext_funcs . append ( f ) \t return f \t \t @ setupmethod \t def context_processor ( self , f ) : \t \t\t \"\"\"Registers a template context processor function.\"\"\" \t self . template_context_processors [ None ] . append ( f ) \t return f \t \t @ setupmethod \t def shell_context_processor ( self , f ) : \t \t\t \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\" \t self . shell_context_processors . append ( f ) \t return f \t \t @ setupmethod \t def url_value_preprocessor ( self , f ) : \t \t\t \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\" \t self . url_value_preprocessors . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def url_defaults ( self , f ) : \t \t\t \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\" \t self . url_default_functions . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t def _find_error_handler ( self , e ) : \t \t\t \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\" \t exc_class , code = self . _get_exc_class_and_code ( type ( e ) ) \t for name , c in ( ( request . blueprint , code ) , ( None , code ) , ( request . blueprint , None ) , ( None , None ) , ) : \t \t\t\t handler_map = self . error_handler_spec . setdefault ( name , { } ) . get ( c ) \t if not handler_map : \t \t\t\t\t continue \t \t for cls in exc_class . __mro__ : \t \t\t\t\t handler = handler_map . get ( cls ) \t if handler is not None : \t \t\t\t\t\t return handler \t \t \t \t \t def handle_http_exception ( self , e ) : \t \t\t \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\" \t if e . code is None : \t \t\t\t return e \t \t if isinstance ( e , RoutingException ) : \t \t\t\t return e \t \t handler = self . _find_error_handler ( e ) \t if handler is None : \t \t\t\t return e \t \t return handler ( e ) \t \t def trap_http_exception ( self , e ) : \t \t\t \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\" \t if self . config [ \"TRAP_HTTP_EXCEPTIONS\" ] : \t \t\t\t return True \t \t trap_bad_request = self . config [ \"TRAP_BAD_REQUEST_ERRORS\" ] \t if ( trap_bad_request is None and self . debug and isinstance ( e , BadRequestKeyError ) ) : \t \t\t\t return True \t \t if trap_bad_request : \t \t\t\t return isinstance ( e , BadRequest ) \t \t return False \t \t def handle_user_exception ( self , e ) : \t \t\t \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t assert exc_value is e \t if isinstance ( e , BadRequestKeyError ) : \t \t\t\t if self . debug or self . config [ \"TRAP_BAD_REQUEST_ERRORS\" ] : \t \t\t\t\t e . show_exception = True \t if e . args [ 0 ] not in e . get_description ( ) : \t \t\t\t\t\t e . description = \"KeyError: '{}'\" . format ( * e . args ) \t \t \t elif not hasattr ( BadRequestKeyError , \"show_exception\" ) : \t \t\t\t\t e . args = ( ) \t \t \t if isinstance ( e , HTTPException ) and not self . trap_http_exception ( e ) : \t \t\t\t return self . handle_http_exception ( e ) \t \t handler = self . _find_error_handler ( e ) \t if handler is None : \t \t\t\t reraise ( exc_type , exc_value , tb ) \t \t return handler ( e ) \t \t def handle_exception ( self , e ) : \t \t\t \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t got_request_exception . send ( self , exception = e ) \t if self . propagate_exceptions : \t \t\t\t if exc_value is e : \t \t\t\t\t reraise ( exc_type , exc_value , tb ) \t \t else : \t \t\t\t\t raise e \t \t \t self . log_exception ( ( exc_type , exc_value , tb ) ) \t server_error = InternalServerError ( ) \t server_error . original_exception = e \t handler = self . _find_error_handler ( server_error ) \t if handler is not None : \t \t\t\t server_error = handler ( server_error ) \t \t return self . finalize_request ( server_error , from_error_handler = True ) \t \t def log_exception ( self , exc_info ) : \t \t\t \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\" \t self . logger . error ( \"Exception on %s [%s]\" % ( request . path , request . method ) , exc_info = exc_info ) \t \t def raise_routing_exception ( self , request ) : \t \t\t \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\" \t if ( not self . debug or not isinstance ( request . routing_exception , RequestRedirect ) or request . method in ( \"GET\" , \"HEAD\" , \"OPTIONS\" ) ) : \t \t\t\t raise request . routing_exception \t \t from . debughelpers import FormDataRoutingRedirect \t raise FormDataRoutingRedirect ( request ) \t \t def dispatch_request ( self ) : \t \t\t \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\" \t req = _request_ctx_stack . top . request \t if req . routing_exception is not None : \t \t\t\t self . raise_routing_exception ( req ) \t \t rule = req . url_rule \t if ( getattr ( rule , \"provide_automatic_options\" , False ) and req . method == \"OPTIONS\" ) : \t \t\t\t return self . make_default_options_response ( ) \t \t return self . view_functions [ rule . endpoint ] ( ** req . view_args ) \t \t def full_dispatch_request ( self ) : \t \t\t \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\" \t self . try_trigger_before_first_request_functions ( ) \t try : \t \t\t\t request_started . send ( self ) \t rv = self . preprocess_request ( ) \t if rv is None : \t \t\t\t\t rv = self . dispatch_request ( ) \t \t \t except Exception as e : \t \t\t\t rv = self . handle_user_exception ( e ) \t \t return self . finalize_request ( rv ) \t \t def finalize_request ( self , rv , from_error_handler = False ) : \t \t\t \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\" \t response = self . make_response ( rv ) \t try : \t \t\t\t response = self . process_response ( response ) \t request_finished . send ( self , response = response ) \t \t except Exception : \t \t\t\t if not from_error_handler : \t \t\t\t\t raise \t \t self . logger . exception ( \"Request finalizing failed with an error while handling an error\" ) \t \t return response \t \t def try_trigger_before_first_request_functions ( self ) : \t \t\t \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\" \t if self . _got_first_request : \t \t\t\t return \t \t with self . _before_request_lock : \t \t\t\t if self . _got_first_request : \t \t\t\t\t return \t \t for func in self . before_first_request_funcs : \t \t\t\t\t func ( ) \t \t self . _got_first_request = True \t \t \t def make_default_options_response ( self ) : \t \t\t \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\" \t adapter = _request_ctx_stack . top . url_adapter \t methods = adapter . allowed_methods ( ) \t rv = self . response_class ( ) \t rv . allow . update ( methods ) \t return rv \t \t def should_ignore_error ( self , error ) : \t \t\t \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\" \t return False \t \t def make_response ( self , rv ) : \t \t\t \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\" \t status = headers = None \t if isinstance ( rv , tuple ) : \t \t\t\t len_rv = len ( rv ) \t if len_rv == 3 : \t \t\t\t\t rv , status , headers = rv \t \t elif len_rv == 2 : \t \t\t\t\t if isinstance ( rv [ 1 ] , ( Headers , dict , tuple , list ) ) : \t \t\t\t\t\t rv , headers = rv \t \t else : \t \t\t\t\t\t rv , status = rv \t \t \t else : \t \t\t\t\t raise TypeError ( \"The view function did not return a valid response tuple.\" \" The tuple must have the form (body, status, headers),\" \" (body, status), or (body, headers).\" ) \t \t \t if rv is None : \t \t\t\t raise TypeError ( \"The view function did not return a valid response. The\" \" function either returned None or ended without a return\" \" statement.\" ) \t \t if not isinstance ( rv , self . response_class ) : \t \t\t\t if isinstance ( rv , ( text_type , bytes , bytearray ) ) : \t \t\t\t\t rv = self . response_class ( rv , status = status , headers = headers ) \t status = headers = None \t \t elif isinstance ( rv , dict ) : \t \t\t\t\t rv = jsonify ( rv ) \t \t elif isinstance ( rv , BaseResponse ) or callable ( rv ) : \t \t\t\t\t try : \t \t\t\t\t\t rv = self . response_class . force_type ( rv , request . environ ) \t \t except TypeError as e : \t \t\t\t\t\t new_error = TypeError ( \"{e}\\nThe view function did not return a valid\" \" response. The return type must be a string, dict, tuple,\" \" Response instance, or WSGI callable, but it was a\" \" {rv.__class__.__name__}.\" . format ( e = e , rv = rv ) ) \t reraise ( TypeError , new_error , sys . exc_info ( ) [ 2 ] ) \t \t \t else : \t \t\t\t\t raise TypeError ( \"The view function did not return a valid\" \" response. The return type must be a string, dict, tuple,\" \" Response instance, or WSGI callable, but it was a\" \" {rv.__class__.__name__}.\" . format ( rv = rv ) ) \t \t \t if status is not None : \t \t\t\t if isinstance ( status , ( text_type , bytes , bytearray ) ) : \t \t\t\t\t rv . status = status \t \t else : \t \t\t\t\t rv . status_code = status \t \t \t if headers : \t \t\t\t rv . headers . extend ( headers ) \t \t return rv \t \t def create_url_adapter ( self , request ) : \t \t\t \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\" \t if request is not None : \t \t\t\t subdomain = ( ( self . url_map . default_subdomain or None ) if not self . subdomain_matching else None ) \t return self . url_map . bind_to_environ ( request . environ , server_name = self . config [ \"SERVER_NAME\" ] , subdomain = subdomain , ) \t \t if self . config [ \"SERVER_NAME\" ] is not None : \t \t\t\t return self . url_map . bind ( self . config [ \"SERVER_NAME\" ] , script_name = self . config [ \"APPLICATION_ROOT\" ] , url_scheme = self . config [ \"PREFERRED_URL_SCHEME\" ] , ) \t \t \t def inject_url_defaults ( self , endpoint , values ) : \t \t\t \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\" \t funcs = self . url_default_functions . get ( None , ( ) ) \t if \".\" in endpoint : \t \t\t\t bp = endpoint . rsplit ( \".\" , 1 ) [ 0 ] \t funcs = chain ( funcs , self . url_default_functions . get ( bp , ( ) ) ) \t \t for func in funcs : \t \t\t\t func ( endpoint , values ) \t \t \t def handle_url_build_error ( self , error , endpoint , values ) : \t \t\t \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t for handler in self . url_build_error_handlers : \t \t\t\t try : \t \t\t\t\t rv = handler ( error , endpoint , values ) \t if rv is not None : \t \t\t\t\t\t return rv \t \t \t except BuildError as e : \t \t\t\t\t error = e \t \t \t if error is exc_value : \t \t\t\t reraise ( exc_type , exc_value , tb ) \t \t raise error \t \t def preprocess_request ( self ) : \t \t\t \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\" \t bp = _request_ctx_stack . top . request . blueprint \t funcs = self . url_value_preprocessors . get ( None , ( ) ) \t if bp is not None and bp in self . url_value_preprocessors : \t \t\t\t funcs = chain ( funcs , self . url_value_preprocessors [ bp ] ) \t \t for func in funcs : \t \t\t\t func ( request . endpoint , request . view_args ) \t \t funcs = self . before_request_funcs . get ( None , ( ) ) \t if bp is not None and bp in self . before_request_funcs : \t \t\t\t funcs = chain ( funcs , self . before_request_funcs [ bp ] ) \t \t for func in funcs : \t \t\t\t rv = func ( ) \t if rv is not None : \t \t\t\t\t return rv \t \t \t \t def process_response ( self , response ) : \t \t\t \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\" \t ctx = _request_ctx_stack . top \t bp = ctx . request . blueprint \t funcs = ctx . _after_request_functions \t if bp is not None and bp in self . after_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . after_request_funcs [ bp ] ) ) \t \t if None in self . after_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . after_request_funcs [ None ] ) ) \t \t for handler in funcs : \t \t\t\t response = handler ( response ) \t \t if not self . session_interface . is_null_session ( ctx . session ) : \t \t\t\t self . session_interface . save_session ( self , ctx . session , response ) \t \t return response \t \t def do_teardown_request ( self , exc = _sentinel ) : \t \t\t \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\" \t if exc is _sentinel : \t \t\t\t exc = sys . exc_info ( ) [ 1 ] \t \t funcs = reversed ( self . teardown_request_funcs . get ( None , ( ) ) ) \t bp = _request_ctx_stack . top . request . blueprint \t if bp is not None and bp in self . teardown_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . teardown_request_funcs [ bp ] ) ) \t \t for func in funcs : \t \t\t\t func ( exc ) \t \t request_tearing_down . send ( self , exc = exc ) \t \t def do_teardown_appcontext ( self , exc = _sentinel ) : \t \t\t \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t if exc is _sentinel : \t \t\t\t exc = sys . exc_info ( ) [ 1 ] \t \t for func in reversed ( self . teardown_appcontext_funcs ) : \t \t\t\t func ( exc ) \t \t appcontext_tearing_down . send ( self , exc = exc ) \t \t def app_context ( self ) : \t \t\t \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t return AppContext ( self ) \t \t def request_context ( self , environ ) : \t \t\t \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\" \t return RequestContext ( self , environ ) \t \t def test_request_context ( self , * args , ** kwargs ) : \t \t\t \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\" \t from . testing import EnvironBuilder \t builder = EnvironBuilder ( self , * args , ** kwargs ) \t try : \t \t\t\t return self . request_context ( builder . get_environ ( ) ) \t \t finally : \t \t\t\t builder . close ( ) \t \t \t def wsgi_app ( self , environ , start_response ) : \t \t\t \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\" \t ctx = self . request_context ( environ ) \t error = None \t try : \t \t\t\t try : \t \t\t\t\t ctx . push ( ) \t response = self . full_dispatch_request ( ) \t \t except Exception as e : \t \t\t\t\t error = e \t response = self . handle_exception ( e ) \t \t except : \t \t\t\t\t error = sys . exc_info ( ) [ 1 ] \t raise \t \t return response ( environ , start_response ) \t \t finally : \t \t\t\t if self . should_ignore_error ( error ) : \t \t\t\t\t error = None \t \t ctx . auto_pop ( error ) \t \t \t def __call__ ( self , environ , start_response ) : \t \t\t \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\" \t return self . wsgi_app ( environ , start_response ) \t \t def __repr__ ( self ) : \t \t\t return \"<%s %r>\" % ( self . __class__ . __name__ , self . name ) \n \n \n < EOF >","type":"boolean","boost":1.0}}},{"match":{"t2src":{"query":"NSNimport SNimportW NimportWN importWNimport WNimportW NimportWN importWNimport WNimportW NimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.import from.importW .importWN importWNfrom WNfrom. Nfrom.import from.importW .importWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNW WNW= NW=W W=W( =W() W()N ()Ndef )NdefW NdefW( defW(W W(W) (W): W):N ):NI :NIif NIifnot IifnotW ifnotW( notW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnW( returnW(W W(W= (W=W W=W) =W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W): W):N ):NI :NIif NIifW IifW. ifW.W W.Wand .WandW WandW. andW.W W.W: .W:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSSS SSSS SSSS SSSS SSS) SS)N S)ND )NDreturn NDreturnW DreturnW( returnW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W)N W)ND )NDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDclass NDclassW DclassW( classW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S, (S,W S,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W( =W(S W(S, (S,W S,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W. =W.W W.WN .WNW WNW= NW=W W=W. =W.W W.WN .WNW WNW= NW={ W={S ={S: {S:[ S:[S :[S, [S,S S,S] ,S]} S]}N ]}NW }NW= NW=W W=W( =W({ W({S ({S: {S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:W S:W( :W(W W(W= (W=V W=V) =V), V),S ),S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:S S:S, :S,S S,S: ,S:S S:S, :S,S S,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:True S:True, :True,S True,S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:True S:True, :True,S True,S: ,S:None S:None, :None,S None,S: ,S:W S:W( :W(W W(W= (W=V W=V) =V), V),S ),S: ,S:None S:None, :None,S None,S: ,S:False S:False, :False,S False,S: ,S:False S:False, :False,S False,S: ,S:S S:S, :S,S S,S: ,S:True S:True, :True,S True,S: ,S:True S:True, :True,S True,S: ,S:False S:False, :False,S False,S: ,S:S S:S, :S,S S,S: ,S:None S:None, :None,S None,S: ,S:V S:V, :V,} V,}) ,})N })NW )NW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNW NoneNW= NW=W W=W( =W() W()N ()NW )NW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNdef NoneNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None, =None,W None,W= ,W=S W=S, =S,W S,W= ,W=None W=None, =None,W None,W= ,W=False W=False, =False,W False,W= ,W=False W=False, =False,W False,W= ,W=S W=S, =S,W S,W= ,W=None W=None, =None,W None,W= ,W=False W=False, =False,W False,W= ,W=None W=None, =None,) None,): ,):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W) =W)N W)NW )NW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=WN =WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()N ()ND )NDelif NDelifnot DelifnotW elifnotW. notW.W W.W. .W.W W.W( .W(W W(W) (W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS) SS)N S)ND )NDW NDW. DW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={None ={None: {None:[ None:[W :[W] [W]} W]}N ]}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=False W=FalseN =FalseNW FalseNW. NW.W W.W= .W=W W=W( =W() W()N ()Nif )NifW NifW. ifW.W W.W: .W:N W:NI :NIassert NIassert( Iassert(W assert(W( (W(W W(W) (W)== W)==W )==W) ==W), W),S ),SN ,SNW SNW. NW.W W.W( .W(W W(W. (W.W W.W+ .W+S W+S, +S,W S,W= ,W=S W=S, =S,W S,W= ,W=W W=W, =W,W W,W= ,W=W W=W. =W.W W.W, .W,) W,)N ,)ND )NDW NDW. DW.W W.W. .W.W W.W= .W=W W=W. =W.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W== .W==S W==S: ==S:N S:NI :NIW NIW= IW=W W=W( =W(W W(W. (W.W W.W[ .W[S W[S] [S], S],S ],S, ,S,None S,None) ,None)N None)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnS IreturnSN returnSND SNDreturn NDreturnW DreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W. .W.W W.W( .W(W W(W) (W)) W))[ ))[V )[V] [V]N V]ND ]NDreturn NDreturnW DreturnW. returnW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW. returnW.W W.Wor .WorW WorW. orW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW. returnW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W( .W() W()N ()ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.WN .WND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=False W=False) =False): False):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifW: ifW:N W:NI :NIW NIW= IW=W W=W. =W.W W.WN .WND WNDW NDW= DW=W W=W( =W(W W(W. (W.W W.W) .W)N W)NW )NW[ NW[S W[S] [S]= S]=W ]=W( =W() W()N ()NW )NW[ NW[S W[S] [S]= S]=W ]=W( =W() W()N ()Nreturn )NreturnW NreturnW. returnW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W= ,W=W W=W( =W(W W(W. (W.W W.W) .W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S) ,S)N S)ND )NDreturn NDreturnW DreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S, ,S,W S,W. ,W.W W.W+ .W+S W+S) +S)N S)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=S W=S) =S): S):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W. (W.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W) ,W), W),W ),W) ,W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nreturn ]NreturnW NreturnWif returnWifW WifWis ifWisnot WisnotNone isnotNoneelse notNoneelseW NoneelseW. elseW.W W.WN .WND WND@ ND@W D@W. @W.W W.WN .WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]= S]=W ]=WN =WND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W( =W(W W(W. (W.W W.W) .W)N W)Nif )NifS NifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW[ IW[S W[S] [S]= S]=W ]=W. =W.W W.WN .WND WNDif NDifS DifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW[ IW[S W[S] [S]= S]=W ]=W. =W.W W.WN .WND WNDW NDW= DW=W W=W. =W.W W.W( .W(W W(W, (W,** W,**W ,**W) **W)N W)NW )NW. NW.W W.W. .W.W W.W( .W(W W(W= (W=W W=W, =W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W. =W.W W.W, .W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W, =W,) W,)N ,)NW )NW. NW.W W.W[ .W[S W[S] [S]= S]=W ]=W. =W.W W.WN .WNreturn WNreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDreturn NDreturnW DreturnW. returnW.W W.W( .W(( W((S ((S, (S,S S,S, ,S,S S,S, ,S,S S,S) ,S)) S))N ))ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[None W[None] [None]N None]NW ]NW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDD NDDW DDW= DW=W W=W. =W.W W.W( .W() W()N ()Nfor )NforW NforWin forWinW WinW: inW:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW={ W={S ={S: {S:W S:W, :W,S W,S: ,S:W S:W} :W}N W}Nfor }NforW NforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDreturn NDreturnW DreturnWN returnWND WNDW NDW= DW=W W=W( =W(S W(S) (S)N S)N@ )N@W N@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W[ .W[S W[S] [S]N S]ND ]ND@ ND@W D@W. @W.W W.WN .WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]= S]=W ]=WN =WNW WNW. NW.W W.W. .W.W W.W= .W=W W=W. =W.W W.WN .WND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=True W=True, =True,** True,**W ,**W) **W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W. .W.W W.W( .W(S W(S) (S)== S)==S )==S: ==S:N S:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWN importWNW WNW( NW() W()N ()Nreturn )NreturnN NreturnND returnNDif NDifW DifW( ifW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W() W()N ()Nif )NifS NifSin ifSinW SinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W= .W=W W=W( =W() W()N ()NW )NW. NW.W W.W= .W=W W=W( =W() W()N ()ND )NDelif NDelifS DelifSin elifSinW SinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W= .W=W W=W( =W() W()N ()ND )NDD NDDif DDifW DifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW. IW.W W.W= .W=W W=W( =W(W W(W) (W)N W)ND )NDW NDW= DW=S W=SN =SNW SNW= NW=V W=VN =VNW VNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(S W(S) (S)N S)NW )NW, NW,W W,W= ,W=None W=None, =None,None None,NoneN ,NoneNif NoneNifW NifW: ifW:N W:NI :NIW NIW, IW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W(S W(S) (S)N S)ND )NDW NDW= DW=W W=Wor =WorW WorWor orWorW WorWN orWNW WNW= NW=W W=W( =W(W W(W( (W(( W((W ((Wfor (WforW WforWin forWin( Win(W in(W, (W,W W,W) ,W)if W)ifW )ifWis ifWisnot WisnotNone isnotNone) notNone), None),W ),W) ,W)) W))N ))NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,True S,True) ,True)N True)NW )NW. NW.W W.W( .W(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W, .W,W W,W. ,W.W W.W, .W,False W,False) ,False)N False)Nfrom )NfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNtry WNtry: Ntry:N try:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W, ,W,** W,**W ,**W) **W)N W)ND )NDfinally NDfinally: Dfinally:N finally:NI :NIW NIW. IW.W W.W= .W=False W=FalseN =FalseND FalseNDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W= ,W=True W=True, =True,** True,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWas importWasW WasWN asWND WNDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W= ,W=W W=W, =W,** W,**W ,**W) **W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWas importWasW WasWN asWND WNDreturn NDreturnW DreturnW( returnW(W W(W, (W,** W,**W ,**W) **W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=False W=FalseN =FalseNif FalseNifW NifW. ifW.W W.Win .WinW WinW. inW.W W.W: .W:N W:NI :NIassert NIassertW IassertW. assertW.W W.W[ .W[W W[W. [W.W W.W] .W]is W]isW ]isW, isW,( W,(S ,(SS (SSS SSS% SS%( S%(W %(W, (W,W W,W. ,W.W W.W[ .W[W W[W. [W.W W.W] .W], W],W ],W. ,W.W W.W) .W)) W))N ))ND )NDelse NDelse: Delse:N else:NI :NIW NIW. IW.W W.W[ .W[W W[W. [W.W W.W] .W]= W]=W ]=WN =WNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NW )NW= NW=True W=TrueN =TrueND TrueNDW NDW. DW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W. (W.W W.W) .W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,** None,**W ,**W) **W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDW NDW[ DW[S W[S] [S]= S]=W ]=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(S W(S, (S,None S,None) ,None)N None)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,S W,S, ,S,None S,None) ,None)or None)or( )or(S or(S, (S,) S,)N ,)ND )NDif NDifW DifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS) SS)N S)ND )NDW NDW= DW=W W=W( =W(W W(W. (W.W W.W( .W() W()for ()forW )forWin forWinW WinW) inW)N W)NW )NW= NW=W W=W( =W(W W(W( (W(W W(W, (W,S W,S, ,S,( S,() ,()) ())) )))N ))Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,S W,S, ,S,None S,None) ,None)N None)ND )NDif NDifW DifWis ifWisNone WisNone: isNone:N None:NI :NIif NIifS IifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW= IW=True W=TrueN =TrueNW TrueNW. NW.W W.W( .W(S W(S) (S)N S)ND )NDelse NDelse: Delse:N else:NI :NIW NIW= IW=False W=FalseN =FalseND FalseNDD NDDW DDW|= DW|=W W|=WN |=WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W, =W,** W,**W ,**W) **W)N W)NW )NW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandW!= andW!=W W!=W: !=W:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS% SS%W S%W) %W)N W)ND )NDW NDW. DW.W W.W[ .W[W W[W] [W]= W]=W ]=WN =WND WNDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW= IW=W W=W. =W.W W.W( .W(S W(S, (S,None S,None) ,None)N None)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W, ,W,** W,**W ,**W) **W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W[ .W[W W[W] [W]= W]=W ]=WN =WNreturn WNreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W[ =W[W W[W] [W]N W]ND ]NDelse NDelse: Delse:N else:NI :NIW NIW= IW=W W=WN =WND WNDassert NDassertW DassertW( assertW(W W(W, (W,W W,W) ,W)N W)Nif )NifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnW, returnW,W W,W. ,W.W W.WN .WND WNDelse NDelse: Delse:N else:NI :NIreturn NIreturnW IreturnW, returnW,None W,NoneN ,NoneND NoneNDD NDD@ DD@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(None W(None, (None,W None,W, ,W,W W,W) ,W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(None W(None, (None,W None,W, ,W,W W,W) ,W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDtry NDtry: Dtry:N try:NI :NIW NIW, IW,W W,W= ,W=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDexcept NDexceptW DexceptW: exceptW:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDW NDW= DW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W, (W,{ W,{} ,{}) {})N })NW )NW[ NW[W W[W] [W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W[ .W[None W[None] [None]. None].W ].W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W= ,W=W W=W. =W.W W.W( .W(W W(W( (W(W W(W) (W)) W))N ))Nfor )NforW NforW, forW,W W,Win ,Win( Win(( in((W ((W. (W.W W.W, .W,W W,W) ,W), W),( ),(None ,(None, (None,W None,W) ,W), W),( ),(W ,(W. (W.W W.W, .W,None W,None) ,None), None),( ),(None ,(None, (None,None None,None) ,None), None),) ),): ,):N ):NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W) (W)N W)Nif )Nifnot NifnotW ifnotW: notW:N W:NI :NIcontinue NIcontinueN IcontinueND continueNDfor NDforW DforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDD DDDD DDDdef DDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.Wis .WisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDif NDifW DifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnWN returnWND WNDW NDW= DW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDW NDW= DW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]Nif( Nif(W if(Wis (WisNone WisNoneand isNoneandW NoneandW. andW.W W.Wand .WandW WandW( andW(W W(W, (W,W W,W) ,W)) W)): )):N ):NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDif NDifW DifW: ifW:N W:NI :NIreturn NIreturnW IreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDreturn NDreturnFalse DreturnFalseN returnFalseND FalseNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()Nassert )NassertW NassertWis assertWisW WisWN isWNif WNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIif NIifW IifW. ifW.W W.Wor .WorW WorW. orW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIW NIW. IW.W W.W= .W=True W=TrueN =TrueNif TrueNifW NifW. ifW.W W.W[ .W[V W[V] [V]not V]notin ]notinW notinW. inW.W W.W( .W() W(): ():N ):NI :NIW NIW. IW.W W.W= .W=S W=S. =S.W S.W( .W(* W(*W (*W. *W.W W.W) .W)N W)ND )NDD NDDelif DDelifnot DelifnotW elifnotW( notW(W W(W, (W,S W,S) ,S): S):N ):NI :NIW NIW. IW.W W.W= .W=( W=() =()N ()ND )NDD NDDif DDifW DifW( ifW(W W(W, (W,W W,W) ,W)and W)andnot )andnotW andnotW. notW.W W.W( .W(W W(W) (W): W):N ):NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W(W W(W) (W)N W)ND )NDW NDW= DW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDreturn NDreturnW DreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nif )NifW NifW. ifW.W W.W: .W:N W:NI :NIif NIifW IifWis ifWisW WisW: isW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDelse NDelse: Delse:N else:NI :NIraise NIraiseW IraiseWN raiseWND WNDD NDDW DDW. DW.W W.W( .W(( W((W ((W, (W,W W,W, ,W,W W,W) ,W)) W))N ))NW )NW= NW=W W=W( =W() W()N ()NW )NW. NW.W W.W= .W=W W=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnW. returnW.W W.W( .W(W W(W, (W,W W,W= ,W=True W=True) =True)N True)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(S W(S% (S%( S%(W %(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W), W),W ),W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNif( Nif(not if(notW (notW. notW.W W.Wor .Wornot WornotW ornotW( notW(W W(W. (W.W W.W, .W,W W,W) ,W)or W)orW )orW. orW.W W.Win .Win( Win(S in(S, (S,S S,S, ,S,S S,S) ,S)) S)): )):N ):NI :NIraise NIraiseW IraiseW. raiseW.W W.WN .WND WNDfrom NDfrom. Dfrom.W from.Wimport .WimportW WimportWN importWNraise WNraiseW NraiseW( raiseW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNif WNifW NifW. ifW.W W.Wis .Wisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)ND )NDW NDW= DW=W W=W. =W.W W.WN .WNif WNif( Nif(W if(W( (W(W W(W, (W,S W,S, ,S,False S,False) ,False)and False)andW )andW. andW.W W.W== .W==S W==S) ==S): S):N ):NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W() W()N ()ND )NDreturn NDreturnW DreturnW. returnW.W W.W[ .W[W W[W. [W.W W.W] .W]( W](** ](**W (**W. **W.W W.W) .W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W() W()N ()Ntry )Ntry: Ntry:N try:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()N ()ND )NDD NDDexcept DDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnW. returnW.W W.W( .W(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=False W=False) =False): False):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Ntry )Ntry: Ntry:N try:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDexcept NDexceptW DexceptW: exceptW:N W:NI :NIif NIifnot IifnotW ifnotW: notW:N W:NI :NIraise NIraiseN IraiseND raiseNDW NDW. DW.W W.W. .W.W W.W( .W(S W(S) (S)N S)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W: .W:N W:NI :NIreturn NIreturnN IreturnND returnNDwith NDwithW DwithW. withW.W W.W: .W:N W:NI :NIif NIifW IifW. ifW.W W.W: .W:N W:NI :NIreturn NIreturnN IreturnND returnNDfor NDforW DforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW( IW() W()N ()ND )NDW NDW. DW.W W.W= .W=True W=TrueN =TrueND TrueNDD NDDdef DDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W( .W() W()N ()NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnFalse NreturnFalseN returnFalseND FalseNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W= =W=None W=NoneN =NoneNif NoneNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)Nif )NifW NifW== ifW==V W==V: ==V:N V:NI :NIW NIW, IW,W W,W, ,W,W W,W= ,W=W W=WN =WND WNDelif NDelifW DelifW== elifW==V W==V: ==V:N V:NI :NIif NIifW IifW( ifW(W W(W[ (W[V W[V] [V], V],( ],(W ,(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW, IW,W W,W= ,W=W W=WN =WND WNDelse NDelse: Delse:N else:NI :NIW NIW, IW,W W,W= ,W=W W=WN =WND WNDD NDDelse DDelse: Delse:N else:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS) SS)N S)ND )NDD NDDif DDifW DifWis ifWisNone WisNone: isNone:N None:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS) SS)N S)ND )NDif NDifnot DifnotW ifnotW( notW(W W(W, (W,W W,W. ,W.W W.W) .W): W):N ):NI :NIif NIifW IifW( ifW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W= =W=None W=NoneN =NoneND NoneNDelif NDelifW DelifW( elifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDelif NDelifW DelifW( elifW(W W(W, (W,W W,W) ,W)or W)orW )orW( orW(W W(W) (W): W):N ):NI :NItry NItry: Itry:N try:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W) .W)N W)ND )NDexcept NDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=W( =W(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(W= (W=W W=W, =W,W W,W= ,W=W W=W) =W)) W))N ))NW )NW( NW(W W(W, (W,W W,W, ,W,W W,W. ,W.W W.W( .W() W()[ ()[V )[V] [V]) V])N ])ND )NDD NDDelse DDelse: Delse:N else:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(W= (W=W W=W) =W)) W))N ))ND )NDD NDDif DDifW DifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIif NIifW IifW( ifW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW. IW.W W.W= .W=W W=WN =WND WNDelse NDelse: Delse:N else:NI :NIW NIW. IW.W W.W= .W=W W=WN =WND WNDD NDDif DDifW DifW: ifW:N W:NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=( W=(( =((W ((W. (W.W W.W. .W.W W.Wor .WorNone WorNone) orNone)if None)ifnot )ifnotW ifnotW. notW.W W.Welse .WelseNone WelseNone) elseNone)N None)Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W, =W,) W,)N ,)ND )NDif NDifW DifW. ifW.W W.W[ .W[S W[S] [S]is S]isnot ]isnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],) ],)N ,)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifS NifSin ifSinW SinW: inW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(S W(S, (S,V S,V) ,V)[ V)[V )[V] [V]N V]NW ]NW= NW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W. .W.W W.W( .W(W W(W, (W,( W,() ,()) ())) )))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W) ,W)N W)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()Nfor )NforW NforWin forWinW WinW. inW.W W.W: .W:N W:NI :NItry NItry: Itry:N try:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDexcept DDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=WN =WND WNDD NDDif DDifW DifWis ifWisW WisW: isW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDraise NDraiseW DraiseWN raiseWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDW NDW= DW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW= IW=W W=W( =W() W()N ()Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDD DDDdef DDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDif NDifNone DifNonein ifNoneinW NoneinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[None W[None] [None]) None])) ]))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDif NDifnot DifnotW ifnotW. notW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W) ,W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=W W=W) =W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisW WisW: isW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDW NDW= DW=W W=W( =W(W W(W. (W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())) )))N ))NW )NW= NW=W W=W. =W.W W.W. .W.W W.W. .W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=W W=W) =W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisW WisW: isW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDfor NDforW DforWin forWinW WinW( inW(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNfrom SNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNW WNW= NW=W W=W( =W(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W)N W)Ntry )Ntry: Ntry:N try:NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W(W W(W. (W.W W.W( .W() W()) ())N ))ND )NDfinally NDfinally: Dfinally:N finally:NI :NIW NIW. IW.W W.W( .W() W()N ()ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW= NW=None W=NoneN =NoneNtry NoneNtry: Ntry:N try:NI :NItry NItry: Itry:N try:NI :NIW NIW. IW.W W.W( .W() W()N ()NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()ND )NDexcept NDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDexcept NDexcept: Dexcept:N except:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]Nraise ]NraiseN NraiseND raiseNDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDfinally NDfinally: Dfinally:N finally:NI :NIif NIifW IifW. ifW.W W.W( .W(W W(W) (W): W):N ):NI :NIW NIW= IW=None W=NoneN =NoneND NoneNDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIreturn NIreturnS IreturnS% returnS%( S%(W %(W. (W.W W.W. .W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDD NDD< DD<W D<W>","type":"boolean","boost":4.0}}},{"match":{"t1src":{"query":"\n\"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\"\nimport \"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\"\nimportos \nimportos\n importos\nimport os\nimportsys \nimportsys\n importsys\nimport sys\nimportwarnings \nimportwarnings\n importwarnings\nfrom warnings\nfromdatetime \nfromdatetimeimport fromdatetimeimporttimedelta datetimeimporttimedelta\n importtimedelta\nfrom timedelta\nfromfunctools \nfromfunctoolsimport fromfunctoolsimportupdate_wrapper functoolsimportupdate_wrapper\n importupdate_wrapper\nfrom update_wrapper\nfromitertools \nfromitertoolsimport fromitertoolsimportchain itertoolsimportchain\n importchain\nfrom chain\nfromthreading \nfromthreadingimport fromthreadingimportLock threadingimportLock\n importLock\nfrom Lock\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.datastructures werkzeug.datastructuresimport .datastructuresimportHeaders datastructuresimportHeaders\n importHeaders\nfrom Headers\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.datastructures werkzeug.datastructuresimport .datastructuresimportImmutableDict datastructuresimportImmutableDict\n importImmutableDict\nfrom ImmutableDict\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportBadRequest exceptionsimportBadRequest\n importBadRequest\nfrom BadRequest\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportBadRequestKeyError exceptionsimportBadRequestKeyError\n importBadRequestKeyError\nfrom BadRequestKeyError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportdefault_exceptions exceptionsimportdefault_exceptions\n importdefault_exceptions\nfrom default_exceptions\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportHTTPException exceptionsimportHTTPException\n importHTTPException\nfrom HTTPException\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportInternalServerError exceptionsimportInternalServerError\n importInternalServerError\nfrom InternalServerError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportBuildError routingimportBuildError\n importBuildError\nfrom BuildError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportMap routingimportMap\n importMap\nfrom Map\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRequestRedirect routingimportRequestRedirect\n importRequestRedirect\nfrom RequestRedirect\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRoutingException routingimportRoutingException\n importRoutingException\nfrom RoutingException\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRule routingimportRule\n importRule\nfrom Rule\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.wrappers werkzeug.wrappersimport .wrappersimportBaseResponse wrappersimportBaseResponse\n importBaseResponse\nfrom BaseResponse\nfrom. \nfrom.import from.importcli .importcli\n importcli\nfrom cli\nfrom. \nfrom.import from.importjson .importjson\n importjson\nfrom json\nfrom. \nfrom._compat from._compatimport ._compatimportinteger_types _compatimportinteger_types\n importinteger_types\nfrom integer_types\nfrom. \nfrom._compat from._compatimport ._compatimportreraise _compatimportreraise\n importreraise\nfrom reraise\nfrom. \nfrom._compat from._compatimport ._compatimportstring_types _compatimportstring_types\n importstring_types\nfrom string_types\nfrom. \nfrom._compat from._compatimport ._compatimporttext_type _compatimporttext_type\n importtext_type\nfrom text_type\nfrom. \nfrom.config from.configimport .configimportConfig configimportConfig\n importConfig\nfrom Config\nfrom. \nfrom.config from.configimport .configimportConfigAttribute configimportConfigAttribute\n importConfigAttribute\nfrom ConfigAttribute\nfrom. \nfrom.ctx from.ctximport .ctximport_AppCtxGlobals ctximport_AppCtxGlobals\n import_AppCtxGlobals\nfrom _AppCtxGlobals\nfrom. \nfrom.ctx from.ctximport .ctximportAppContext ctximportAppContext\n importAppContext\nfrom AppContext\nfrom. \nfrom.ctx from.ctximport .ctximportRequestContext ctximportRequestContext\n importRequestContext\nfrom RequestContext\nfrom. \nfrom.globals from.globalsimport .globalsimport_request_ctx_stack globalsimport_request_ctx_stack\n import_request_ctx_stack\nfrom _request_ctx_stack\nfrom. \nfrom.globals from.globalsimport .globalsimportg globalsimportg\n importg\nfrom g\nfrom. \nfrom.globals from.globalsimport .globalsimportrequest globalsimportrequest\n importrequest\nfrom request\nfrom. \nfrom.globals from.globalsimport .globalsimportsession globalsimportsession\n importsession\nfrom session\nfrom. \nfrom.helpers from.helpersimport .helpersimport_endpoint_from_view_func helpersimport_endpoint_from_view_func\n import_endpoint_from_view_func\nfrom _endpoint_from_view_func\nfrom. \nfrom.helpers from.helpersimport .helpersimport_PackageBoundObject helpersimport_PackageBoundObject\n import_PackageBoundObject\nfrom _PackageBoundObject\nfrom. \nfrom.helpers from.helpersimport .helpersimportfind_package helpersimportfind_package\n importfind_package\nfrom find_package\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_debug_flag helpersimportget_debug_flag\n importget_debug_flag\nfrom get_debug_flag\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_env helpersimportget_env\n importget_env\nfrom get_env\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_flashed_messages helpersimportget_flashed_messages\n importget_flashed_messages\nfrom get_flashed_messages\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_load_dotenv helpersimportget_load_dotenv\n importget_load_dotenv\nfrom get_load_dotenv\nfrom. \nfrom.helpers from.helpersimport .helpersimportlocked_cached_property helpersimportlocked_cached_property\n importlocked_cached_property\nfrom locked_cached_property\nfrom. \nfrom.helpers from.helpersimport .helpersimporturl_for helpersimporturl_for\n importurl_for\nfrom url_for\nfrom. \nfrom.json from.jsonimport .jsonimportjsonify jsonimportjsonify\n importjsonify\nfrom jsonify\nfrom. \nfrom.logging from.loggingimport .loggingimportcreate_logger loggingimportcreate_logger\n importcreate_logger\nfrom create_logger\nfrom. \nfrom.sessions from.sessionsimport .sessionsimportSecureCookieSessionInterface sessionsimportSecureCookieSessionInterface\n importSecureCookieSessionInterface\nfrom SecureCookieSessionInterface\nfrom. \nfrom.signals from.signalsimport .signalsimportappcontext_tearing_down signalsimportappcontext_tearing_down\n importappcontext_tearing_down\nfrom appcontext_tearing_down\nfrom. \nfrom.signals from.signalsimport .signalsimportgot_request_exception signalsimportgot_request_exception\n importgot_request_exception\nfrom got_request_exception\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_finished signalsimportrequest_finished\n importrequest_finished\nfrom request_finished\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_started signalsimportrequest_started\n importrequest_started\nfrom request_started\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_tearing_down signalsimportrequest_tearing_down\n importrequest_tearing_down\nfrom request_tearing_down\nfrom. \nfrom.templating from.templatingimport .templatingimport_default_template_ctx_processor templatingimport_default_template_ctx_processor\n import_default_template_ctx_processor\nfrom _default_template_ctx_processor\nfrom. \nfrom.templating from.templatingimport .templatingimportDispatchingJinjaLoader templatingimportDispatchingJinjaLoader\n importDispatchingJinjaLoader\nfrom DispatchingJinjaLoader\nfrom. \nfrom.templating from.templatingimport .templatingimportEnvironment templatingimportEnvironment\n importEnvironment\nfrom Environment\nfrom. \nfrom.wrappers from.wrappersimport .wrappersimportRequest wrappersimportRequest\n importRequest\nfrom Request\nfrom. \nfrom.wrappers from.wrappersimport .wrappersimportResponse wrappersimportResponse\n importResponse\n_sentinel Response\n_sentinel= \n_sentinel=object _sentinel=object( =object() object()\n ()\ndef )\ndef_make_timedelta \ndef_make_timedelta( def_make_timedelta(value _make_timedelta(value) (value): value):\t ):\t\t :\t\tif \t\tifnot \tifnotisinstance ifnotisinstance( notisinstance(value isinstance(value, (value,timedelta value,timedelta) ,timedelta): timedelta):\t ):\t\t\t :\t\t\treturn \t\t\treturntimedelta \t\treturntimedelta( returntimedelta(seconds timedelta(seconds= (seconds=value seconds=value) =value)\t value)\t\t )\t\treturn \t\treturnvalue \treturnvalue\n returnvalue\n\n value\n\ndef \n\ndefsetupmethod \ndefsetupmethod( defsetupmethod(f setupmethod(f) (f): f):\t ):\t\t :\t\t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\" \t\t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\t \t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\tdef \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\tdefwrapper_func \tdefwrapper_func( defwrapper_func(self wrapper_func(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\tif \t\t\tifself \t\tifself. ifself.debug self.debugand .debugandself debugandself. andself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t :\t\t\t\traise \t\t\t\traiseAssertionError \t\t\traiseAssertionError( raiseAssertionError(\"A setup function was called after the \" AssertionError(\"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \" (\"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \" \"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\" \"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \" \"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \" \"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \"\"before the application starts serving requests.\" \"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \"\"before the application starts serving requests.\") \"database models and everything related at a central place \"\"before the application starts serving requests.\")\t \"before the application starts serving requests.\")\t\t )\t\treturn \t\treturnf \treturnf( returnf(self f(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\treturn \t\treturnupdate_wrapper \treturnupdate_wrapper( returnupdate_wrapper(wrapper_func update_wrapper(wrapper_func, (wrapper_func,f wrapper_func,f) ,f)\n f)\n\n )\n\nclass \n\nclassFlask \nclassFlask( classFlask(_PackageBoundObject Flask(_PackageBoundObject) (_PackageBoundObject): _PackageBoundObject):\t ):\t\t :\t\t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\" \t\t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\t \t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\trequest_class \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\trequest_class= \trequest_class=Request request_class=Request\t =Request\tresponse_class Request\tresponse_class= \tresponse_class=Response response_class=Response\t =Response\tjinja_environment Response\tjinja_environment= \tjinja_environment=Environment jinja_environment=Environment\t =Environment\tapp_ctx_globals_class Environment\tapp_ctx_globals_class= \tapp_ctx_globals_class=_AppCtxGlobals app_ctx_globals_class=_AppCtxGlobals\t =_AppCtxGlobals\tconfig_class _AppCtxGlobals\tconfig_class= \tconfig_class=Config config_class=Config\t =Config\ttesting Config\ttesting= \ttesting=ConfigAttribute testing=ConfigAttribute( =ConfigAttribute(\"TESTING\" ConfigAttribute(\"TESTING\") (\"TESTING\")\t \"TESTING\")\tsecret_key )\tsecret_key= \tsecret_key=ConfigAttribute secret_key=ConfigAttribute( =ConfigAttribute(\"SECRET_KEY\" ConfigAttribute(\"SECRET_KEY\") (\"SECRET_KEY\")\t \"SECRET_KEY\")\tsession_cookie_name )\tsession_cookie_name= \tsession_cookie_name=ConfigAttribute session_cookie_name=ConfigAttribute( =ConfigAttribute(\"SESSION_COOKIE_NAME\" ConfigAttribute(\"SESSION_COOKIE_NAME\") (\"SESSION_COOKIE_NAME\")\t \"SESSION_COOKIE_NAME\")\tpermanent_session_lifetime )\tpermanent_session_lifetime= \tpermanent_session_lifetime=ConfigAttribute permanent_session_lifetime=ConfigAttribute( =ConfigAttribute(\"PERMANENT_SESSION_LIFETIME\" ConfigAttribute(\"PERMANENT_SESSION_LIFETIME\", (\"PERMANENT_SESSION_LIFETIME\",get_converter \"PERMANENT_SESSION_LIFETIME\",get_converter= ,get_converter=_make_timedelta get_converter=_make_timedelta) =_make_timedelta)\t _make_timedelta)\tsend_file_max_age_default )\tsend_file_max_age_default= \tsend_file_max_age_default=ConfigAttribute send_file_max_age_default=ConfigAttribute( =ConfigAttribute(\"SEND_FILE_MAX_AGE_DEFAULT\" ConfigAttribute(\"SEND_FILE_MAX_AGE_DEFAULT\", (\"SEND_FILE_MAX_AGE_DEFAULT\",get_converter \"SEND_FILE_MAX_AGE_DEFAULT\",get_converter= ,get_converter=_make_timedelta get_converter=_make_timedelta) =_make_timedelta)\t _make_timedelta)\tuse_x_sendfile )\tuse_x_sendfile= \tuse_x_sendfile=ConfigAttribute use_x_sendfile=ConfigAttribute( =ConfigAttribute(\"USE_X_SENDFILE\" ConfigAttribute(\"USE_X_SENDFILE\") (\"USE_X_SENDFILE\")\t \"USE_X_SENDFILE\")\tjson_encoder )\tjson_encoder= \tjson_encoder=json json_encoder=json. =json.JSONEncoder json.JSONEncoder\t .JSONEncoder\tjson_decoder JSONEncoder\tjson_decoder= \tjson_decoder=json json_decoder=json. =json.JSONDecoder json.JSONDecoder\t .JSONDecoder\tjinja_options JSONDecoder\tjinja_options= \tjinja_options={ jinja_options={\"extensions\" ={\"extensions\": {\"extensions\":[ \"extensions\":[\"jinja2.ext.autoescape\" :[\"jinja2.ext.autoescape\", [\"jinja2.ext.autoescape\",\"jinja2.ext.with_\" \"jinja2.ext.autoescape\",\"jinja2.ext.with_\"] ,\"jinja2.ext.with_\"]} \"jinja2.ext.with_\"]}\t ]}\tdefault_config }\tdefault_config= \tdefault_config=ImmutableDict default_config=ImmutableDict( =ImmutableDict({ ImmutableDict({\"ENV\" ({\"ENV\": {\"ENV\":None \"ENV\":None, :None,\"DEBUG\" None,\"DEBUG\": ,\"DEBUG\":None \"DEBUG\":None, :None,\"TESTING\" None,\"TESTING\": ,\"TESTING\":False \"TESTING\":False, :False,\"PROPAGATE_EXCEPTIONS\" False,\"PROPAGATE_EXCEPTIONS\": ,\"PROPAGATE_EXCEPTIONS\":None \"PROPAGATE_EXCEPTIONS\":None, :None,\"PRESERVE_CONTEXT_ON_EXCEPTION\" None,\"PRESERVE_CONTEXT_ON_EXCEPTION\": ,\"PRESERVE_CONTEXT_ON_EXCEPTION\":None \"PRESERVE_CONTEXT_ON_EXCEPTION\":None, :None,\"SECRET_KEY\" None,\"SECRET_KEY\": ,\"SECRET_KEY\":None \"SECRET_KEY\":None, :None,\"PERMANENT_SESSION_LIFETIME\" None,\"PERMANENT_SESSION_LIFETIME\": ,\"PERMANENT_SESSION_LIFETIME\":timedelta \"PERMANENT_SESSION_LIFETIME\":timedelta( :timedelta(days timedelta(days= (days=31 days=31) =31), 31),\"USE_X_SENDFILE\" ),\"USE_X_SENDFILE\": ,\"USE_X_SENDFILE\":False \"USE_X_SENDFILE\":False, :False,\"SERVER_NAME\" False,\"SERVER_NAME\": ,\"SERVER_NAME\":None \"SERVER_NAME\":None, :None,\"APPLICATION_ROOT\" None,\"APPLICATION_ROOT\": ,\"APPLICATION_ROOT\":\"/\" \"APPLICATION_ROOT\":\"/\", :\"/\",\"SESSION_COOKIE_NAME\" \"/\",\"SESSION_COOKIE_NAME\": ,\"SESSION_COOKIE_NAME\":\"session\" \"SESSION_COOKIE_NAME\":\"session\", :\"session\",\"SESSION_COOKIE_DOMAIN\" \"session\",\"SESSION_COOKIE_DOMAIN\": ,\"SESSION_COOKIE_DOMAIN\":None \"SESSION_COOKIE_DOMAIN\":None, :None,\"SESSION_COOKIE_PATH\" None,\"SESSION_COOKIE_PATH\": ,\"SESSION_COOKIE_PATH\":None \"SESSION_COOKIE_PATH\":None, :None,\"SESSION_COOKIE_HTTPONLY\" None,\"SESSION_COOKIE_HTTPONLY\": ,\"SESSION_COOKIE_HTTPONLY\":True \"SESSION_COOKIE_HTTPONLY\":True, :True,\"SESSION_COOKIE_SECURE\" True,\"SESSION_COOKIE_SECURE\": ,\"SESSION_COOKIE_SECURE\":False \"SESSION_COOKIE_SECURE\":False, :False,\"SESSION_COOKIE_SAMESITE\" False,\"SESSION_COOKIE_SAMESITE\": ,\"SESSION_COOKIE_SAMESITE\":None \"SESSION_COOKIE_SAMESITE\":None, :None,\"SESSION_REFRESH_EACH_REQUEST\" None,\"SESSION_REFRESH_EACH_REQUEST\": ,\"SESSION_REFRESH_EACH_REQUEST\":True \"SESSION_REFRESH_EACH_REQUEST\":True, :True,\"MAX_CONTENT_LENGTH\" True,\"MAX_CONTENT_LENGTH\": ,\"MAX_CONTENT_LENGTH\":None \"MAX_CONTENT_LENGTH\":None, :None,\"SEND_FILE_MAX_AGE_DEFAULT\" None,\"SEND_FILE_MAX_AGE_DEFAULT\": ,\"SEND_FILE_MAX_AGE_DEFAULT\":timedelta \"SEND_FILE_MAX_AGE_DEFAULT\":timedelta( :timedelta(hours timedelta(hours= (hours=12 hours=12) =12), 12),\"TRAP_BAD_REQUEST_ERRORS\" ),\"TRAP_BAD_REQUEST_ERRORS\": ,\"TRAP_BAD_REQUEST_ERRORS\":None \"TRAP_BAD_REQUEST_ERRORS\":None, :None,\"TRAP_HTTP_EXCEPTIONS\" None,\"TRAP_HTTP_EXCEPTIONS\": ,\"TRAP_HTTP_EXCEPTIONS\":False \"TRAP_HTTP_EXCEPTIONS\":False, :False,\"EXPLAIN_TEMPLATE_LOADING\" False,\"EXPLAIN_TEMPLATE_LOADING\": ,\"EXPLAIN_TEMPLATE_LOADING\":False \"EXPLAIN_TEMPLATE_LOADING\":False, :False,\"PREFERRED_URL_SCHEME\" False,\"PREFERRED_URL_SCHEME\": ,\"PREFERRED_URL_SCHEME\":\"http\" \"PREFERRED_URL_SCHEME\":\"http\", :\"http\",\"JSON_AS_ASCII\" \"http\",\"JSON_AS_ASCII\": ,\"JSON_AS_ASCII\":True \"JSON_AS_ASCII\":True, :True,\"JSON_SORT_KEYS\" True,\"JSON_SORT_KEYS\": ,\"JSON_SORT_KEYS\":True \"JSON_SORT_KEYS\":True, :True,\"JSONIFY_PRETTYPRINT_REGULAR\" True,\"JSONIFY_PRETTYPRINT_REGULAR\": ,\"JSONIFY_PRETTYPRINT_REGULAR\":False \"JSONIFY_PRETTYPRINT_REGULAR\":False, :False,\"JSONIFY_MIMETYPE\" False,\"JSONIFY_MIMETYPE\": ,\"JSONIFY_MIMETYPE\":\"application/json\" \"JSONIFY_MIMETYPE\":\"application/json\", :\"application/json\",\"TEMPLATES_AUTO_RELOAD\" \"application/json\",\"TEMPLATES_AUTO_RELOAD\": ,\"TEMPLATES_AUTO_RELOAD\":None \"TEMPLATES_AUTO_RELOAD\":None, :None,\"MAX_COOKIE_SIZE\" None,\"MAX_COOKIE_SIZE\": ,\"MAX_COOKIE_SIZE\":4093 \"MAX_COOKIE_SIZE\":4093, :4093,} 4093,}) ,})\t })\turl_rule_class )\turl_rule_class= \turl_rule_class=Rule url_rule_class=Rule\t =Rule\turl_map_class Rule\turl_map_class= \turl_map_class=Map url_map_class=Map\t =Map\ttest_client_class Map\ttest_client_class= \ttest_client_class=None test_client_class=None\t =None\ttest_cli_runner_class None\ttest_cli_runner_class= \ttest_cli_runner_class=None test_cli_runner_class=None\t =None\tsession_interface None\tsession_interface= \tsession_interface=SecureCookieSessionInterface session_interface=SecureCookieSessionInterface( =SecureCookieSessionInterface() SecureCookieSessionInterface()\t ()\timport_name )\timport_name= \timport_name=None import_name=None\t =None\ttemplate_folder None\ttemplate_folder= \ttemplate_folder=None template_folder=None\t =None\troot_path None\troot_path= \troot_path=None root_path=None\t =None\tdef None\tdef__init__ \tdef__init__( def__init__(self __init__(self, (self,import_name self,import_name, ,import_name,static_url_path import_name,static_url_path= ,static_url_path=None static_url_path=None, =None,static_folder None,static_folder= ,static_folder=\"static\" static_folder=\"static\", =\"static\",static_host \"static\",static_host= ,static_host=None static_host=None, =None,host_matching None,host_matching= ,host_matching=False host_matching=False, =False,subdomain_matching False,subdomain_matching= ,subdomain_matching=False subdomain_matching=False, =False,template_folder False,template_folder= ,template_folder=\"templates\" template_folder=\"templates\", =\"templates\",instance_path \"templates\",instance_path= ,instance_path=None instance_path=None, =None,instance_relative_config None,instance_relative_config= ,instance_relative_config=False instance_relative_config=False, =False,root_path False,root_path= ,root_path=None root_path=None, =None,) None,): ,):\t ):\t\t\t :\t\t\t_PackageBoundObject \t\t\t_PackageBoundObject. \t\t_PackageBoundObject.__init__ _PackageBoundObject.__init__( .__init__(self __init__(self, (self,import_name self,import_name, ,import_name,template_folder import_name,template_folder= ,template_folder=template_folder template_folder=template_folder, =template_folder,root_path template_folder,root_path= ,root_path=root_path root_path=root_path) =root_path)\t root_path)\tself )\tself. \tself.static_url_path self.static_url_path= .static_url_path=static_url_path static_url_path=static_url_path\t =static_url_path\tself static_url_path\tself. \tself.static_folder self.static_folder= .static_folder=static_folder static_folder=static_folder\t =static_folder\tif static_folder\tifinstance_path \tifinstance_pathis ifinstance_pathisNone instance_pathisNone: isNone:\t None:\t\t\t\t :\t\t\t\tinstance_path \t\t\t\tinstance_path= \t\t\tinstance_path=self instance_path=self. =self.auto_find_instance_path self.auto_find_instance_path( .auto_find_instance_path() auto_find_instance_path()\t ()\t\t )\t\telif \t\telifnot \telifnotos elifnotos. notos.path os.path. .path.isabs path.isabs( .isabs(instance_path isabs(instance_path) (instance_path): instance_path):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseValueError \t\t\traiseValueError( raiseValueError(\"If an instance path is provided it must be absolute.\" ValueError(\"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\" (\"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\") \"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\")\t \" A relative path was given instead.\")\t\t )\t\tself \t\tself. \tself.instance_path self.instance_path= .instance_path=instance_path instance_path=instance_path\t =instance_path\tself instance_path\tself. \tself.config self.config= .config=self config=self. =self.make_config self.make_config( .make_config(instance_relative_config make_config(instance_relative_config) (instance_relative_config)\t instance_relative_config)\tself )\tself. \tself.view_functions self.view_functions= .view_functions={ view_functions={} ={}\t {}\tself }\tself. \tself.error_handler_spec self.error_handler_spec= .error_handler_spec={ error_handler_spec={} ={}\t {}\tself }\tself. \tself.url_build_error_handlers self.url_build_error_handlers= .url_build_error_handlers=[ url_build_error_handlers=[] =[]\t []\tself ]\tself. \tself.before_request_funcs self.before_request_funcs= .before_request_funcs={ before_request_funcs={} ={}\t {}\tself }\tself. \tself.before_first_request_funcs self.before_first_request_funcs= .before_first_request_funcs=[ before_first_request_funcs=[] =[]\t []\tself ]\tself. \tself.after_request_funcs self.after_request_funcs= .after_request_funcs={ after_request_funcs={} ={}\t {}\tself }\tself. \tself.teardown_request_funcs self.teardown_request_funcs= .teardown_request_funcs={ teardown_request_funcs={} ={}\t {}\tself }\tself. \tself.teardown_appcontext_funcs self.teardown_appcontext_funcs= .teardown_appcontext_funcs=[ teardown_appcontext_funcs=[] =[]\t []\tself ]\tself. \tself.url_value_preprocessors self.url_value_preprocessors= .url_value_preprocessors={ url_value_preprocessors={} ={}\t {}\tself }\tself. \tself.url_default_functions self.url_default_functions= .url_default_functions={ url_default_functions={} ={}\t {}\tself }\tself. \tself.template_context_processors self.template_context_processors= .template_context_processors={ template_context_processors={None ={None: {None:[ None:[_default_template_ctx_processor :[_default_template_ctx_processor] [_default_template_ctx_processor]} _default_template_ctx_processor]}\t ]}\tself }\tself. \tself.shell_context_processors self.shell_context_processors= .shell_context_processors=[ shell_context_processors=[] =[]\t []\tself ]\tself. \tself.blueprints self.blueprints= .blueprints={ blueprints={} ={}\t {}\tself }\tself. \tself._blueprint_order self._blueprint_order= ._blueprint_order=[ _blueprint_order=[] =[]\t []\tself ]\tself. \tself.extensions self.extensions= .extensions={ extensions={} ={}\t {}\tself }\tself. \tself.url_map self.url_map= .url_map=self url_map=self. =self.url_map_class self.url_map_class( .url_map_class() url_map_class()\t ()\tself )\tself. \tself.url_map self.url_map. .url_map.host_matching url_map.host_matching= .host_matching=host_matching host_matching=host_matching\t =host_matching\tself host_matching\tself. \tself.subdomain_matching self.subdomain_matching= .subdomain_matching=subdomain_matching subdomain_matching=subdomain_matching\t =subdomain_matching\tself subdomain_matching\tself. \tself._got_first_request self._got_first_request= ._got_first_request=False _got_first_request=False\t =False\tself False\tself. \tself._before_request_lock self._before_request_lock= ._before_request_lock=Lock _before_request_lock=Lock( =Lock() Lock()\t ()\tif )\tifself \tifself. ifself.has_static_folder self.has_static_folder: .has_static_folder:\t has_static_folder:\t\t\t\t :\t\t\t\tassert \t\t\t\tassert( \t\t\tassert(bool assert(bool( (bool(static_host bool(static_host) (static_host)== static_host)==host_matching )==host_matching) ==host_matching), host_matching),\"Invalid static_host/host_matching combination\" ),\"Invalid static_host/host_matching combination\"\t ,\"Invalid static_host/host_matching combination\"\tself \"Invalid static_host/host_matching combination\"\tself. \tself.add_url_rule self.add_url_rule( .add_url_rule(self add_url_rule(self. (self.static_url_path self.static_url_path+ .static_url_path+\"/<path:filename>\" static_url_path+\"/<path:filename>\", +\"/<path:filename>\",endpoint \"/<path:filename>\",endpoint= ,endpoint=\"static\" endpoint=\"static\", =\"static\",host \"static\",host= ,host=static_host host=static_host, =static_host,view_func static_host,view_func= ,view_func=self view_func=self. =self.send_static_file self.send_static_file, .send_static_file,) send_static_file,)\t ,)\t\t )\t\tself \t\tself. \tself.cli self.cli. .cli.name cli.name= .name=self name=self. =self.name self.name\t .name\t\t name\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdefname \tdefname( defname(self name(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\tif \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\tifself \tifself. ifself.import_name self.import_name== .import_name==\"__main__\" import_name==\"__main__\": ==\"__main__\":\t \"__main__\":\t\t\t\t :\t\t\t\tfn \t\t\t\tfn= \t\t\tfn=getattr fn=getattr( =getattr(sys getattr(sys. (sys.modules sys.modules[ .modules[\"__main__\" modules[\"__main__\"] [\"__main__\"], \"__main__\"],\"__file__\" ],\"__file__\", ,\"__file__\",None \"__file__\",None) ,None)\t None)\tif )\tiffn \tiffnis iffnisNone fnisNone: isNone:\t None:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturn\"__main__\" \t\t\t\treturn\"__main__\"\t return\"__main__\"\t\t \"__main__\"\t\treturn \t\treturnos \treturnos. returnos.path os.path. .path.splitext path.splitext( .splitext(os splitext(os. (os.path os.path. .path.basename path.basename( .basename(fn basename(fn) (fn)) fn))[ ))[0 )[0] [0]\t 0]\t\t ]\t\treturn \t\treturnself \treturnself. returnself.import_name self.import_name\t .import_name\t\t import_name\t\t@ \t\t@property \t@property\t @property\tdef property\tdefpropagate_exceptions \tdefpropagate_exceptions( defpropagate_exceptions(self propagate_exceptions(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"PROPAGATE_EXCEPTIONS\" config[\"PROPAGATE_EXCEPTIONS\"] [\"PROPAGATE_EXCEPTIONS\"]\t \"PROPAGATE_EXCEPTIONS\"]\tif ]\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnrv \t\t\treturnrv\t returnrv\t\t rv\t\treturn \t\treturnself \treturnself. returnself.testing self.testingor .testingorself testingorself. orself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@property \t@property\t @property\tdef property\tdefpreserve_context_on_exception \tdefpreserve_context_on_exception( defpreserve_context_on_exception(self preserve_context_on_exception(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"PRESERVE_CONTEXT_ON_EXCEPTION\" config[\"PRESERVE_CONTEXT_ON_EXCEPTION\"] [\"PRESERVE_CONTEXT_ON_EXCEPTION\"]\t \"PRESERVE_CONTEXT_ON_EXCEPTION\"]\tif ]\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnrv \t\t\treturnrv\t returnrv\t\t rv\t\treturn \t\treturnself \treturnself. returnself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdeflogger \tdeflogger( deflogger(self logger(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\treturn \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\treturncreate_logger \treturncreate_logger( returncreate_logger(self create_logger(self) (self)\t self)\t\t )\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdefjinja_env \tdefjinja_env( defjinja_env(self jinja_env(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\" \t\t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\t \t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\treturn \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\treturnself \treturnself. returnself.create_jinja_environment self.create_jinja_environment( .create_jinja_environment() create_jinja_environment()\t ()\t\t )\t\t@ \t\t@property \t@property\t @property\tdef property\tdefgot_first_request \tdefgot_first_request( defgot_first_request(self got_first_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\treturn \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\treturnself \treturnself. returnself._got_first_request self._got_first_request\t ._got_first_request\t\t _got_first_request\t\tdef \t\tdefmake_config \tdefmake_config( defmake_config(self make_config(self, (self,instance_relative self,instance_relative= ,instance_relative=False instance_relative=False) =False): False):\t ):\t\t\t :\t\t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\troot_path \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\troot_path= \troot_path=self root_path=self. =self.root_path self.root_path\t .root_path\tif root_path\tifinstance_relative \tifinstance_relative: ifinstance_relative:\t instance_relative:\t\t\t\t :\t\t\t\troot_path \t\t\t\troot_path= \t\t\troot_path=self root_path=self. =self.instance_path self.instance_path\t .instance_path\t\t instance_path\t\tdefaults \t\tdefaults= \tdefaults=dict defaults=dict( =dict(self dict(self. (self.default_config self.default_config) .default_config)\t default_config)\tdefaults )\tdefaults[ \tdefaults[\"ENV\" defaults[\"ENV\"] [\"ENV\"]= \"ENV\"]=get_env ]=get_env( =get_env() get_env()\t ()\tdefaults )\tdefaults[ \tdefaults[\"DEBUG\" defaults[\"DEBUG\"] [\"DEBUG\"]= \"DEBUG\"]=get_debug_flag ]=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\treturn )\treturnself \treturnself. returnself.config_class self.config_class( .config_class(root_path config_class(root_path, (root_path,defaults root_path,defaults) ,defaults)\t defaults)\t\t )\t\tdef \t\tdefauto_find_instance_path \tdefauto_find_instance_path( defauto_find_instance_path(self auto_find_instance_path(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\tprefix \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\tprefix, \tprefix,package_path prefix,package_path= ,package_path=find_package package_path=find_package( =find_package(self find_package(self. (self.import_name self.import_name) .import_name)\t import_name)\tif )\tifprefix \tifprefixis ifprefixisNone prefixisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnos \t\t\treturnos. returnos.path os.path. .path.join path.join( .join(package_path join(package_path, (package_path,\"instance\" package_path,\"instance\") ,\"instance\")\t \"instance\")\t\t )\t\treturn \t\treturnos \treturnos. returnos.path os.path. .path.join path.join( .join(prefix join(prefix, (prefix,\"var\" prefix,\"var\", ,\"var\",self \"var\",self. ,self.name self.name+ .name+\"-instance\" name+\"-instance\") +\"-instance\")\t \"-instance\")\t\t )\t\tdef \t\tdefopen_instance_resource \tdefopen_instance_resource( defopen_instance_resource(self open_instance_resource(self, (self,resource self,resource, ,resource,mode resource,mode= ,mode=\"rb\" mode=\"rb\") =\"rb\"): \"rb\"):\t ):\t\t\t :\t\t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\" \t\t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\t \t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\treturn \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\treturnopen \treturnopen( returnopen(os open(os. (os.path os.path. .path.join path.join( .join(self join(self. (self.instance_path self.instance_path, .instance_path,resource instance_path,resource) ,resource), resource),mode ),mode) ,mode)\t mode)\t\t )\t\t@ \t\t@property \t@property\t @property\tdef property\tdeftemplates_auto_reload \tdeftemplates_auto_reload( deftemplates_auto_reload(self templates_auto_reload(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\" \t\t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\t \t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\trv \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"TEMPLATES_AUTO_RELOAD\" config[\"TEMPLATES_AUTO_RELOAD\"] [\"TEMPLATES_AUTO_RELOAD\"]\t \"TEMPLATES_AUTO_RELOAD\"]\treturn ]\treturnrv \treturnrvif returnrvifrv rvifrvis ifrvisnot rvisnotNone isnotNoneelse notNoneelseself Noneelseself. elseself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@templates_auto_reload \t@templates_auto_reload. @templates_auto_reload.setter templates_auto_reload.setter\t .setter\tdef setter\tdeftemplates_auto_reload \tdeftemplates_auto_reload( deftemplates_auto_reload(self templates_auto_reload(self, (self,value self,value) ,value): value):\t ):\t\t\t :\t\t\tself \t\t\tself. \t\tself.config self.config[ .config[\"TEMPLATES_AUTO_RELOAD\" config[\"TEMPLATES_AUTO_RELOAD\"] [\"TEMPLATES_AUTO_RELOAD\"]= \"TEMPLATES_AUTO_RELOAD\"]=value ]=value\t =value\t\t value\t\tdef \t\tdefcreate_jinja_environment \tdefcreate_jinja_environment( defcreate_jinja_environment(self create_jinja_environment(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\" \t\t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\t \t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\toptions \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\toptions= \toptions=dict options=dict( =dict(self dict(self. (self.jinja_options self.jinja_options) .jinja_options)\t jinja_options)\tif )\tif\"autoescape\" \tif\"autoescape\"not if\"autoescape\"notin \"autoescape\"notinoptions notinoptions: inoptions:\t options:\t\t\t\t :\t\t\t\toptions \t\t\t\toptions[ \t\t\toptions[\"autoescape\" options[\"autoescape\"] [\"autoescape\"]= \"autoescape\"]=self ]=self. =self.select_jinja_autoescape self.select_jinja_autoescape\t .select_jinja_autoescape\t\t select_jinja_autoescape\t\tif \t\tif\"auto_reload\" \tif\"auto_reload\"not if\"auto_reload\"notin \"auto_reload\"notinoptions notinoptions: inoptions:\t options:\t\t\t\t :\t\t\t\toptions \t\t\t\toptions[ \t\t\toptions[\"auto_reload\" options[\"auto_reload\"] [\"auto_reload\"]= \"auto_reload\"]=self ]=self. =self.templates_auto_reload self.templates_auto_reload\t .templates_auto_reload\t\t templates_auto_reload\t\trv \t\trv= \trv=self rv=self. =self.jinja_environment self.jinja_environment( .jinja_environment(self jinja_environment(self, (self,** self,**options ,**options) **options)\t options)\trv )\trv. \trv.globals rv.globals. .globals.update globals.update( .update(url_for update(url_for= (url_for=url_for url_for=url_for, =url_for,get_flashed_messages url_for,get_flashed_messages= ,get_flashed_messages=get_flashed_messages get_flashed_messages=get_flashed_messages, =get_flashed_messages,config get_flashed_messages,config= ,config=self config=self. =self.config self.config, .config,request config,request= ,request=request request=request, =request,session request,session= ,session=session session=session, =session,g session,g= ,g=g g=g, =g,) g,)\t ,)\trv )\trv. \trv.filters rv.filters[ .filters[\"tojson\" filters[\"tojson\"] [\"tojson\"]= \"tojson\"]=json ]=json. =json.tojson_filter json.tojson_filter\t .tojson_filter\treturn tojson_filter\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefcreate_global_jinja_loader \tdefcreate_global_jinja_loader( defcreate_global_jinja_loader(self create_global_jinja_loader(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\treturn \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\treturnDispatchingJinjaLoader \treturnDispatchingJinjaLoader( returnDispatchingJinjaLoader(self DispatchingJinjaLoader(self) (self)\t self)\t\t )\t\tdef \t\tdefselect_jinja_autoescape \tdefselect_jinja_autoescape( defselect_jinja_autoescape(self select_jinja_autoescape(self, (self,filename self,filename) ,filename): filename):\t ):\t\t\t :\t\t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\" \t\t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\t \t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\tif \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\tiffilename \tiffilenameis iffilenameisNone filenameisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\treturn \t\treturnfilename \treturnfilename. returnfilename.endswith filename.endswith( .endswith(( endswith((\".html\" ((\".html\", (\".html\",\".htm\" \".html\",\".htm\", ,\".htm\",\".xml\" \".htm\",\".xml\", ,\".xml\",\".xhtml\" \".xml\",\".xhtml\") ,\".xhtml\")) \".xhtml\"))\t ))\t\t )\t\tdef \t\tdefupdate_template_context \tdefupdate_template_context( defupdate_template_context(self update_template_context(self, (self,context self,context) ,context): context):\t ):\t\t\t :\t\t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\" \t\t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\t \t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\tfuncs \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\tfuncs= \tfuncs=self funcs=self. =self.template_context_processors self.template_context_processors[ .template_context_processors[None template_context_processors[None] [None]\t None]\treqctx ]\treqctx= \treqctx=_request_ctx_stack reqctx=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top\t .top\tif top\tifreqctx \tifreqctxis ifreqctxisnot reqctxisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tbp \t\t\t\tbp= \t\t\tbp=reqctx bp=reqctx. =reqctx.request reqctx.request. .request.blueprint request.blueprint\t .blueprint\tif blueprint\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.template_context_processors self.template_context_processors: .template_context_processors:\t template_context_processors:\t\t\t\t\t :\t\t\t\t\tfuncs \t\t\t\t\tfuncs= \t\t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.template_context_processors self.template_context_processors[ .template_context_processors[bp template_context_processors[bp] [bp]) bp])\t ])\t\t )\t\t\t \t\t\torig_ctx \t\torig_ctx= \torig_ctx=context orig_ctx=context. =context.copy context.copy( .copy() copy()\t ()\tfor )\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tcontext \t\t\t\tcontext. \t\t\tcontext.update context.update( .update(func update(func( (func() func()) ())\t ))\t\t )\t\tcontext \t\tcontext. \tcontext.update context.update( .update(orig_ctx update(orig_ctx) (orig_ctx)\t orig_ctx)\t\t )\t\tdef \t\tdefmake_shell_context \tdefmake_shell_context( defmake_shell_context(self make_shell_context(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\trv \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\trv= \trv={ rv={\"app\" ={\"app\": {\"app\":self \"app\":self, :self,\"g\" self,\"g\": ,\"g\":g \"g\":g} :g}\t g}\tfor }\tforprocessor \tforprocessorin forprocessorinself processorinself. inself.shell_context_processors self.shell_context_processors: .shell_context_processors:\t shell_context_processors:\t\t\t\t :\t\t\t\trv \t\t\t\trv. \t\t\trv.update rv.update( .update(processor update(processor( (processor() processor()) ())\t ))\t\t )\t\treturn \t\treturnrv \treturnrv\t returnrv\t\t rv\t\tenv \t\tenv= \tenv=ConfigAttribute env=ConfigAttribute( =ConfigAttribute(\"ENV\" ConfigAttribute(\"ENV\") (\"ENV\")\t \"ENV\")\t@ )\t@property \t@property\t @property\tdef property\tdefdebug \tdefdebug( defdebug(self debug(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\" \t\t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\t \t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\treturn \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\treturnself \treturnself. returnself.config self.config[ .config[\"DEBUG\" config[\"DEBUG\"] [\"DEBUG\"]\t \"DEBUG\"]\t\t ]\t\t@ \t\t@debug \t@debug. @debug.setter debug.setter\t .setter\tdef setter\tdefdebug \tdefdebug( defdebug(self debug(self, (self,value self,value) ,value): value):\t ):\t\t\t :\t\t\tself \t\t\tself. \t\tself.config self.config[ .config[\"DEBUG\" config[\"DEBUG\"] [\"DEBUG\"]= \"DEBUG\"]=value ]=value\t =value\tself value\tself. \tself.jinja_env self.jinja_env. .jinja_env.auto_reload jinja_env.auto_reload= .auto_reload=self auto_reload=self. =self.templates_auto_reload self.templates_auto_reload\t .templates_auto_reload\t\t templates_auto_reload\t\tdef \t\tdefrun \tdefrun( defrun(self run(self, (self,host self,host= ,host=None host=None, =None,port None,port= ,port=None port=None, =None,debug None,debug= ,debug=None debug=None, =None,load_dotenv None,load_dotenv= ,load_dotenv=True load_dotenv=True, =True,** True,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\" \t\t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\t \t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\tif \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\tifos \tifos. ifos.environ os.environ. .environ.get environ.get( .get(\"FLASK_RUN_FROM_CLI\" get(\"FLASK_RUN_FROM_CLI\") (\"FLASK_RUN_FROM_CLI\")== \"FLASK_RUN_FROM_CLI\")==\"true\" )==\"true\": ==\"true\":\t \"true\":\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.debughelpers from.debughelpersimport .debughelpersimportexplain_ignored_app_run debughelpersimportexplain_ignored_app_run\t importexplain_ignored_app_run\texplain_ignored_app_run explain_ignored_app_run\texplain_ignored_app_run( \texplain_ignored_app_run() explain_ignored_app_run()\t ()\treturn )\treturn\t \treturn\t\t return\t\tif \t\tifget_load_dotenv \tifget_load_dotenv( ifget_load_dotenv(load_dotenv get_load_dotenv(load_dotenv) (load_dotenv): load_dotenv):\t ):\t\t\t\t :\t\t\t\tcli \t\t\t\tcli. \t\t\tcli.load_dotenv cli.load_dotenv( .load_dotenv() load_dotenv()\t ()\tif )\tif\"FLASK_ENV\" \tif\"FLASK_ENV\"in if\"FLASK_ENV\"inos \"FLASK_ENV\"inos. inos.environ os.environ: .environ:\t environ:\t\t\t\t\t :\t\t\t\t\tself \t\t\t\t\tself. \t\t\t\tself.env self.env= .env=get_env env=get_env( =get_env() get_env()\t ()\tself )\tself. \tself.debug self.debug= .debug=get_debug_flag debug=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\t\t )\t\telif \t\telif\"FLASK_DEBUG\" \telif\"FLASK_DEBUG\"in elif\"FLASK_DEBUG\"inos \"FLASK_DEBUG\"inos. inos.environ os.environ: .environ:\t environ:\t\t\t\t\t :\t\t\t\t\tself \t\t\t\t\tself. \t\t\t\tself.debug self.debug= .debug=get_debug_flag debug=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\t\t )\t\t\t \t\t\tif \t\tifdebug \tifdebugis ifdebugisnot debugisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.debug self.debug= .debug=bool debug=bool( =bool(debug bool(debug) (debug)\t debug)\t\t )\t\t_host \t\t_host= \t_host=\"127.0.0.1\" _host=\"127.0.0.1\"\t =\"127.0.0.1\"\t_port \"127.0.0.1\"\t_port= \t_port=5000 _port=5000\t =5000\tserver_name 5000\tserver_name= \tserver_name=self server_name=self. =self.config self.config. .config.get config.get( .get(\"SERVER_NAME\" get(\"SERVER_NAME\") (\"SERVER_NAME\")\t \"SERVER_NAME\")\tsn_host )\tsn_host, \tsn_host,sn_port sn_host,sn_port= ,sn_port=None sn_port=None, =None,None None,None\t ,None\tif None\tifserver_name \tifserver_name: ifserver_name:\t server_name:\t\t\t\t :\t\t\t\tsn_host \t\t\t\tsn_host, \t\t\tsn_host,_ sn_host,_, ,_,sn_port _,sn_port= ,sn_port=server_name sn_port=server_name. =server_name.partition server_name.partition( .partition(\":\" partition(\":\") (\":\")\t \":\")\t\t )\t\thost \t\thost= \thost=host host=hostor =hostorsn_host hostorsn_hostor orsn_hostor_host sn_hostor_host\t or_host\tport _host\tport= \tport=int port=int( =int(next int(next( (next(( next((p ((pfor (pforp pforpin forpin( pin(port in(port, (port,sn_port port,sn_port) ,sn_port)if sn_port)ifp )ifpis ifpisnot pisnotNone isnotNone) notNone), None),_port ),_port) ,_port)) _port))\t ))\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"use_reloader\" setdefault(\"use_reloader\", (\"use_reloader\",self \"use_reloader\",self. ,self.debug self.debug) .debug)\t debug)\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"use_debugger\" setdefault(\"use_debugger\", (\"use_debugger\",self \"use_debugger\",self. ,self.debug self.debug) .debug)\t debug)\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"threaded\" setdefault(\"threaded\", (\"threaded\",True \"threaded\",True) ,True)\t True)\tcli )\tcli. \tcli.show_server_banner cli.show_server_banner( .show_server_banner(self show_server_banner(self. (self.env self.env, .env,self env,self. ,self.debug self.debug, .debug,self debug,self. ,self.name self.name, .name,False name,False) ,False)\t False)\tfrom )\tfromwerkzeug \tfromwerkzeug. fromwerkzeug.serving werkzeug.servingimport .servingimportrun_simple servingimportrun_simple\t importrun_simple\ttry run_simple\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\trun_simple \t\t\t\trun_simple( \t\t\trun_simple(host run_simple(host, (host,port host,port, ,port,self port,self, ,self,** self,**options ,**options) **options)\t options)\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself._got_first_request self._got_first_request= ._got_first_request=False _got_first_request=False\t =False\t\t False\t\t\t \t\t\tdef \t\tdeftest_client \tdeftest_client( deftest_client(self test_client(self, (self,use_cookies self,use_cookies= ,use_cookies=True use_cookies=True, =True,** True,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\" \t\t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\t \t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\tcls \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\tcls= \tcls=self cls=self. =self.test_client_class self.test_client_class\t .test_client_class\tif test_client_class\tifcls \tifclsis ifclsisNone clsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.testing from.testingimport .testingimportFlaskClient testingimportFlaskClientas importFlaskClientascls FlaskClientascls\t ascls\t\t cls\t\treturn \t\treturncls \treturncls( returncls(self cls(self, (self,self self,self. ,self.response_class self.response_class, .response_class,use_cookies response_class,use_cookies= ,use_cookies=use_cookies use_cookies=use_cookies, =use_cookies,** use_cookies,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\tdef \t\tdeftest_cli_runner \tdeftest_cli_runner( deftest_cli_runner(self test_cli_runner(self, (self,** self,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\" \t\t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\t \t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\tcls \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\tcls= \tcls=self cls=self. =self.test_cli_runner_class self.test_cli_runner_class\t .test_cli_runner_class\tif test_cli_runner_class\tifcls \tifclsis ifclsisNone clsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.testing from.testingimport .testingimportFlaskCliRunner testingimportFlaskCliRunneras importFlaskCliRunnerascls FlaskCliRunnerascls\t ascls\t\t cls\t\treturn \t\treturncls \treturncls( returncls(self cls(self, (self,** self,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\tdef \t\tdefopen_session \tdefopen_session( defopen_session(self open_session(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\" \t\t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\t \t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\twarnings \"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"open_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.' ('\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.') '\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.')) ' \"session_interface.open_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.open_session session_interface.open_session( .open_session(self open_session(self, (self,request self,request) ,request)\t request)\t\t )\t\tdef \t\tdefsave_session \tdefsave_session( defsave_session(self save_session(self, (self,session self,session, ,session,response session,response) ,response): response):\t ):\t\t\t :\t\t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\" \t\t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\t \t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\twarnings \"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"save_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.' ('\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.') '\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.')) ' \"session_interface.save_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.save_session session_interface.save_session( .save_session(self save_session(self, (self,session self,session, ,session,response session,response) ,response)\t response)\t\t )\t\tdef \t\tdefmake_null_session \tdefmake_null_session( defmake_null_session(self make_null_session(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\twarnings \"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"make_null_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.' ('\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.') '\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.')) ' \"session_interface.make_null_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.make_null_session session_interface.make_null_session( .make_null_session(self make_null_session(self) (self)\t self)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefregister_blueprint \tdefregister_blueprint( defregister_blueprint(self register_blueprint(self, (self,blueprint self,blueprint, ,blueprint,** blueprint,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfirst_registration \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfirst_registration= \tfirst_registration=False first_registration=False\t =False\tif False\tifblueprint \tifblueprint. ifblueprint.name blueprint.namein .nameinself nameinself. inself.blueprints self.blueprints: .blueprints:\t blueprints:\t\t\t\t :\t\t\t\tassert \t\t\t\tassertself \t\t\tassertself. assertself.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name]is name]isblueprint ]isblueprint, isblueprint,( blueprint,(\"A name collision occurred between blueprints %r and %r. Both\" ,(\"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the' (\"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\" \"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\"% ' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\"%( \" fly need unique names.\"%(blueprint %(blueprint, (blueprint,self blueprint,self. ,self.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name], name],blueprint ],blueprint. ,blueprint.name blueprint.name) .name)) name))\t ))\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name]= name]=blueprint ]=blueprint\t =blueprint\tself blueprint\tself. \tself._blueprint_order self._blueprint_order. ._blueprint_order.append _blueprint_order.append( .append(blueprint append(blueprint) (blueprint)\t blueprint)\tfirst_registration )\tfirst_registration= \tfirst_registration=True first_registration=True\t =True\t\t True\t\tblueprint \t\tblueprint. \tblueprint.register blueprint.register( .register(self register(self, (self,options self,options, ,options,first_registration options,first_registration) ,first_registration)\t first_registration)\t\t )\t\tdef \t\tdefiter_blueprints \tdefiter_blueprints( defiter_blueprints(self iter_blueprints(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\treturn \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\treturniter \treturniter( returniter(self iter(self. (self._blueprint_order self._blueprint_order) ._blueprint_order)\t _blueprint_order)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_url_rule \tdefadd_url_rule( defadd_url_rule(self add_url_rule(self, (self,rule self,rule, ,rule,endpoint rule,endpoint= ,endpoint=None endpoint=None, =None,view_func None,view_func= ,view_func=None view_func=None, =None,provide_automatic_options None,provide_automatic_options= ,provide_automatic_options=None provide_automatic_options=None, =None,** None,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t\t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\t \t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tif \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tifendpoint \tifendpointis ifendpointisNone endpointisNone: isNone:\t None:\t\t\t\t :\t\t\t\tendpoint \t\t\t\tendpoint= \t\t\tendpoint=_endpoint_from_view_func endpoint=_endpoint_from_view_func( =_endpoint_from_view_func(view_func _endpoint_from_view_func(view_func) (view_func)\t view_func)\t\t )\t\toptions \t\toptions[ \toptions[\"endpoint\" options[\"endpoint\"] [\"endpoint\"]= \"endpoint\"]=endpoint ]=endpoint\t =endpoint\tmethods endpoint\tmethods= \tmethods=options methods=options. =options.pop options.pop( .pop(\"methods\" pop(\"methods\", (\"methods\",None \"methods\",None) ,None)\t None)\tif )\tifmethods \tifmethodsis ifmethodsisNone methodsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tmethods \t\t\t\tmethods= \t\t\tmethods=getattr methods=getattr( =getattr(view_func getattr(view_func, (view_func,\"methods\" view_func,\"methods\", ,\"methods\",None \"methods\",None) ,None)or None)or( )or(\"GET\" or(\"GET\", (\"GET\",) \"GET\",)\t ,)\t\t )\t\tif \t\tifisinstance \tifisinstance( ifisinstance(methods isinstance(methods, (methods,string_types methods,string_types) ,string_types): string_types):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseTypeError \t\t\traiseTypeError( raiseTypeError(\"Allowed methods have to be iterables of strings, \" TypeError(\"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])' (\"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])') \"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])')\t 'for example: @app.route(..., methods=[\"POST\"])')\t\t )\t\tmethods \t\tmethods= \tmethods=set methods=set( =set(item set(item. (item.upper item.upper( .upper() upper()for ()foritem )foritemin foriteminmethods iteminmethods) inmethods)\t methods)\trequired_methods )\trequired_methods= \trequired_methods=set required_methods=set( =set(getattr set(getattr( (getattr(view_func getattr(view_func, (view_func,\"required_methods\" view_func,\"required_methods\", ,\"required_methods\",( \"required_methods\",() ,()) ())) )))\t ))\tif )\tifprovide_automatic_options \tifprovide_automatic_optionsis ifprovide_automatic_optionsisNone provide_automatic_optionsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tprovide_automatic_options \t\t\t\tprovide_automatic_options= \t\t\tprovide_automatic_options=getattr provide_automatic_options=getattr( =getattr(view_func getattr(view_func, (view_func,\"provide_automatic_options\" view_func,\"provide_automatic_options\", ,\"provide_automatic_options\",None \"provide_automatic_options\",None) ,None)\t None)\t\t )\t\tif \t\tifprovide_automatic_options \tifprovide_automatic_optionsis ifprovide_automatic_optionsisNone provide_automatic_optionsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tif \t\t\t\tif\"OPTIONS\" \t\t\tif\"OPTIONS\"not if\"OPTIONS\"notin \"OPTIONS\"notinmethods notinmethods: inmethods:\t methods:\t\t\t\t\t :\t\t\t\t\tprovide_automatic_options \t\t\t\t\tprovide_automatic_options= \t\t\t\tprovide_automatic_options=True provide_automatic_options=True\t =True\trequired_methods True\trequired_methods. \trequired_methods.add required_methods.add( .add(\"OPTIONS\" add(\"OPTIONS\") (\"OPTIONS\")\t \"OPTIONS\")\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\tprovide_automatic_options \t\t\t\t\tprovide_automatic_options= \t\t\t\tprovide_automatic_options=False provide_automatic_options=False\t =False\t\t False\t\t\t \t\t\tmethods \t\tmethods|= \tmethods|=required_methods methods|=required_methods\t |=required_methods\trule required_methods\trule= \trule=self rule=self. =self.url_rule_class self.url_rule_class( .url_rule_class(rule url_rule_class(rule, (rule,methods rule,methods= ,methods=methods methods=methods, =methods,** methods,**options ,**options) **options)\t options)\trule )\trule. \trule.provide_automatic_options rule.provide_automatic_options= .provide_automatic_options=provide_automatic_options provide_automatic_options=provide_automatic_options\t =provide_automatic_options\tself provide_automatic_options\tself. \tself.url_map self.url_map. .url_map.add url_map.add( .add(rule add(rule) (rule)\t rule)\tif )\tifview_func \tifview_funcis ifview_funcisnot view_funcisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\told_func \t\t\t\told_func= \t\t\told_func=self old_func=self. =self.view_functions self.view_functions. .view_functions.get view_functions.get( .get(endpoint get(endpoint) (endpoint)\t endpoint)\tif )\tifold_func \tifold_funcis ifold_funcisnot old_funcisnotNone isnotNoneand notNoneandold_func Noneandold_func!= andold_func!=view_func old_func!=view_func: !=view_func:\t view_func:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseAssertionError \t\t\t\traiseAssertionError( raiseAssertionError(\"View function mapping is overwriting an \" AssertionError(\"View function mapping is overwriting an \"\"existing endpoint function: %s\" (\"View function mapping is overwriting an \"\"existing endpoint function: %s\"% \"View function mapping is overwriting an \"\"existing endpoint function: %s\"%endpoint \"existing endpoint function: %s\"%endpoint) %endpoint)\t endpoint)\t\t )\t\tself \t\tself. \tself.view_functions self.view_functions[ .view_functions[endpoint view_functions[endpoint] [endpoint]= endpoint]=view_func ]=view_func\t =view_func\t\t view_func\t\t\t \t\t\tdef \t\tdefroute \tdefroute( defroute(self route(self, (self,rule self,rule, ,rule,** rule,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tdef \"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tendpoint \t\t\t\tendpoint= \t\t\tendpoint=options endpoint=options. =options.pop options.pop( .pop(\"endpoint\" pop(\"endpoint\", (\"endpoint\",None \"endpoint\",None) ,None)\t None)\tself )\tself. \tself.add_url_rule self.add_url_rule( .add_url_rule(rule add_url_rule(rule, (rule,endpoint rule,endpoint, ,endpoint,f endpoint,f, ,f,** f,**options ,**options) **options)\t options)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefendpoint \tdefendpoint( defendpoint(self endpoint(self, (self,endpoint self,endpoint) ,endpoint): endpoint):\t ):\t\t\t :\t\t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\" \t\t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\t \t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\tdef \"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.view_functions self.view_functions[ .view_functions[endpoint view_functions[endpoint] [endpoint]= endpoint]=f ]=f\t =f\treturn f\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@staticmethod \t@staticmethod\t @staticmethod\tdef staticmethod\tdef_get_exc_class_and_code \tdef_get_exc_class_and_code( def_get_exc_class_and_code(exc_class_or_code _get_exc_class_and_code(exc_class_or_code) (exc_class_or_code): exc_class_or_code):\t ):\t\t\t :\t\t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\" \t\t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\t \t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\tif \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\tifisinstance \tifisinstance( ifisinstance(exc_class_or_code isinstance(exc_class_or_code, (exc_class_or_code,integer_types exc_class_or_code,integer_types) ,integer_types): integer_types):\t ):\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class= \t\t\texc_class=default_exceptions exc_class=default_exceptions[ =default_exceptions[exc_class_or_code default_exceptions[exc_class_or_code] [exc_class_or_code]\t exc_class_or_code]\t\t ]\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class= \t\t\texc_class=exc_class_or_code exc_class=exc_class_or_code\t =exc_class_or_code\t\t exc_class_or_code\t\tassert \t\tassertissubclass \tassertissubclass( assertissubclass(exc_class issubclass(exc_class, (exc_class,Exception exc_class,Exception) ,Exception)\t Exception)\tif )\tifissubclass \tifissubclass( ifissubclass(exc_class issubclass(exc_class, (exc_class,HTTPException exc_class,HTTPException) ,HTTPException): HTTPException):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnexc_class \t\t\treturnexc_class, returnexc_class,exc_class exc_class,exc_class. ,exc_class.code exc_class.code\t .code\t\t code\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnexc_class \t\t\treturnexc_class, returnexc_class,None exc_class,None\t ,None\t\t None\t\t\t \t\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeferrorhandler \tdeferrorhandler( deferrorhandler(self errorhandler(self, (self,code_or_exception self,code_or_exception) ,code_or_exception): code_or_exception):\t ):\t\t\t :\t\t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\" \t\t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\t \t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\tdef \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself._register_error_handler self._register_error_handler( ._register_error_handler(None _register_error_handler(None, (None,code_or_exception None,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefregister_error_handler \tdefregister_error_handler( defregister_error_handler(self register_error_handler(self, (self,code_or_exception self,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself. \tself._register_error_handler self._register_error_handler( ._register_error_handler(None _register_error_handler(None, (None,code_or_exception None,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f)\t f)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdef_register_error_handler \tdef_register_error_handler( def_register_error_handler(self _register_error_handler(self, (self,key self,key, ,key,code_or_exception key,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\" \t\t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\t \t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\tif \"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\tifisinstance \tifisinstance( ifisinstance(code_or_exception isinstance(code_or_exception, (code_or_exception,HTTPException code_or_exception,HTTPException) ,HTTPException): HTTPException):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseValueError \t\t\traiseValueError( raiseValueError(\"Tried to register a handler for an exception instance {0!r}.\" ValueError(\"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\" (\"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\"\" HTTP error codes.\" \"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\"\" HTTP error codes.\". \" Handlers can only be registered for exception classes or\"\" HTTP error codes.\".format \" HTTP error codes.\".format( .format(code_or_exception format(code_or_exception) (code_or_exception)) code_or_exception))\t ))\t\t )\t\ttry \t\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class, \t\t\texc_class,code exc_class,code= ,code=self code=self. =self._get_exc_class_and_code self._get_exc_class_and_code( ._get_exc_class_and_code(code_or_exception _get_exc_class_and_code(code_or_exception) (code_or_exception)\t code_or_exception)\t\t )\t\texcept \t\texceptKeyError \texceptKeyError: exceptKeyError:\t KeyError:\t\t\t\t :\t\t\t\traise \t\t\t\traiseKeyError \t\t\traiseKeyError( raiseKeyError(\"'{0}' is not a recognized HTTP error code. Use a subclass of\" KeyError(\"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\" (\"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\". \"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\".format \" HTTPException with that code instead.\".format( .format(code_or_exception format(code_or_exception) (code_or_exception)) code_or_exception))\t ))\t\t )\t\thandlers \t\thandlers= \thandlers=self handlers=self. =self.error_handler_spec self.error_handler_spec. .error_handler_spec.setdefault error_handler_spec.setdefault( .setdefault(key setdefault(key, (key,{ key,{} ,{}) {}). }).setdefault ).setdefault( .setdefault(code setdefault(code, (code,{ code,{} ,{}) {})\t })\thandlers )\thandlers[ \thandlers[exc_class handlers[exc_class] [exc_class]= exc_class]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_filter \tdeftemplate_filter( deftemplate_filter(self template_filter(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_filter self.add_template_filter( .add_template_filter(f add_template_filter(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_filter \tdefadd_template_filter( defadd_template_filter(self add_template_filter(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.filters jinja_env.filters[ .filters[name filters[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_test \tdeftemplate_test( deftemplate_test(self template_test(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_test self.add_template_test( .add_template_test(f add_template_test(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_test \tdefadd_template_test( defadd_template_test(self add_template_test(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.tests jinja_env.tests[ .tests[name tests[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_global \tdeftemplate_global( deftemplate_global(self template_global(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_global self.add_template_global( .add_template_global(f add_template_global(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_global \tdefadd_template_global( defadd_template_global(self add_template_global(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.globals jinja_env.globals[ .globals[name globals[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefbefore_request \tdefbefore_request( defbefore_request(self before_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\" \t\t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\t \t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\tself \"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\tself. \tself.before_request_funcs self.before_request_funcs. .before_request_funcs.setdefault before_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefbefore_first_request \tdefbefore_first_request( defbefore_first_request(self before_first_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself. \tself.before_first_request_funcs self.before_first_request_funcs. .before_first_request_funcs.append before_first_request_funcs.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefafter_request \tdefafter_request( defafter_request(self after_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\" \t\t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\t \t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\tself \"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\tself. \tself.after_request_funcs self.after_request_funcs. .after_request_funcs.setdefault after_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefteardown_request \tdefteardown_request( defteardown_request(self teardown_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\" \t\t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\t \t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\tself \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\tself. \tself.teardown_request_funcs self.teardown_request_funcs. .teardown_request_funcs.setdefault teardown_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefteardown_appcontext \tdefteardown_appcontext( defteardown_appcontext(self teardown_appcontext(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\tself \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\tself. \tself.teardown_appcontext_funcs self.teardown_appcontext_funcs. .teardown_appcontext_funcs.append teardown_appcontext_funcs.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefcontext_processor \tdefcontext_processor( defcontext_processor(self context_processor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a template context processor function.\"\"\" \t\t\t\"\"\"Registers a template context processor function.\"\"\"\t \t\t\"\"\"Registers a template context processor function.\"\"\"\tself \"\"\"Registers a template context processor function.\"\"\"\tself. \tself.template_context_processors self.template_context_processors[ .template_context_processors[None template_context_processors[None] [None]. None].append ].append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefshell_context_processor \tdefshell_context_processor( defshell_context_processor(self shell_context_processor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\tself \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\tself. \tself.shell_context_processors self.shell_context_processors. .shell_context_processors.append shell_context_processors.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefurl_value_preprocessor \tdefurl_value_preprocessor( defurl_value_preprocessor(self url_value_preprocessor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\" \t\t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\t \t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\tself \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\tself. \tself.url_value_preprocessors self.url_value_preprocessors. .url_value_preprocessors.setdefault url_value_preprocessors.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefurl_defaults \tdefurl_defaults( defurl_defaults(self url_defaults(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\" \t\t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\t \t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\tself \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\tself. \tself.url_default_functions self.url_default_functions. .url_default_functions.setdefault url_default_functions.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\tdef \t\tdef_find_error_handler \tdef_find_error_handler( def_find_error_handler(self _find_error_handler(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\" \t\t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\t \t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\texc_class \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\texc_class, \texc_class,code exc_class,code= ,code=self code=self. =self._get_exc_class_and_code self._get_exc_class_and_code( ._get_exc_class_and_code(type _get_exc_class_and_code(type( (type(e type(e) (e)) e))\t ))\tfor )\tforname \tforname, forname,c name,cin ,cin( cin(( in((request ((request. (request.blueprint request.blueprint, .blueprint,code blueprint,code) ,code), code),( ),(None ,(None, (None,code None,code) ,code), code),( ),(request ,(request. (request.blueprint request.blueprint, .blueprint,None blueprint,None) ,None), None),( ),(None ,(None, (None,None None,None) ,None), None),) ),): ,):\t ):\t\t\t\t :\t\t\t\thandler_map \t\t\t\thandler_map= \t\t\thandler_map=self handler_map=self. =self.error_handler_spec self.error_handler_spec. .error_handler_spec.setdefault error_handler_spec.setdefault( .setdefault(name setdefault(name, (name,{ name,{} ,{}) {}). }).get ).get( .get(c get(c) (c)\t c)\tif )\tifnot \tifnothandler_map ifnothandler_map: nothandler_map:\t handler_map:\t\t\t\t\t :\t\t\t\t\tcontinue \t\t\t\t\tcontinue\t \t\t\t\tcontinue\t\t continue\t\tfor \t\tforcls \tforclsin forclsinexc_class clsinexc_class. inexc_class.__mro__ exc_class.__mro__: .__mro__:\t __mro__:\t\t\t\t\t :\t\t\t\t\thandler \t\t\t\t\thandler= \t\t\t\thandler=handler_map handler=handler_map. =handler_map.get handler_map.get( .get(cls get(cls) (cls)\t cls)\tif )\tifhandler \tifhandleris ifhandlerisnot handlerisnotNone isnotNone: notNone:\t None:\t\t\t\t\t\t :\t\t\t\t\t\treturn \t\t\t\t\t\treturnhandler \t\t\t\t\treturnhandler\t returnhandler\t\t handler\t\t\t \t\t\t\t \t\t\t\t \t\t\tdef \t\tdefhandle_http_exception \tdefhandle_http_exception( defhandle_http_exception(self handle_http_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\tif \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\tife \tife. ife.code e.codeis .codeisNone codeisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\tif \t\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,RoutingException e,RoutingException) ,RoutingException): RoutingException):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\thandler \t\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(e _find_error_handler(e) (e)\t e)\tif )\tifhandler \tifhandleris ifhandlerisNone handlerisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\treturn \t\treturnhandler \treturnhandler( returnhandler(e handler(e) (e)\t e)\t\t )\t\tdef \t\tdeftrap_http_exception \tdeftrap_http_exception( deftrap_http_exception(self trap_http_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\tif \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\tifself \tifself. ifself.config self.config[ .config[\"TRAP_HTTP_EXCEPTIONS\" config[\"TRAP_HTTP_EXCEPTIONS\"] [\"TRAP_HTTP_EXCEPTIONS\"]: \"TRAP_HTTP_EXCEPTIONS\"]:\t ]:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\ttrap_bad_request \t\ttrap_bad_request= \ttrap_bad_request=self trap_bad_request=self. =self.config self.config[ .config[\"TRAP_BAD_REQUEST_ERRORS\" config[\"TRAP_BAD_REQUEST_ERRORS\"] [\"TRAP_BAD_REQUEST_ERRORS\"]\t \"TRAP_BAD_REQUEST_ERRORS\"]\tif ]\tif( \tif(trap_bad_request if(trap_bad_requestis (trap_bad_requestisNone trap_bad_requestisNoneand isNoneandself Noneandself. andself.debug self.debugand .debugandisinstance debugandisinstance( andisinstance(e isinstance(e, (e,BadRequestKeyError e,BadRequestKeyError) ,BadRequestKeyError)) BadRequestKeyError)): )):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\tif \t\tiftrap_bad_request \tiftrap_bad_request: iftrap_bad_request:\t trap_bad_request:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnisinstance \t\t\treturnisinstance( returnisinstance(e isinstance(e, (e,BadRequest e,BadRequest) ,BadRequest)\t BadRequest)\t\t )\t\treturn \t\treturnFalse \treturnFalse\t returnFalse\t\t False\t\tdef \t\tdefhandle_user_exception \tdefhandle_user_exception( defhandle_user_exception(self handle_user_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\texc_type \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tassert )\tassertexc_value \tassertexc_valueis assertexc_valueise exc_valueise\t ise\tif e\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,BadRequestKeyError e,BadRequestKeyError) ,BadRequestKeyError): BadRequestKeyError):\t ):\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself.debug self.debugor .debugorself debugorself. orself.config self.config[ .config[\"TRAP_BAD_REQUEST_ERRORS\" config[\"TRAP_BAD_REQUEST_ERRORS\"] [\"TRAP_BAD_REQUEST_ERRORS\"]: \"TRAP_BAD_REQUEST_ERRORS\"]:\t ]:\t\t\t\t\t :\t\t\t\t\te \t\t\t\t\te. \t\t\t\te.show_exception e.show_exception= .show_exception=True show_exception=True\t =True\tif True\tife \tife. ife.args e.args[ .args[0 args[0] [0]not 0]notin ]notine notine. ine.get_description e.get_description( .get_description() get_description(): ():\t ):\t\t\t\t\t\t :\t\t\t\t\t\te \t\t\t\t\t\te. \t\t\t\t\te.description e.description= .description=\"KeyError: '{}'\" description=\"KeyError: '{}'\". =\"KeyError: '{}'\".format \"KeyError: '{}'\".format( .format(* format(*e (*e. *e.args e.args) .args)\t args)\t\t )\t\t\t \t\t\telif \t\telifnot \telifnothasattr elifnothasattr( nothasattr(BadRequestKeyError hasattr(BadRequestKeyError, (BadRequestKeyError,\"show_exception\" BadRequestKeyError,\"show_exception\") ,\"show_exception\"): \"show_exception\"):\t ):\t\t\t\t\t :\t\t\t\t\te \t\t\t\t\te. \t\t\t\te.args e.args= .args=( args=() =()\t ()\t\t )\t\t\t \t\t\tif \t\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,HTTPException e,HTTPException) ,HTTPException)and HTTPException)andnot )andnotself andnotself. notself.trap_http_exception self.trap_http_exception( .trap_http_exception(e trap_http_exception(e) (e): e):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.handle_http_exception self.handle_http_exception( .handle_http_exception(e handle_http_exception(e) (e)\t e)\t\t )\t\thandler \t\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(e _find_error_handler(e) (e)\t e)\tif )\tifhandler \tifhandleris ifhandlerisNone handlerisNone: isNone:\t None:\t\t\t\t :\t\t\t\treraise \t\t\t\treraise( \t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\treturn \t\treturnhandler \treturnhandler( returnhandler(e handler(e) (e)\t e)\t\t )\t\tdef \t\tdefhandle_exception \tdefhandle_exception( defhandle_exception(self handle_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\texc_type \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tgot_request_exception )\tgot_request_exception. \tgot_request_exception.send got_request_exception.send( .send(self send(self, (self,exception self,exception= ,exception=e exception=e) =e)\t e)\tif )\tifself \tifself. ifself.propagate_exceptions self.propagate_exceptions: .propagate_exceptions:\t propagate_exceptions:\t\t\t\t :\t\t\t\tif \t\t\t\tifexc_value \t\t\tifexc_valueis ifexc_valueise exc_valueise: ise:\t e:\t\t\t\t\t :\t\t\t\t\treraise \t\t\t\t\treraise( \t\t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traisee \t\t\t\traisee\t raisee\t\t e\t\t\t \t\t\tself \t\tself. \tself.log_exception self.log_exception( .log_exception(( log_exception((exc_type ((exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)) tb))\t ))\tserver_error )\tserver_error= \tserver_error=InternalServerError server_error=InternalServerError( =InternalServerError() InternalServerError()\t ()\tserver_error )\tserver_error. \tserver_error.original_exception server_error.original_exception= .original_exception=e original_exception=e\t =e\thandler e\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(server_error _find_error_handler(server_error) (server_error)\t server_error)\tif )\tifhandler \tifhandleris ifhandlerisnot handlerisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tserver_error \t\t\t\tserver_error= \t\t\tserver_error=handler server_error=handler( =handler(server_error handler(server_error) (server_error)\t server_error)\t\t )\t\treturn \t\treturnself \treturnself. returnself.finalize_request self.finalize_request( .finalize_request(server_error finalize_request(server_error, (server_error,from_error_handler server_error,from_error_handler= ,from_error_handler=True from_error_handler=True) =True)\t True)\t\t )\t\tdef \t\tdeflog_exception \tdeflog_exception( deflog_exception(self log_exception(self, (self,exc_info self,exc_info) ,exc_info): exc_info):\t ):\t\t\t :\t\t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself. \tself.logger self.logger. .logger.error logger.error( .error(\"Exception on %s [%s]\" error(\"Exception on %s [%s]\"% (\"Exception on %s [%s]\"%( \"Exception on %s [%s]\"%(request %(request. (request.path request.path, .path,request path,request. ,request.method request.method) .method), method),exc_info ),exc_info= ,exc_info=exc_info exc_info=exc_info) =exc_info)\t exc_info)\t\t )\t\tdef \t\tdefraise_routing_exception \tdefraise_routing_exception( defraise_routing_exception(self raise_routing_exception(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\tif \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\tif( \tif(not if(notself (notself. notself.debug self.debugor .debugornot debugornotisinstance ornotisinstance( notisinstance(request isinstance(request. (request.routing_exception request.routing_exception, .routing_exception,RequestRedirect routing_exception,RequestRedirect) ,RequestRedirect)or RequestRedirect)orrequest )orrequest. orrequest.method request.methodin .methodin( methodin(\"GET\" in(\"GET\", (\"GET\",\"HEAD\" \"GET\",\"HEAD\", ,\"HEAD\",\"OPTIONS\" \"HEAD\",\"OPTIONS\") ,\"OPTIONS\")) \"OPTIONS\")): )):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiserequest \t\t\traiserequest. raiserequest.routing_exception request.routing_exception\t .routing_exception\t\t routing_exception\t\tfrom \t\tfrom. \tfrom.debughelpers from.debughelpersimport .debughelpersimportFormDataRoutingRedirect debughelpersimportFormDataRoutingRedirect\t importFormDataRoutingRedirect\traise FormDataRoutingRedirect\traiseFormDataRoutingRedirect \traiseFormDataRoutingRedirect( raiseFormDataRoutingRedirect(request FormDataRoutingRedirect(request) (request)\t request)\t\t )\t\tdef \t\tdefdispatch_request \tdefdispatch_request( defdispatch_request(self dispatch_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\" \t\t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\t \t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\treq \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\treq= \treq=_request_ctx_stack req=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request\t .request\tif request\tifreq \tifreq. ifreq.routing_exception req.routing_exceptionis .routing_exceptionisnot routing_exceptionisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.raise_routing_exception self.raise_routing_exception( .raise_routing_exception(req raise_routing_exception(req) (req)\t req)\t\t )\t\trule \t\trule= \trule=req rule=req. =req.url_rule req.url_rule\t .url_rule\tif url_rule\tif( \tif(getattr if(getattr( (getattr(rule getattr(rule, (rule,\"provide_automatic_options\" rule,\"provide_automatic_options\", ,\"provide_automatic_options\",False \"provide_automatic_options\",False) ,False)and False)andreq )andreq. andreq.method req.method== .method==\"OPTIONS\" method==\"OPTIONS\") ==\"OPTIONS\"): \"OPTIONS\"):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.make_default_options_response self.make_default_options_response( .make_default_options_response() make_default_options_response()\t ()\t\t )\t\treturn \t\treturnself \treturnself. returnself.view_functions self.view_functions[ .view_functions[rule view_functions[rule. [rule.endpoint rule.endpoint] .endpoint]( endpoint](** ](**req (**req. **req.view_args req.view_args) .view_args)\t view_args)\t\t )\t\tdef \t\tdeffull_dispatch_request \tdeffull_dispatch_request( deffull_dispatch_request(self full_dispatch_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself. \tself.try_trigger_before_first_request_functions self.try_trigger_before_first_request_functions( .try_trigger_before_first_request_functions() try_trigger_before_first_request_functions()\t ()\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\trequest_started \t\t\t\trequest_started. \t\t\trequest_started.send request_started.send( .send(self send(self) (self)\t self)\trv )\trv= \trv=self rv=self. =self.preprocess_request self.preprocess_request( .preprocess_request() preprocess_request()\t ()\tif )\tifrv \tifrvis ifrvisNone rvisNone: isNone:\t None:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=self rv=self. =self.dispatch_request self.dispatch_request( .dispatch_request() dispatch_request()\t ()\t\t )\t\t\t \t\t\texcept \t\texceptException \texceptExceptionas exceptExceptionase Exceptionase: ase:\t e:\t\t\t\t :\t\t\t\trv \t\t\t\trv= \t\t\trv=self rv=self. =self.handle_user_exception self.handle_user_exception( .handle_user_exception(e handle_user_exception(e) (e)\t e)\t\t )\t\treturn \t\treturnself \treturnself. returnself.finalize_request self.finalize_request( .finalize_request(rv finalize_request(rv) (rv)\t rv)\t\t )\t\tdef \t\tdeffinalize_request \tdeffinalize_request( deffinalize_request(self finalize_request(self, (self,rv self,rv, ,rv,from_error_handler rv,from_error_handler= ,from_error_handler=False from_error_handler=False) =False): False):\t ):\t\t\t :\t\t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\tresponse \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\tresponse= \tresponse=self response=self. =self.make_response self.make_response( .make_response(rv make_response(rv) (rv)\t rv)\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\tresponse \t\t\t\tresponse= \t\t\tresponse=self response=self. =self.process_response self.process_response( .process_response(response process_response(response) (response)\t response)\trequest_finished )\trequest_finished. \trequest_finished.send request_finished.send( .send(self send(self, (self,response self,response= ,response=response response=response) =response)\t response)\t\t )\t\texcept \t\texceptException \texceptException: exceptException:\t Exception:\t\t\t\t :\t\t\t\tif \t\t\t\tifnot \t\t\tifnotfrom_error_handler ifnotfrom_error_handler: notfrom_error_handler:\t from_error_handler:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traise\t \t\t\t\traise\t\t raise\t\tself \t\tself. \tself.logger self.logger. .logger.exception logger.exception( .exception(\"Request finalizing failed with an error while handling an error\" exception(\"Request finalizing failed with an error while handling an error\") (\"Request finalizing failed with an error while handling an error\")\t \"Request finalizing failed with an error while handling an error\")\t\t )\t\treturn \t\treturnresponse \treturnresponse\t returnresponse\t\t response\t\tdef \t\tdeftry_trigger_before_first_request_functions \tdeftry_trigger_before_first_request_functions( deftry_trigger_before_first_request_functions(self try_trigger_before_first_request_functions(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\tif \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\tifself \tifself. ifself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t :\t\t\t\treturn \t\t\t\treturn\t \t\t\treturn\t\t return\t\twith \t\twithself \twithself. withself._before_request_lock self._before_request_lock: ._before_request_lock:\t _before_request_lock:\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturn\t \t\t\t\treturn\t\t return\t\tfor \t\tforfunc \tforfuncin forfuncinself funcinself. inself.before_first_request_funcs self.before_first_request_funcs: .before_first_request_funcs:\t before_first_request_funcs:\t\t\t\t\t :\t\t\t\t\tfunc \t\t\t\t\tfunc( \t\t\t\tfunc() func()\t ()\t\t )\t\tself \t\tself. \tself._got_first_request self._got_first_request= ._got_first_request=True _got_first_request=True\t =True\t\t True\t\t\t \t\t\tdef \t\tdefmake_default_options_response \tdefmake_default_options_response( defmake_default_options_response(self make_default_options_response(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\tadapter \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\tadapter= \tadapter=_request_ctx_stack adapter=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.url_adapter top.url_adapter\t .url_adapter\tmethods url_adapter\tmethods= \tmethods=adapter methods=adapter. =adapter.allowed_methods adapter.allowed_methods( .allowed_methods() allowed_methods()\t ()\trv )\trv= \trv=self rv=self. =self.response_class self.response_class( .response_class() response_class()\t ()\trv )\trv. \trv.allow rv.allow. .allow.update allow.update( .update(methods update(methods) (methods)\t methods)\treturn )\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefshould_ignore_error \tdefshould_ignore_error( defshould_ignore_error(self should_ignore_error(self, (self,error self,error) ,error): error):\t ):\t\t\t :\t\t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\" \t\t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\t \t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\treturn \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\treturnFalse \treturnFalse\t returnFalse\t\t False\t\tdef \t\tdefmake_response \tdefmake_response( defmake_response(self make_response(self, (self,rv self,rv) ,rv): rv):\t ):\t\t\t :\t\t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\" \t\t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\t \t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\tstatus \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\tstatus= \tstatus=headers status=headers= =headers=None headers=None\t =None\tif None\tifisinstance \tifisinstance( ifisinstance(rv isinstance(rv, (rv,tuple rv,tuple) ,tuple): tuple):\t ):\t\t\t\t :\t\t\t\tlen_rv \t\t\t\tlen_rv= \t\t\tlen_rv=len len_rv=len( =len(rv len(rv) (rv)\t rv)\tif )\tiflen_rv \tiflen_rv== iflen_rv==3 len_rv==3: ==3:\t 3:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv, \t\t\t\trv,status rv,status, ,status,headers status,headers= ,headers=rv headers=rv\t =rv\t\t rv\t\telif \t\teliflen_rv \teliflen_rv== eliflen_rv==2 len_rv==2: ==2:\t 2:\t\t\t\t\t :\t\t\t\t\tif \t\t\t\t\tifisinstance \t\t\t\tifisinstance( ifisinstance(rv isinstance(rv[ (rv[1 rv[1] [1], 1],( ],(Headers ,(Headers, (Headers,dict Headers,dict, ,dict,tuple dict,tuple, ,tuple,list tuple,list) ,list)) list)): )):\t ):\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv, \t\t\t\t\trv,headers rv,headers= ,headers=rv headers=rv\t =rv\t\t rv\t\telse \t\telse: \telse:\t else:\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv, \t\t\t\t\trv,status rv,status= ,status=rv status=rv\t =rv\t\t rv\t\t\t \t\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseTypeError \t\t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid response tuple.\" TypeError(\"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\" (\"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\" \"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\") \" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\")\t \" (body, status), or (body, headers).\")\t\t )\t\t\t \t\t\tif \t\tifrv \tifrvis ifrvisNone rvisNone: isNone:\t None:\t\t\t\t :\t\t\t\traise \t\t\t\traiseTypeError \t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid response. The\" TypeError(\"The view function did not return a valid response. The\"\" function either returned None or ended without a return\" (\"The view function did not return a valid response. The\"\" function either returned None or ended without a return\"\" statement.\" \"The view function did not return a valid response. The\"\" function either returned None or ended without a return\"\" statement.\") \" function either returned None or ended without a return\"\" statement.\")\t \" statement.\")\t\t )\t\tif \t\tifnot \tifnotisinstance ifnotisinstance( notisinstance(rv isinstance(rv, (rv,self rv,self. ,self.response_class self.response_class) .response_class): response_class):\t ):\t\t\t\t :\t\t\t\tif \t\t\t\tifisinstance \t\t\tifisinstance( ifisinstance(rv isinstance(rv, (rv,( rv,(text_type ,(text_type, (text_type,bytes text_type,bytes, ,bytes,bytearray bytes,bytearray) ,bytearray)) bytearray)): )):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=self rv=self. =self.response_class self.response_class( .response_class(rv response_class(rv, (rv,status rv,status= ,status=status status=status, =status,headers status,headers= ,headers=headers headers=headers) =headers)\t headers)\tstatus )\tstatus= \tstatus=headers status=headers= =headers=None headers=None\t =None\t\t None\t\telif \t\telifisinstance \telifisinstance( elifisinstance(rv isinstance(rv, (rv,dict rv,dict) ,dict): dict):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=jsonify rv=jsonify( =jsonify(rv jsonify(rv) (rv)\t rv)\t\t )\t\telif \t\telifisinstance \telifisinstance( elifisinstance(rv isinstance(rv, (rv,BaseResponse rv,BaseResponse) ,BaseResponse)or BaseResponse)orcallable )orcallable( orcallable(rv callable(rv) (rv): rv):\t ):\t\t\t\t\t :\t\t\t\t\ttry \t\t\t\t\ttry: \t\t\t\ttry:\t try:\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv= \t\t\t\t\trv=self rv=self. =self.response_class self.response_class. .response_class.force_type response_class.force_type( .force_type(rv force_type(rv, (rv,request rv,request. ,request.environ request.environ) .environ)\t environ)\t\t )\t\texcept \t\texceptTypeError \texceptTypeErroras exceptTypeErrorase TypeErrorase: ase:\t e:\t\t\t\t\t\t :\t\t\t\t\t\tnew_error \t\t\t\t\t\tnew_error= \t\t\t\t\tnew_error=TypeError new_error=TypeError( =TypeError(\"{e}\\nThe view function did not return a valid\" TypeError(\"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\" (\"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\" \"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\" \" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\". \" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\".format \" {rv.__class__.__name__}.\".format( .format(e format(e= (e=e e=e, =e,rv e,rv= ,rv=rv rv=rv) =rv)) rv))\t ))\treraise )\treraise( \treraise(TypeError reraise(TypeError, (TypeError,new_error TypeError,new_error, ,new_error,sys new_error,sys. ,sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[2 )[2] [2]) 2])\t ])\t\t )\t\t\t \t\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseTypeError \t\t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid\" TypeError(\"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\" (\"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\" \"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\" \" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\". \" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\".format \" {rv.__class__.__name__}.\".format( .format(rv format(rv= (rv=rv rv=rv) =rv)) rv))\t ))\t\t )\t\t\t \t\t\tif \t\tifstatus \tifstatusis ifstatusisnot statusisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tif \t\t\t\tifisinstance \t\t\tifisinstance( ifisinstance(status isinstance(status, (status,( status,(text_type ,(text_type, (text_type,bytes text_type,bytes, ,bytes,bytearray bytes,bytearray) ,bytearray)) bytearray)): )):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv. \t\t\t\trv.status rv.status= .status=status status=status\t =status\t\t status\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv. \t\t\t\trv.status_code rv.status_code= .status_code=status status_code=status\t =status\t\t status\t\t\t \t\t\tif \t\tifheaders \tifheaders: ifheaders:\t headers:\t\t\t\t :\t\t\t\trv \t\t\t\trv. \t\t\trv.headers rv.headers. .headers.extend headers.extend( .extend(headers extend(headers) (headers)\t headers)\t\t )\t\treturn \t\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefcreate_url_adapter \tdefcreate_url_adapter( defcreate_url_adapter(self create_url_adapter(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\" \t\t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\t \t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\tif \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\tifrequest \tifrequestis ifrequestisnot requestisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tsubdomain \t\t\t\tsubdomain= \t\t\tsubdomain=( subdomain=(( =((self ((self. (self.url_map self.url_map. .url_map.default_subdomain url_map.default_subdomainor .default_subdomainorNone default_subdomainorNone) orNone)if None)ifnot )ifnotself ifnotself. notself.subdomain_matching self.subdomain_matchingelse .subdomain_matchingelseNone subdomain_matchingelseNone) elseNone)\t None)\treturn )\treturnself \treturnself. returnself.url_map self.url_map. .url_map.bind_to_environ url_map.bind_to_environ( .bind_to_environ(request bind_to_environ(request. (request.environ request.environ, .environ,server_name environ,server_name= ,server_name=self server_name=self. =self.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"], \"SERVER_NAME\"],subdomain ],subdomain= ,subdomain=subdomain subdomain=subdomain, =subdomain,) subdomain,)\t ,)\t\t )\t\tif \t\tifself \tifself. ifself.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"]is \"SERVER_NAME\"]isnot ]isnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.url_map self.url_map. .url_map.bind url_map.bind( .bind(self bind(self. (self.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"], \"SERVER_NAME\"],script_name ],script_name= ,script_name=self script_name=self. =self.config self.config[ .config[\"APPLICATION_ROOT\" config[\"APPLICATION_ROOT\"] [\"APPLICATION_ROOT\"], \"APPLICATION_ROOT\"],url_scheme ],url_scheme= ,url_scheme=self url_scheme=self. =self.config self.config[ .config[\"PREFERRED_URL_SCHEME\" config[\"PREFERRED_URL_SCHEME\"] [\"PREFERRED_URL_SCHEME\"], \"PREFERRED_URL_SCHEME\"],) ],)\t ,)\t\t )\t\t\t \t\t\tdef \t\tdefinject_url_defaults \tdefinject_url_defaults( definject_url_defaults(self inject_url_defaults(self, (self,endpoint self,endpoint, ,endpoint,values endpoint,values) ,values): values):\t ):\t\t\t :\t\t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfuncs \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfuncs= \tfuncs=self funcs=self. =self.url_default_functions self.url_default_functions. .url_default_functions.get url_default_functions.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tif\".\" \tif\".\"in if\".\"inendpoint \".\"inendpoint: inendpoint:\t endpoint:\t\t\t\t :\t\t\t\tbp \t\t\t\tbp= \t\t\tbp=endpoint bp=endpoint. =endpoint.rsplit endpoint.rsplit( .rsplit(\".\" rsplit(\".\", (\".\",1 \".\",1) ,1)[ 1)[0 )[0] [0]\t 0]\tfuncs ]\tfuncs= \tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.url_default_functions self.url_default_functions. .url_default_functions.get url_default_functions.get( .get(bp get(bp, (bp,( bp,() ,()) ())) )))\t ))\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(endpoint func(endpoint, (endpoint,values endpoint,values) ,values)\t values)\t\t )\t\t\t \t\t\tdef \t\tdefhandle_url_build_error \tdefhandle_url_build_error( defhandle_url_build_error(self handle_url_build_error(self, (self,error self,error, ,error,endpoint error,endpoint, ,endpoint,values endpoint,values) ,values): values):\t ):\t\t\t :\t\t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\" \t\t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\t \t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\texc_type \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tfor )\tforhandler \tforhandlerin forhandlerinself handlerinself. inself.url_build_error_handlers self.url_build_error_handlers: .url_build_error_handlers:\t url_build_error_handlers:\t\t\t\t :\t\t\t\ttry \t\t\t\ttry: \t\t\ttry:\t try:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=handler rv=handler( =handler(error handler(error, (error,endpoint error,endpoint, ,endpoint,values endpoint,values) ,values)\t values)\tif )\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t\t\t :\t\t\t\t\t\treturn \t\t\t\t\t\treturnrv \t\t\t\t\treturnrv\t returnrv\t\t rv\t\t\t \t\t\texcept \t\texceptBuildError \texceptBuildErroras exceptBuildErrorase BuildErrorase: ase:\t e:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=e error=e\t =e\t\t e\t\t\t \t\t\tif \t\tiferror \tiferroris iferrorisexc_value errorisexc_value: isexc_value:\t exc_value:\t\t\t\t :\t\t\t\treraise \t\t\t\treraise( \t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\traise \t\traiseerror \traiseerror\t raiseerror\t\t error\t\tdef \t\tdefpreprocess_request \tdefpreprocess_request( defpreprocess_request(self preprocess_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\" \t\t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\t \t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\tbp \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\tbp= \tbp=_request_ctx_stack bp=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request. .request.blueprint request.blueprint\t .blueprint\tfuncs blueprint\tfuncs= \tfuncs=self funcs=self. =self.url_value_preprocessors self.url_value_preprocessors. .url_value_preprocessors.get url_value_preprocessors.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.url_value_preprocessors self.url_value_preprocessors: .url_value_preprocessors:\t url_value_preprocessors:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.url_value_preprocessors self.url_value_preprocessors[ .url_value_preprocessors[bp url_value_preprocessors[bp] [bp]) bp])\t ])\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(request func(request. (request.endpoint request.endpoint, .endpoint,request endpoint,request. ,request.view_args request.view_args) .view_args)\t view_args)\t\t )\t\tfuncs \t\tfuncs= \tfuncs=self funcs=self. =self.before_request_funcs self.before_request_funcs. .before_request_funcs.get before_request_funcs.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.before_request_funcs self.before_request_funcs: .before_request_funcs:\t before_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.before_request_funcs self.before_request_funcs[ .before_request_funcs[bp before_request_funcs[bp] [bp]) bp])\t ])\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\trv \t\t\t\trv= \t\t\trv=func rv=func( =func() func()\t ()\tif )\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturnrv \t\t\t\treturnrv\t returnrv\t\t rv\t\t\t \t\t\t\t \t\t\tdef \t\tdefprocess_response \tdefprocess_response( defprocess_response(self process_response(self, (self,response self,response) ,response): response):\t ):\t\t\t :\t\t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\" \t\t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\t \t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\tctx \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\tctx= \tctx=_request_ctx_stack ctx=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top\t .top\tbp top\tbp= \tbp=ctx bp=ctx. =ctx.request ctx.request. .request.blueprint request.blueprint\t .blueprint\tfuncs blueprint\tfuncs= \tfuncs=ctx funcs=ctx. =ctx._after_request_functions ctx._after_request_functions\t ._after_request_functions\tif _after_request_functions\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.after_request_funcs self.after_request_funcs: .after_request_funcs:\t after_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.after_request_funcs self.after_request_funcs[ .after_request_funcs[bp after_request_funcs[bp] [bp]) bp])) ]))\t ))\t\t )\t\tif \t\tifNone \tifNonein ifNoneinself Noneinself. inself.after_request_funcs self.after_request_funcs: .after_request_funcs:\t after_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.after_request_funcs self.after_request_funcs[ .after_request_funcs[None after_request_funcs[None] [None]) None])) ]))\t ))\t\t )\t\tfor \t\tforhandler \tforhandlerin forhandlerinfuncs handlerinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tresponse \t\t\t\tresponse= \t\t\tresponse=handler response=handler( =handler(response handler(response) (response)\t response)\t\t )\t\tif \t\tifnot \tifnotself ifnotself. notself.session_interface self.session_interface. .session_interface.is_null_session session_interface.is_null_session( .is_null_session(ctx is_null_session(ctx. (ctx.session ctx.session) .session): session):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.session_interface self.session_interface. .session_interface.save_session session_interface.save_session( .save_session(self save_session(self, (self,ctx self,ctx. ,ctx.session ctx.session, .session,response session,response) ,response)\t response)\t\t )\t\treturn \t\treturnresponse \treturnresponse\t returnresponse\t\t response\t\tdef \t\tdefdo_teardown_request \tdefdo_teardown_request( defdo_teardown_request(self do_teardown_request(self, (self,exc self,exc= ,exc=_sentinel exc=_sentinel) =_sentinel): _sentinel):\t ):\t\t\t :\t\t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\" \t\t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\t \t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\tif \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\tifexc \tifexcis ifexcis_sentinel excis_sentinel: is_sentinel:\t _sentinel:\t\t\t\t :\t\t\t\texc \t\t\t\texc= \t\t\texc=sys exc=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\t\t ]\t\tfuncs \t\tfuncs= \tfuncs=reversed funcs=reversed( =reversed(self reversed(self. (self.teardown_request_funcs self.teardown_request_funcs. .teardown_request_funcs.get teardown_request_funcs.get( .get(None get(None, (None,( None,() ,()) ())) )))\t ))\tbp )\tbp= \tbp=_request_ctx_stack bp=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request. .request.blueprint request.blueprint\t .blueprint\tif blueprint\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.teardown_request_funcs self.teardown_request_funcs: .teardown_request_funcs:\t teardown_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.teardown_request_funcs self.teardown_request_funcs[ .teardown_request_funcs[bp teardown_request_funcs[bp] [bp]) bp])) ]))\t ))\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(exc func(exc) (exc)\t exc)\t\t )\t\trequest_tearing_down \t\trequest_tearing_down. \trequest_tearing_down.send request_tearing_down.send( .send(self send(self, (self,exc self,exc= ,exc=exc exc=exc) =exc)\t exc)\t\t )\t\tdef \t\tdefdo_teardown_appcontext \tdefdo_teardown_appcontext( defdo_teardown_appcontext(self do_teardown_appcontext(self, (self,exc self,exc= ,exc=_sentinel exc=_sentinel) =_sentinel): _sentinel):\t ):\t\t\t :\t\t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\tif \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\tifexc \tifexcis ifexcis_sentinel excis_sentinel: is_sentinel:\t _sentinel:\t\t\t\t :\t\t\t\texc \t\t\t\texc= \t\t\texc=sys exc=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\t\t ]\t\tfor \t\tforfunc \tforfuncin forfuncinreversed funcinreversed( inreversed(self reversed(self. (self.teardown_appcontext_funcs self.teardown_appcontext_funcs) .teardown_appcontext_funcs): teardown_appcontext_funcs):\t ):\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(exc func(exc) (exc)\t exc)\t\t )\t\tappcontext_tearing_down \t\tappcontext_tearing_down. \tappcontext_tearing_down.send appcontext_tearing_down.send( .send(self send(self, (self,exc self,exc= ,exc=exc exc=exc) =exc)\t exc)\t\t )\t\tdef \t\tdefapp_context \tdefapp_context( defapp_context(self app_context(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\treturn \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\treturnAppContext \treturnAppContext( returnAppContext(self AppContext(self) (self)\t self)\t\t )\t\tdef \t\tdefrequest_context \tdefrequest_context( defrequest_context(self request_context(self, (self,environ self,environ) ,environ): environ):\t ):\t\t\t :\t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\" \t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\t \t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\treturn \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\treturnRequestContext \treturnRequestContext( returnRequestContext(self RequestContext(self, (self,environ self,environ) ,environ)\t environ)\t\t )\t\tdef \t\tdeftest_request_context \tdeftest_request_context( deftest_request_context(self test_request_context(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\" \t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\t \t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\tfrom \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\tfrom. \tfrom.testing from.testingimport .testingimportEnvironBuilder testingimportEnvironBuilder\t importEnvironBuilder\tbuilder EnvironBuilder\tbuilder= \tbuilder=EnvironBuilder builder=EnvironBuilder( =EnvironBuilder(self EnvironBuilder(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs)\t kwargs)\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.request_context self.request_context( .request_context(builder request_context(builder. (builder.get_environ builder.get_environ( .get_environ() get_environ()) ())\t ))\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tbuilder \t\t\t\tbuilder. \t\t\tbuilder.close builder.close( .close() close()\t ()\t\t )\t\t\t \t\t\tdef \t\tdefwsgi_app \tdefwsgi_app( defwsgi_app(self wsgi_app(self, (self,environ self,environ, ,environ,start_response environ,start_response) ,start_response): start_response):\t ):\t\t\t :\t\t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\" \t\t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\t \t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\tctx \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\tctx= \tctx=self ctx=self. =self.request_context self.request_context( .request_context(environ request_context(environ) (environ)\t environ)\terror )\terror= \terror=None error=None\t =None\ttry None\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\ttry \t\t\t\ttry: \t\t\ttry:\t try:\t\t\t\t\t :\t\t\t\t\tctx \t\t\t\t\tctx. \t\t\t\tctx.push ctx.push( .push() push()\t ()\tresponse )\tresponse= \tresponse=self response=self. =self.full_dispatch_request self.full_dispatch_request( .full_dispatch_request() full_dispatch_request()\t ()\t\t )\t\texcept \t\texceptException \texceptExceptionas exceptExceptionase Exceptionase: ase:\t e:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=e error=e\t =e\tresponse e\tresponse= \tresponse=self response=self. =self.handle_exception self.handle_exception( .handle_exception(e handle_exception(e) (e)\t e)\t\t )\t\texcept \t\texcept: \texcept:\t except:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=sys error=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\traise ]\traise\t \traise\t\t raise\t\treturn \t\treturnresponse \treturnresponse( returnresponse(environ response(environ, (environ,start_response environ,start_response) ,start_response)\t start_response)\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself.should_ignore_error self.should_ignore_error( .should_ignore_error(error should_ignore_error(error) (error): error):\t ):\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=None error=None\t =None\t\t None\t\tctx \t\tctx. \tctx.auto_pop ctx.auto_pop( .auto_pop(error auto_pop(error) (error)\t error)\t\t )\t\t\t \t\t\tdef \t\tdef__call__ \tdef__call__( def__call__(self __call__(self, (self,environ self,environ, ,environ,start_response environ,start_response) ,start_response): start_response):\t ):\t\t\t :\t\t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\" \t\t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\t \t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\treturn \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\treturnself \treturnself. returnself.wsgi_app self.wsgi_app( .wsgi_app(environ wsgi_app(environ, (environ,start_response environ,start_response) ,start_response)\t start_response)\t\t )\t\tdef \t\tdef__repr__ \tdef__repr__( def__repr__(self __repr__(self) (self): self):\t ):\t\t\t :\t\t\treturn \t\t\treturn\"<%s %r>\" \t\treturn\"<%s %r>\"% return\"<%s %r>\"%( \"<%s %r>\"%(self %(self. (self.__class__ self.__class__. .__class__.__name__ __class__.__name__, .__name__,self __name__,self. ,self.name self.name) .name)\n name)\n\n )\n\n\n \n\n\n< \n\n<EOF \n<EOF>","type":"boolean","boost":4.0}}},{"match":{"src":{"query":"NSNK SNKW NKWN KWNK WNKW NKWN KWNK WNKW NKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNK. NK.K K.KW .KWN KWNK WNK. NK.K K.KW .KWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNW WNWO NWOW WOW( OW() W()N ()NK )NKW NKW( KW(W W(W) (W): W):N ):NI :NIK NIKK IKKW KKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(W W(WO (WOW WOW) OW)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW): W):N ):NI :NIK NIKW IKW. KW.W W.WK .WKW WKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW( KW(S W(SS (SSS SSSS SSSS SSSS SSSS SSS) SS)N S)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S, (S,W S,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOW( OW(S W(S, (S,W S,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW. OW.W W.WN .WNW WNWO NWOW WOW. OW.W W.WN .WNW WNWO NWO{ WO{S O{S: {S:[ S:[S :[S, [S,S S,S] ,S]} S]}N ]}NW }NWO NWOW WOW( OW({ W({S ({S: {S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:W S:W( :W(W W(WO (WOV WOV) OV), V),S ),S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:W S:W( :W(W W(WO (WOV WOV) OV), V),S ),S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:V S:V, :V,} V,}) ,})N })NW )NWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOK WOKN OKNW KNWO NWOK WOKN OKNW KNWO NWOW WOW( OW() W()N ()NW )NWO NWOK WOKN OKNW KNWO NWOK WOKN OKNW KNWO NWOK WOKN OKNK KNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK, OK,W K,WO ,WOS WOS, OS,W S,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOS WOS, OS,W S,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,) K,): ,):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW) OW)N W)NW )NW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOWN OWNK WNKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()N ()ND )NDK NDKK DKKW KKW. KW.W W.W. .W.W W.W( .W(W W(W) (W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SS) SS)N S)ND )NDW NDW. DW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{K O{K: {K:[ K:[W :[W] [W]} W]}N ]}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOK WOKN OKNW KNW. NW.W W.WO .WOW WOW( OW() W()N ()NK )NKW NKW. KW.W W.W: .W:N W:NI :NIK NIK( IK(W K(W( (W(W W(W) (W)O W)OW )OW) OW), W),S ),SN ,SNW SNW. NW.W W.W( .W(W W(W. (W.W W.WO .WOS WOS, OS,W S,WO ,WOS WOS, OS,W S,WO ,WOW WOW, OW,W W,WO ,WOW WOW. OW.W W.W, .W,) W,)N ,)ND )NDW NDW. DW.W W.W. .W.W W.WO .WOW WOW. OW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WO .WOS WOS: OS:N S:NI :NIW NIWO IWOW WOW( OW(W W(W. (W.W W.W[ .W[S W[S] [S], S],S ],S, ,S,K S,K) ,K)N K)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKS IKSN KSND SNDK NDKW DKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W. .W.W W.W( .W(W W(W) (W)) W))[ ))[V )[V] [V]N V]ND ]NDK NDKW DKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW. KW.W W.WK .WKW WKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W( .W() W()N ()ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WN .WND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.WN .WND WNDW NDWO DWOW WOW( OW(W W(W. (W.W W.W) .W)N W)NW )NW[ NW[S W[S] [S]O S]OW ]OW( OW() W()N ()NW )NW[ NW[S W[S] [S]O S]OW ]OW( OW() W()N ()NK )NKW NKW. KW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,WO ,WOW WOW( OW(W W(W. (W.W W.W) .W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKW IKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S) ,S)N S)ND )NDK NDKW DKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S, ,S,W S,W. ,W.W W.WO .WOS WOS) OS)N S)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOS WOS) OS): S):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W. (W.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W) ,W), W),W ),W) ,W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKW WKWK KWKK WKKK KKKK KKKW KKW. KW.W W.WN .WND WNDO NDOW DOW. OW.W W.WN .WNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]O S]OW ]OWN OWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW( OW(W W(W. (W.W W.W) .W)N W)NK )NKS NKSK KSKK SKKW KKW: KW:N W:NI :NIW NIW[ IW[S W[S] [S]O S]OW ]OW. OW.W W.WN .WND WNDK NDKS DKSK KSKK SKKW KKW: KW:N W:NI :NIW NIW[ IW[S W[S] [S]O S]OW ]OW. OW.W W.WN .WND WNDW NDWO DWOW WOW. OW.W W.W( .W(W W(W, (W,O W,OW ,OW) OW)N W)NW )NW. NW.W W.W. .W.W W.W( .W(W W(WO (WOW WOW, OW,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW. OW.W W.W, .W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW, OW,) W,)N ,)NW )NW. NW.W W.W[ .W[S W[S] [S]O S]OW ]OW. OW.W W.WN .WNK WNKW NKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKK: KK:N K:NI :NIK NIKK IKKN KKND KNDK NDKW DKW. KW.W W.W( .W(( W((S ((S, (S,S S,S, ,S,S S,S, ,S,S S,S) ,S)) S))N ))ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[K W[K] [K]N K]NW ]NWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDD NDDW DDWO DWOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKW: KW:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWO{ WO{S O{S: {S:W S:W, :W,S W,S: ,S:W S:W} :W}N W}NK }NKW NKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDK NDKW DKWN KWND WNDW NDWO DWOW WOW( OW(S W(S) (S)N S)NO )NOW NOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W[ .W[S W[S] [S]N S]ND ]NDO NDOW DOW. OW.W W.WN .WNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]O S]OW ]OWN OWNW WNW. NW.W W.W. .W.W W.WO .WOW WOW. OW.W W.WN .WND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W. .W.W W.W( .W(S W(S) (S)O S)OS )OS: OS:N S:NI :NIK NIK. IK.W K.WK .WKW WKWN KWNW WNW( NW() W()N ()NK )NKN NKND KNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W() W()N ()NK )NKS NKSK KSKW SKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.WO .WOW WOW( OW() W()N ()NW )NW. NW.W W.WO .WOW WOW( OW() W()N ()ND )NDK NDKS DKSK KSKW SKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.WO .WOW WOW( OW() W()N ()ND )NDD NDDK DDKW DKWK KWKK WKKK KKK: KK:N K:NI :NIW NIW. IW.W W.WO .WOW WOW( OW(W W(W) (W)N W)ND )NDW NDWO DWOS WOSN OSNW SNWO NWOV WOVN OVNW VNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(S W(S) (S)N S)NW )NW, NW,W W,WO ,WOK WOK, OK,K K,KN ,KNK KNKW NKW: KW:N W:NI :NIW NIW, IW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W(S W(S) (S)N S)ND )NDW NDWO DWOW WOWK OWKW WKWK KWKW WKWN KWNW WNWO NWOW WOW( OW(W W(W( (W(( W((W ((WK (WKW WKWK KWK( WK(W K(W, (W,W W,W) ,W)K W)KW )KWK KWKK WKKK KKK) KK), K),W ),W) ,W)) W))N ))NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NW )NW. NW.W W.W( .W(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W, .W,W W,W. ,W.W W.W, .W,K W,K) ,K)N K)NK )NKW NKW. KW.W W.WK .WKW WKWN KWNK WNK: NK:N K:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W, ,W,O W,OW ,OW) OW)N W)ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.WO .WOK WOKN OKND KNDD NDDK DDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKK: KK:N K:NI :NIK NIK. IK.W K.WK .WKW WKWK KWKW WKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W. ,W.W W.W, .W,W W,WO ,WOW WOW, OW,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKK: KK:N K:NI :NIK NIK. IK.W K.WK .WKW WKWK KWKW WKWN KWND WNDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOK WOKN OKNK KNKW NKW. KW.W W.WK .WKW WKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW. KW.W W.W[ .W[W W[W. [W.W W.W] .W]K W]KW ]KW, KW,( W,(S ,(SS (SSS SSSO SSO( SO(W O(W, (W,W W,W. ,W.W W.W[ .W[W W[W. [W.W W.W] .W], W],W ],W. ,W.W W.W) .W)) W))N ))ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.W[ .W[W W[W. [W.W W.W] .W]O W]OW ]OWN OWNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NW )NWO NWOK WOKN OKND KNDW NDW. DW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W. (W.W W.W) .W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDW NDW[ DW[S W[S] [S]O S]OW ]OWN OWNW WNWO NWOW WOW. OW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,S W,S, ,S,K S,K) ,K)K K)K( )K(S K(S, (S,) S,)N ,)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SS) SS)N S)ND )NDW NDWO DWOW WOW( OW(W W(W. (W.W W.W( .W() W()K ()KW )KWK KWKW WKW) KW)N W)NW )NWO NWOW WOW( OW(W W(W( (W(W W(W, (W,S W,S, ,S,( S,() ,()) ())) )))N ))NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,S W,S, ,S,K S,K) ,K)N K)ND )NDK NDKW DKWK KWKK WKK: KK:N K:NI :NIK NIKS IKSK KSKK SKKW KKW: KW:N W:NI :NIW NIWO IWOK WOKN OKNW KNW. NW.W W.W( .W(S W(S) (S)N S)ND )NDK NDK: DK:N K:NI :NIW NIWO IWOK WOKN OKND KNDD NDDW DDWO DWOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW, OW,O W,OW ,OW) OW)N W)NW )NW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKKK KKKW KKWO KWOW WOW: OW:N W:NI :NIK NIKW IKW( KW(S W(SS (SSO SSOW SOW) OW)N W)ND )NDW NDW. DW.W W.W[ .W[W W[W] [W]O W]OW ]OWN OWND WNDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIWO IWOW WOW. OW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W, ,W,O W,OW ,OW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W[ .W[W W[W] [W]O W]OW ]OWN OWNK WNKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW[ OW[W W[W] [W]N W]ND ]NDK NDK: DK:N K:NI :NIW NIWO IWOW WOWN OWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)NK )NKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW, KW,W W,W. ,W.W W.WN .WND WNDK NDK: DK:N K:NI :NIK NIKW IKW, KW,K W,KN ,KND KNDD NDDO DDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(K W(K, (K,W K,W, ,W,W W,W) ,W)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(K W(K, (K,W K,W, ,W,W W,W) ,W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SSS SSS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDK NDK: DK:N K:NI :NIW NIW, IW,W W,WO ,WOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW: KW:N W:NI :NIK NIKW IKW( KW(S W(SS (SS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDW NDWO DWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W, (W,{ W,{} ,{}) {})N })NW )NW[ NW[W W[W] [W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W[ .W[K W[K] [K]. K].W ].W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,WO ,WOW WOW. OW.W W.W( .W(W W(W( (W(W W(W) (W)) W))N ))NK )NKW NKW, KW,W W,WK ,WK( WK(( K((W ((W. (W.W W.W, .W,W W,W) ,W), W),( ),(K ,(K, (K,W K,W) ,W), W),( ),(W ,(W. (W.W W.W, .W,K W,K) ,K), K),( ),(K ,(K, (K,K K,K) ,K), K),) ),): ,):N ):NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W) (W)N W)NK )NKK NKKW KKW: KW:N W:NI :NIK NIKN IKND KNDK NDKW DKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDD DDDD DDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WK .WKK WKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKWN KWND WNDW NDWO DWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIK NIKK IKKN KKND KNDW NDWO DWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NK( NK(W K(WK (WKK WKKK KKKW KKW. KW.W W.WK .WKW WKW( KW(W W(W, (W,W W,W) ,W)) W)): )):N ):NI :NIK NIKK IKKN KKND KNDK NDKW DKW: KW:N W:NI :NIK NIKW IKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKK DKKN KKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKWN KWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW. KW.W W.WK .WKW WKW. KW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIW NIW. IW.W W.WO .WOK WOKN OKNK KNKW NKW. KW.W W.W[ .W[V W[V] [V]K V]KK ]KKW KKW. KW.W W.W( .W() W(): ():N ):NI :NIW NIW. IW.W W.WO .WOS WOS. OS.W S.W( .W(O W(OW (OW. OW.W W.W) .W)N W)ND )NDD NDDK DDKK DKKW KKW( KW(W W(W, (W,S W,S) ,S): S):N ):NI :NIW NIW. IW.W W.WO .WO( WO() O()N ()ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W)K W)KK )KKW KKW. KW.W W.W( .W(W W(W) (W): W):N ):NI :NIK NIKW IKW. KW.W W.W( .W(W W(W) (W)N W)ND )NDW NDWO DWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKW. KW.W W.W: .W:N W:NI :NIK NIKW IKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDK: DK:N K:NI :NIK NIKW IKWN KWND WNDD NDDW DDW. DW.W W.W( .W(( W((W ((W, (W,W W,W, ,W,W W,W) ,W)) W))N ))NW )NWO NWOW WOW( OW() W()N ()NW )NW. NW.W W.WO .WOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKW DKW. KW.W W.W( .W(W W(W, (W,W W,WO ,WOK WOK) OK)N K)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(S W(SO (SO( SO(W O(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W), W),W ),WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNK( NK(K K(KW (KW. KW.W W.WK .WKK WKKW KKW( KW(W W(W. (W.W W.W, .W,W W,W) ,W)K W)KW )KW. KW.W W.WK .WK( WK(S K(S, (S,S S,S, ,S,S S,S) ,S)) S)): )):N ):NI :NIK NIKW IKW. KW.W W.WN .WND WNDK NDK. DK.W K.WK .WKW WKWN KWNK WNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNK WNKW NKW. KW.W W.WK .WKK WKKK KKK: KK:N K:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)ND )NDW NDWO DWOW WOW. OW.W W.WN .WNK WNK( NK(W K(W( (W(W W(W, (W,S W,S, ,S,K S,K) ,K)K K)KW )KW. KW.W W.WO .WOS WOS) OS): S):N ):NI :NIK NIKW IKW. KW.W W.W( .W() W()N ()ND )NDK NDKW DKW. KW.W W.W[ .W[W W[W. [W.W W.W] .W]( W](O ](OW (OW. OW.W W.W) .W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W() W()N ()NK )NK: NK:N K:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()N ()ND )NDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW. KW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NK: NK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW: KW:N W:NI :NIK NIKK IKKW KKW: KW:N W:NI :NIK NIKN IKND KNDW NDW. DW.W W.W. .W.W W.W( .W(S W(S) (S)N S)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W: .W:N W:NI :NIK NIKN IKND KNDK NDKW DKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW. KW.W W.W: .W:N W:NI :NIK NIKN IKND KNDK NDKW DKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIW( IW() W()N ()ND )NDW NDW. DW.W W.WO .WOK WOKN OKND KNDD NDDK DDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.W( .W() W()N ()NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKK NKKN KKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOWO OWOK WOKN OKNK KNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)NK )NKW NKWO KWOV WOV: OV:N V:NI :NIW NIW, IW,W W,W, ,W,W W,WO ,WOW WOWN OWND WNDK NDKW DKWO KWOV WOV: OV:N V:NI :NIK NIKW IKW( KW(W W(W[ (W[V W[V] [V], V],( ],(W ,(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW, IW,W W,WO ,WOW WOWN OWND WNDK NDK: DK:N K:NI :NIW NIW, IW,W W,WO ,WOW WOWN OWND WNDD NDDK DDK: DK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSS) SS)N S)ND )NDD NDDK DDKW DKWK KWKK WKK: KK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSS) SS)N S)ND )NDK NDKK DKKW KKW( KW(W W(W, (W,W W,W. ,W.W W.W) .W): W):N ):NI :NIK NIKW IKW( KW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOWO OWOK WOKN OKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)K W)KW )KW( KW(W W(W) (W): W):N ):NI :NIK NIK: IK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W) .W)N W)ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(WO (WOW WOW, OW,W W,WO ,WOW WOW) OW)) W))N ))NW )NW( NW(W W(W, (W,W W,W, ,W,W W,W. ,W.W W.W( .W() W()[ ()[V )[V] [V]) V])N ])ND )NDD NDDK DDK: DK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(WO (WOW WOW) OW)) W))N ))ND )NDD NDDK DDKW DKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKW( KW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW. IW.W W.WO .WOW WOWN OWND WNDK NDK: DK:N K:NI :NIW NIW. IW.W W.WO .WOW WOWN OWND WNDD NDDK DDKW DKW: KW:N W:NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWO( WO(( O((W ((W. (W.W W.W. .W.W W.WK .WKK WKK) KK)K K)KK )KKW KKW. KW.W W.WK .WKK WKK) KK)N K)NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW, OW,) W,)N ,)ND )NDK NDKW DKW. KW.W W.W[ .W[S W[S] [S]K S]KK ]KKK KKK: KK:N K:NI :NIK NIKW IKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],) ],)N ,)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKS NKSK KSKW SKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(S W(S, (S,V S,V) ,V)[ V)[V )[V] [V]N V]NW ]NWO NWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W. .W.W W.W( .W(W W(W, (W,( W,() ,()) ())) )))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W) ,W)N W)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIK NIK: IK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOWN OWND WNDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDW NDWO DWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW() W()N ()NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDD DDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNW WNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDK NDKK DKKK KKKW KKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[K W[K] [K]) K])) ]))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKK DKKW KKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W) ,W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOW WOW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDW NDWO DWOW WOW( OW(W W(W. (W.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())) )))N ))NW )NWO NWOW WOW. OW.W W.W. .W.W W.W. .W.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOW WOW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDK NDKW DKWK KWKW WKW( KW(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNK. NK.W K.WK .WKW WKWN KWNW WNWO NWOW WOW( OW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW)N W)NK )NK: NK:N K:NI :NIK NIKW IKW. KW.W W.W( .W(W W(W. (W.W W.W( .W() W()) ())N ))ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.W( .W() W()N ()ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NWO NWOK WOKN OKNK KNK: NK:N K:NI :NIK NIK: IK:N K:NI :NIW NIW. IW.W W.W( .W() W()N ()NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDK: DK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]NK ]NKN NKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDK: DK:N K:NI :NIK NIKW IKW. KW.W W.W( .W(W W(W) (W): W):N ):NI :NIW NIWO IWOK WOKN OKND KNDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIK NIKS IKSO KSO( SO(W O(W. (W.W W.W. .W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDD NDDO DDOW DOWO","type":"boolean","boost":4.0}}}]}},"sort":[{"_score":{"order":"desc"}},{"file":{"order":"desc"}}]}]]; nested: TooManyClauses[maxClauseCount is set to 20480];
Caused by: SearchParseException[failed to parse search source [{"from":0,"size":100,"query":{"bool":{"should":[{"match":{"tokenizedsrc":{"query":"\n \"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\" \n import os \n import sys \n import warnings \n from datetime import timedelta \n from functools import update_wrapper \n from itertools import chain \n from threading import Lock \n from werkzeug . datastructures import Headers \n from werkzeug . datastructures import ImmutableDict \n from werkzeug . exceptions import BadRequest \n from werkzeug . exceptions import BadRequestKeyError \n from werkzeug . exceptions import default_exceptions \n from werkzeug . exceptions import HTTPException \n from werkzeug . exceptions import InternalServerError \n from werkzeug . routing import BuildError \n from werkzeug . routing import Map \n from werkzeug . routing import RequestRedirect \n from werkzeug . routing import RoutingException \n from werkzeug . routing import Rule \n from werkzeug . wrappers import BaseResponse \n from . import cli \n from . import json \n from . _compat import integer_types \n from . _compat import reraise \n from . _compat import string_types \n from . _compat import text_type \n from . config import Config \n from . config import ConfigAttribute \n from . ctx import _AppCtxGlobals \n from . ctx import AppContext \n from . ctx import RequestContext \n from . globals import _request_ctx_stack \n from . globals import g \n from . globals import request \n from . globals import session \n from . helpers import _endpoint_from_view_func \n from . helpers import _PackageBoundObject \n from . helpers import find_package \n from . helpers import get_debug_flag \n from . helpers import get_env \n from . helpers import get_flashed_messages \n from . helpers import get_load_dotenv \n from . helpers import locked_cached_property \n from . helpers import url_for \n from . json import jsonify \n from . logging import create_logger \n from . sessions import SecureCookieSessionInterface \n from . signals import appcontext_tearing_down \n from . signals import got_request_exception \n from . signals import request_finished \n from . signals import request_started \n from . signals import request_tearing_down \n from . templating import _default_template_ctx_processor \n from . templating import DispatchingJinjaLoader \n from . templating import Environment \n from . wrappers import Request \n from . wrappers import Response \n _sentinel = object ( ) \n def _make_timedelta ( value ) : \t \t if not isinstance ( value , timedelta ) : \t \t\t return timedelta ( seconds = value ) \t \t return value \n \n def setupmethod ( f ) : \t \t \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\" \t def wrapper_func ( self , * args , ** kwargs ) : \t \t\t if self . debug and self . _got_first_request : \t \t\t\t raise AssertionError ( \"A setup function was called after the \" \"first request was handled.  This usually indicates a bug \" \"in the application where a module was not imported \" \"and decorators or other functionality was called too late.\\n\" \"To fix this make sure to import all your view modules, \" \"database models and everything related at a central place \" \"before the application starts serving requests.\" ) \t \t return f ( self , * args , ** kwargs ) \t \t return update_wrapper ( wrapper_func , f ) \n \n class Flask ( _PackageBoundObject ) : \t \t \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\" \t request_class = Request \t response_class = Response \t jinja_environment = Environment \t app_ctx_globals_class = _AppCtxGlobals \t config_class = Config \t testing = ConfigAttribute ( \"TESTING\" ) \t secret_key = ConfigAttribute ( \"SECRET_KEY\" ) \t session_cookie_name = ConfigAttribute ( \"SESSION_COOKIE_NAME\" ) \t permanent_session_lifetime = ConfigAttribute ( \"PERMANENT_SESSION_LIFETIME\" , get_converter = _make_timedelta ) \t send_file_max_age_default = ConfigAttribute ( \"SEND_FILE_MAX_AGE_DEFAULT\" , get_converter = _make_timedelta ) \t use_x_sendfile = ConfigAttribute ( \"USE_X_SENDFILE\" ) \t json_encoder = json . JSONEncoder \t json_decoder = json . JSONDecoder \t jinja_options = { \"extensions\" : [ \"jinja2.ext.autoescape\" , \"jinja2.ext.with_\" ] } \t default_config = ImmutableDict ( { \"ENV\" : None , \"DEBUG\" : None , \"TESTING\" : False , \"PROPAGATE_EXCEPTIONS\" : None , \"PRESERVE_CONTEXT_ON_EXCEPTION\" : None , \"SECRET_KEY\" : None , \"PERMANENT_SESSION_LIFETIME\" : timedelta ( days = 31 ) , \"USE_X_SENDFILE\" : False , \"SERVER_NAME\" : None , \"APPLICATION_ROOT\" : \"/\" , \"SESSION_COOKIE_NAME\" : \"session\" , \"SESSION_COOKIE_DOMAIN\" : None , \"SESSION_COOKIE_PATH\" : None , \"SESSION_COOKIE_HTTPONLY\" : True , \"SESSION_COOKIE_SECURE\" : False , \"SESSION_COOKIE_SAMESITE\" : None , \"SESSION_REFRESH_EACH_REQUEST\" : True , \"MAX_CONTENT_LENGTH\" : None , \"SEND_FILE_MAX_AGE_DEFAULT\" : timedelta ( hours = 12 ) , \"TRAP_BAD_REQUEST_ERRORS\" : None , \"TRAP_HTTP_EXCEPTIONS\" : False , \"EXPLAIN_TEMPLATE_LOADING\" : False , \"PREFERRED_URL_SCHEME\" : \"http\" , \"JSON_AS_ASCII\" : True , \"JSON_SORT_KEYS\" : True , \"JSONIFY_PRETTYPRINT_REGULAR\" : False , \"JSONIFY_MIMETYPE\" : \"application/json\" , \"TEMPLATES_AUTO_RELOAD\" : None , \"MAX_COOKIE_SIZE\" : 4093 , } ) \t url_rule_class = Rule \t url_map_class = Map \t test_client_class = None \t test_cli_runner_class = None \t session_interface = SecureCookieSessionInterface ( ) \t import_name = None \t template_folder = None \t root_path = None \t def __init__ ( self , import_name , static_url_path = None , static_folder = \"static\" , static_host = None , host_matching = False , subdomain_matching = False , template_folder = \"templates\" , instance_path = None , instance_relative_config = False , root_path = None , ) : \t \t\t _PackageBoundObject . __init__ ( self , import_name , template_folder = template_folder , root_path = root_path ) \t self . static_url_path = static_url_path \t self . static_folder = static_folder \t if instance_path is None : \t \t\t\t instance_path = self . auto_find_instance_path ( ) \t \t elif not os . path . isabs ( instance_path ) : \t \t\t\t raise ValueError ( \"If an instance path is provided it must be absolute.\" \" A relative path was given instead.\" ) \t \t self . instance_path = instance_path \t self . config = self . make_config ( instance_relative_config ) \t self . view_functions = { } \t self . error_handler_spec = { } \t self . url_build_error_handlers = [ ] \t self . before_request_funcs = { } \t self . before_first_request_funcs = [ ] \t self . after_request_funcs = { } \t self . teardown_request_funcs = { } \t self . teardown_appcontext_funcs = [ ] \t self . url_value_preprocessors = { } \t self . url_default_functions = { } \t self . template_context_processors = { None : [ _default_template_ctx_processor ] } \t self . shell_context_processors = [ ] \t self . blueprints = { } \t self . _blueprint_order = [ ] \t self . extensions = { } \t self . url_map = self . url_map_class ( ) \t self . url_map . host_matching = host_matching \t self . subdomain_matching = subdomain_matching \t self . _got_first_request = False \t self . _before_request_lock = Lock ( ) \t if self . has_static_folder : \t \t\t\t assert ( bool ( static_host ) == host_matching ) , \"Invalid static_host/host_matching combination\" \t self . add_url_rule ( self . static_url_path + \"/<path:filename>\" , endpoint = \"static\" , host = static_host , view_func = self . send_static_file , ) \t \t self . cli . name = self . name \t \t @ locked_cached_property \t def name ( self ) : \t \t\t \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\" \t if self . import_name == \"__main__\" : \t \t\t\t fn = getattr ( sys . modules [ \"__main__\" ] , \"__file__\" , None ) \t if fn is None : \t \t\t\t\t return \"__main__\" \t \t return os . path . splitext ( os . path . basename ( fn ) ) [ 0 ] \t \t return self . import_name \t \t @ property \t def propagate_exceptions ( self ) : \t \t\t \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t rv = self . config [ \"PROPAGATE_EXCEPTIONS\" ] \t if rv is not None : \t \t\t\t return rv \t \t return self . testing or self . debug \t \t @ property \t def preserve_context_on_exception ( self ) : \t \t\t \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t rv = self . config [ \"PRESERVE_CONTEXT_ON_EXCEPTION\" ] \t if rv is not None : \t \t\t\t return rv \t \t return self . debug \t \t @ locked_cached_property \t def logger ( self ) : \t \t\t \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\" \t return create_logger ( self ) \t \t @ locked_cached_property \t def jinja_env ( self ) : \t \t\t \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\" \t return self . create_jinja_environment ( ) \t \t @ property \t def got_first_request ( self ) : \t \t\t \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\" \t return self . _got_first_request \t \t def make_config ( self , instance_relative = False ) : \t \t\t \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\" \t root_path = self . root_path \t if instance_relative : \t \t\t\t root_path = self . instance_path \t \t defaults = dict ( self . default_config ) \t defaults [ \"ENV\" ] = get_env ( ) \t defaults [ \"DEBUG\" ] = get_debug_flag ( ) \t return self . config_class ( root_path , defaults ) \t \t def auto_find_instance_path ( self ) : \t \t\t \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\" \t prefix , package_path = find_package ( self . import_name ) \t if prefix is None : \t \t\t\t return os . path . join ( package_path , \"instance\" ) \t \t return os . path . join ( prefix , \"var\" , self . name + \"-instance\" ) \t \t def open_instance_resource ( self , resource , mode = \"rb\" ) : \t \t\t \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\" \t return open ( os . path . join ( self . instance_path , resource ) , mode ) \t \t @ property \t def templates_auto_reload ( self ) : \t \t\t \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\" \t rv = self . config [ \"TEMPLATES_AUTO_RELOAD\" ] \t return rv if rv is not None else self . debug \t \t @ templates_auto_reload . setter \t def templates_auto_reload ( self , value ) : \t \t\t self . config [ \"TEMPLATES_AUTO_RELOAD\" ] = value \t \t def create_jinja_environment ( self ) : \t \t\t \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\" \t options = dict ( self . jinja_options ) \t if \"autoescape\" not in options : \t \t\t\t options [ \"autoescape\" ] = self . select_jinja_autoescape \t \t if \"auto_reload\" not in options : \t \t\t\t options [ \"auto_reload\" ] = self . templates_auto_reload \t \t rv = self . jinja_environment ( self , ** options ) \t rv . globals . update ( url_for = url_for , get_flashed_messages = get_flashed_messages , config = self . config , request = request , session = session , g = g , ) \t rv . filters [ \"tojson\" ] = json . tojson_filter \t return rv \t \t def create_global_jinja_loader ( self ) : \t \t\t \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\" \t return DispatchingJinjaLoader ( self ) \t \t def select_jinja_autoescape ( self , filename ) : \t \t\t \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\" \t if filename is None : \t \t\t\t return True \t \t return filename . endswith ( ( \".html\" , \".htm\" , \".xml\" , \".xhtml\" ) ) \t \t def update_template_context ( self , context ) : \t \t\t \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\" \t funcs = self . template_context_processors [ None ] \t reqctx = _request_ctx_stack . top \t if reqctx is not None : \t \t\t\t bp = reqctx . request . blueprint \t if bp is not None and bp in self . template_context_processors : \t \t\t\t\t funcs = chain ( funcs , self . template_context_processors [ bp ] ) \t \t \t orig_ctx = context . copy ( ) \t for func in funcs : \t \t\t\t context . update ( func ( ) ) \t \t context . update ( orig_ctx ) \t \t def make_shell_context ( self ) : \t \t\t \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\" \t rv = { \"app\" : self , \"g\" : g } \t for processor in self . shell_context_processors : \t \t\t\t rv . update ( processor ( ) ) \t \t return rv \t \t env = ConfigAttribute ( \"ENV\" ) \t @ property \t def debug ( self ) : \t \t\t \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\" \t return self . config [ \"DEBUG\" ] \t \t @ debug . setter \t def debug ( self , value ) : \t \t\t self . config [ \"DEBUG\" ] = value \t self . jinja_env . auto_reload = self . templates_auto_reload \t \t def run ( self , host = None , port = None , debug = None , load_dotenv = True , ** options ) : \t \t\t \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\" \t if os . environ . get ( \"FLASK_RUN_FROM_CLI\" ) == \"true\" : \t \t\t\t from . debughelpers import explain_ignored_app_run \t explain_ignored_app_run ( ) \t return \t \t if get_load_dotenv ( load_dotenv ) : \t \t\t\t cli . load_dotenv ( ) \t if \"FLASK_ENV\" in os . environ : \t \t\t\t\t self . env = get_env ( ) \t self . debug = get_debug_flag ( ) \t \t elif \"FLASK_DEBUG\" in os . environ : \t \t\t\t\t self . debug = get_debug_flag ( ) \t \t \t if debug is not None : \t \t\t\t self . debug = bool ( debug ) \t \t _host = \"127.0.0.1\" \t _port = 5000 \t server_name = self . config . get ( \"SERVER_NAME\" ) \t sn_host , sn_port = None , None \t if server_name : \t \t\t\t sn_host , _ , sn_port = server_name . partition ( \":\" ) \t \t host = host or sn_host or _host \t port = int ( next ( ( p for p in ( port , sn_port ) if p is not None ) , _port ) ) \t options . setdefault ( \"use_reloader\" , self . debug ) \t options . setdefault ( \"use_debugger\" , self . debug ) \t options . setdefault ( \"threaded\" , True ) \t cli . show_server_banner ( self . env , self . debug , self . name , False ) \t from werkzeug . serving import run_simple \t try : \t \t\t\t run_simple ( host , port , self , ** options ) \t \t finally : \t \t\t\t self . _got_first_request = False \t \t \t def test_client ( self , use_cookies = True , ** kwargs ) : \t \t\t \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\" \t cls = self . test_client_class \t if cls is None : \t \t\t\t from . testing import FlaskClient as cls \t \t return cls ( self , self . response_class , use_cookies = use_cookies , ** kwargs ) \t \t def test_cli_runner ( self , ** kwargs ) : \t \t\t \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\" \t cls = self . test_cli_runner_class \t if cls is None : \t \t\t\t from . testing import FlaskCliRunner as cls \t \t return cls ( self , ** kwargs ) \t \t def open_session ( self , request ) : \t \t\t \"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"open_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.open_session\" instead.' ) ) \t return self . session_interface . open_session ( self , request ) \t \t def save_session ( self , session , response ) : \t \t\t \"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"save_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.save_session\" instead.' ) ) \t return self . session_interface . save_session ( self , session , response ) \t \t def make_null_session ( self ) : \t \t\t \"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"make_null_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.make_null_session\" instead.' ) ) \t return self . session_interface . make_null_session ( self ) \t \t @ setupmethod \t def register_blueprint ( self , blueprint , ** options ) : \t \t\t \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\" \t first_registration = False \t if blueprint . name in self . blueprints : \t \t\t\t assert self . blueprints [ blueprint . name ] is blueprint , ( \"A name collision occurred between blueprints %r and %r. Both\" ' share the same name \"%s\". Blueprints that are created on the' \" fly need unique names.\" % ( blueprint , self . blueprints [ blueprint . name ] , blueprint . name ) ) \t \t else : \t \t\t\t self . blueprints [ blueprint . name ] = blueprint \t self . _blueprint_order . append ( blueprint ) \t first_registration = True \t \t blueprint . register ( self , options , first_registration ) \t \t def iter_blueprints ( self ) : \t \t\t \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\" \t return iter ( self . _blueprint_order ) \t \t @ setupmethod \t def add_url_rule ( self , rule , endpoint = None , view_func = None , provide_automatic_options = None , ** options ) : \t \t\t \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t if endpoint is None : \t \t\t\t endpoint = _endpoint_from_view_func ( view_func ) \t \t options [ \"endpoint\" ] = endpoint \t methods = options . pop ( \"methods\" , None ) \t if methods is None : \t \t\t\t methods = getattr ( view_func , \"methods\" , None ) or ( \"GET\" , ) \t \t if isinstance ( methods , string_types ) : \t \t\t\t raise TypeError ( \"Allowed methods have to be iterables of strings, \" 'for example: @app.route(..., methods=[\"POST\"])' ) \t \t methods = set ( item . upper ( ) for item in methods ) \t required_methods = set ( getattr ( view_func , \"required_methods\" , ( ) ) ) \t if provide_automatic_options is None : \t \t\t\t provide_automatic_options = getattr ( view_func , \"provide_automatic_options\" , None ) \t \t if provide_automatic_options is None : \t \t\t\t if \"OPTIONS\" not in methods : \t \t\t\t\t provide_automatic_options = True \t required_methods . add ( \"OPTIONS\" ) \t \t else : \t \t\t\t\t provide_automatic_options = False \t \t \t methods |= required_methods \t rule = self . url_rule_class ( rule , methods = methods , ** options ) \t rule . provide_automatic_options = provide_automatic_options \t self . url_map . add ( rule ) \t if view_func is not None : \t \t\t\t old_func = self . view_functions . get ( endpoint ) \t if old_func is not None and old_func != view_func : \t \t\t\t\t raise AssertionError ( \"View function mapping is overwriting an \" \"existing endpoint function: %s\" % endpoint ) \t \t self . view_functions [ endpoint ] = view_func \t \t \t def route ( self , rule , ** options ) : \t \t\t \"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t endpoint = options . pop ( \"endpoint\" , None ) \t self . add_url_rule ( rule , endpoint , f , ** options ) \t return f \t \t return decorator \t \t @ setupmethod \t def endpoint ( self , endpoint ) : \t \t\t \"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . view_functions [ endpoint ] = f \t return f \t \t return decorator \t \t @ staticmethod \t def _get_exc_class_and_code ( exc_class_or_code ) : \t \t\t \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\" \t if isinstance ( exc_class_or_code , integer_types ) : \t \t\t\t exc_class = default_exceptions [ exc_class_or_code ] \t \t else : \t \t\t\t exc_class = exc_class_or_code \t \t assert issubclass ( exc_class , Exception ) \t if issubclass ( exc_class , HTTPException ) : \t \t\t\t return exc_class , exc_class . code \t \t else : \t \t\t\t return exc_class , None \t \t \t @ setupmethod \t def errorhandler ( self , code_or_exception ) : \t \t\t \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . _register_error_handler ( None , code_or_exception , f ) \t return f \t \t return decorator \t \t @ setupmethod \t def register_error_handler ( self , code_or_exception , f ) : \t \t\t \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\" \t self . _register_error_handler ( None , code_or_exception , f ) \t \t @ setupmethod \t def _register_error_handler ( self , key , code_or_exception , f ) : \t \t\t \"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\" \t if isinstance ( code_or_exception , HTTPException ) : \t \t\t\t raise ValueError ( \"Tried to register a handler for an exception instance {0!r}.\" \" Handlers can only be registered for exception classes or\" \" HTTP error codes.\" . format ( code_or_exception ) ) \t \t try : \t \t\t\t exc_class , code = self . _get_exc_class_and_code ( code_or_exception ) \t \t except KeyError : \t \t\t\t raise KeyError ( \"'{0}' is not a recognized HTTP error code. Use a subclass of\" \" HTTPException with that code instead.\" . format ( code_or_exception ) ) \t \t handlers = self . error_handler_spec . setdefault ( key , { } ) . setdefault ( code , { } ) \t handlers [ exc_class ] = f \t \t @ setupmethod \t def template_filter ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_filter ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_filter ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . filters [ name or f . __name__ ] = f \t \t @ setupmethod \t def template_test ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_test ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_test ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . tests [ name or f . __name__ ] = f \t \t @ setupmethod \t def template_global ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_global ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_global ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . globals [ name or f . __name__ ] = f \t \t @ setupmethod \t def before_request ( self , f ) : \t \t\t \"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\" \t self . before_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def before_first_request ( self , f ) : \t \t\t \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\" \t self . before_first_request_funcs . append ( f ) \t return f \t \t @ setupmethod \t def after_request ( self , f ) : \t \t\t \"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\" \t self . after_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def teardown_request ( self , f ) : \t \t\t \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\" \t self . teardown_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def teardown_appcontext ( self , f ) : \t \t\t \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\" \t self . teardown_appcontext_funcs . append ( f ) \t return f \t \t @ setupmethod \t def context_processor ( self , f ) : \t \t\t \"\"\"Registers a template context processor function.\"\"\" \t self . template_context_processors [ None ] . append ( f ) \t return f \t \t @ setupmethod \t def shell_context_processor ( self , f ) : \t \t\t \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\" \t self . shell_context_processors . append ( f ) \t return f \t \t @ setupmethod \t def url_value_preprocessor ( self , f ) : \t \t\t \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\" \t self . url_value_preprocessors . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def url_defaults ( self , f ) : \t \t\t \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\" \t self . url_default_functions . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t def _find_error_handler ( self , e ) : \t \t\t \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\" \t exc_class , code = self . _get_exc_class_and_code ( type ( e ) ) \t for name , c in ( ( request . blueprint , code ) , ( None , code ) , ( request . blueprint , None ) , ( None , None ) , ) : \t \t\t\t handler_map = self . error_handler_spec . setdefault ( name , { } ) . get ( c ) \t if not handler_map : \t \t\t\t\t continue \t \t for cls in exc_class . __mro__ : \t \t\t\t\t handler = handler_map . get ( cls ) \t if handler is not None : \t \t\t\t\t\t return handler \t \t \t \t \t def handle_http_exception ( self , e ) : \t \t\t \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\" \t if e . code is None : \t \t\t\t return e \t \t if isinstance ( e , RoutingException ) : \t \t\t\t return e \t \t handler = self . _find_error_handler ( e ) \t if handler is None : \t \t\t\t return e \t \t return handler ( e ) \t \t def trap_http_exception ( self , e ) : \t \t\t \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\" \t if self . config [ \"TRAP_HTTP_EXCEPTIONS\" ] : \t \t\t\t return True \t \t trap_bad_request = self . config [ \"TRAP_BAD_REQUEST_ERRORS\" ] \t if ( trap_bad_request is None and self . debug and isinstance ( e , BadRequestKeyError ) ) : \t \t\t\t return True \t \t if trap_bad_request : \t \t\t\t return isinstance ( e , BadRequest ) \t \t return False \t \t def handle_user_exception ( self , e ) : \t \t\t \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t assert exc_value is e \t if isinstance ( e , BadRequestKeyError ) : \t \t\t\t if self . debug or self . config [ \"TRAP_BAD_REQUEST_ERRORS\" ] : \t \t\t\t\t e . show_exception = True \t if e . args [ 0 ] not in e . get_description ( ) : \t \t\t\t\t\t e . description = \"KeyError: '{}'\" . format ( * e . args ) \t \t \t elif not hasattr ( BadRequestKeyError , \"show_exception\" ) : \t \t\t\t\t e . args = ( ) \t \t \t if isinstance ( e , HTTPException ) and not self . trap_http_exception ( e ) : \t \t\t\t return self . handle_http_exception ( e ) \t \t handler = self . _find_error_handler ( e ) \t if handler is None : \t \t\t\t reraise ( exc_type , exc_value , tb ) \t \t return handler ( e ) \t \t def handle_exception ( self , e ) : \t \t\t \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t got_request_exception . send ( self , exception = e ) \t if self . propagate_exceptions : \t \t\t\t if exc_value is e : \t \t\t\t\t reraise ( exc_type , exc_value , tb ) \t \t else : \t \t\t\t\t raise e \t \t \t self . log_exception ( ( exc_type , exc_value , tb ) ) \t server_error = InternalServerError ( ) \t server_error . original_exception = e \t handler = self . _find_error_handler ( server_error ) \t if handler is not None : \t \t\t\t server_error = handler ( server_error ) \t \t return self . finalize_request ( server_error , from_error_handler = True ) \t \t def log_exception ( self , exc_info ) : \t \t\t \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\" \t self . logger . error ( \"Exception on %s [%s]\" % ( request . path , request . method ) , exc_info = exc_info ) \t \t def raise_routing_exception ( self , request ) : \t \t\t \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\" \t if ( not self . debug or not isinstance ( request . routing_exception , RequestRedirect ) or request . method in ( \"GET\" , \"HEAD\" , \"OPTIONS\" ) ) : \t \t\t\t raise request . routing_exception \t \t from . debughelpers import FormDataRoutingRedirect \t raise FormDataRoutingRedirect ( request ) \t \t def dispatch_request ( self ) : \t \t\t \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\" \t req = _request_ctx_stack . top . request \t if req . routing_exception is not None : \t \t\t\t self . raise_routing_exception ( req ) \t \t rule = req . url_rule \t if ( getattr ( rule , \"provide_automatic_options\" , False ) and req . method == \"OPTIONS\" ) : \t \t\t\t return self . make_default_options_response ( ) \t \t return self . view_functions [ rule . endpoint ] ( ** req . view_args ) \t \t def full_dispatch_request ( self ) : \t \t\t \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\" \t self . try_trigger_before_first_request_functions ( ) \t try : \t \t\t\t request_started . send ( self ) \t rv = self . preprocess_request ( ) \t if rv is None : \t \t\t\t\t rv = self . dispatch_request ( ) \t \t \t except Exception as e : \t \t\t\t rv = self . handle_user_exception ( e ) \t \t return self . finalize_request ( rv ) \t \t def finalize_request ( self , rv , from_error_handler = False ) : \t \t\t \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\" \t response = self . make_response ( rv ) \t try : \t \t\t\t response = self . process_response ( response ) \t request_finished . send ( self , response = response ) \t \t except Exception : \t \t\t\t if not from_error_handler : \t \t\t\t\t raise \t \t self . logger . exception ( \"Request finalizing failed with an error while handling an error\" ) \t \t return response \t \t def try_trigger_before_first_request_functions ( self ) : \t \t\t \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\" \t if self . _got_first_request : \t \t\t\t return \t \t with self . _before_request_lock : \t \t\t\t if self . _got_first_request : \t \t\t\t\t return \t \t for func in self . before_first_request_funcs : \t \t\t\t\t func ( ) \t \t self . _got_first_request = True \t \t \t def make_default_options_response ( self ) : \t \t\t \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\" \t adapter = _request_ctx_stack . top . url_adapter \t methods = adapter . allowed_methods ( ) \t rv = self . response_class ( ) \t rv . allow . update ( methods ) \t return rv \t \t def should_ignore_error ( self , error ) : \t \t\t \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\" \t return False \t \t def make_response ( self , rv ) : \t \t\t \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\" \t status = headers = None \t if isinstance ( rv , tuple ) : \t \t\t\t len_rv = len ( rv ) \t if len_rv == 3 : \t \t\t\t\t rv , status , headers = rv \t \t elif len_rv == 2 : \t \t\t\t\t if isinstance ( rv [ 1 ] , ( Headers , dict , tuple , list ) ) : \t \t\t\t\t\t rv , headers = rv \t \t else : \t \t\t\t\t\t rv , status = rv \t \t \t else : \t \t\t\t\t raise TypeError ( \"The view function did not return a valid response tuple.\" \" The tuple must have the form (body, status, headers),\" \" (body, status), or (body, headers).\" ) \t \t \t if rv is None : \t \t\t\t raise TypeError ( \"The view function did not return a valid response. The\" \" function either returned None or ended without a return\" \" statement.\" ) \t \t if not isinstance ( rv , self . response_class ) : \t \t\t\t if isinstance ( rv , ( text_type , bytes , bytearray ) ) : \t \t\t\t\t rv = self . response_class ( rv , status = status , headers = headers ) \t status = headers = None \t \t elif isinstance ( rv , dict ) : \t \t\t\t\t rv = jsonify ( rv ) \t \t elif isinstance ( rv , BaseResponse ) or callable ( rv ) : \t \t\t\t\t try : \t \t\t\t\t\t rv = self . response_class . force_type ( rv , request . environ ) \t \t except TypeError as e : \t \t\t\t\t\t new_error = TypeError ( \"{e}\\nThe view function did not return a valid\" \" response. The return type must be a string, dict, tuple,\" \" Response instance, or WSGI callable, but it was a\" \" {rv.__class__.__name__}.\" . format ( e = e , rv = rv ) ) \t reraise ( TypeError , new_error , sys . exc_info ( ) [ 2 ] ) \t \t \t else : \t \t\t\t\t raise TypeError ( \"The view function did not return a valid\" \" response. The return type must be a string, dict, tuple,\" \" Response instance, or WSGI callable, but it was a\" \" {rv.__class__.__name__}.\" . format ( rv = rv ) ) \t \t \t if status is not None : \t \t\t\t if isinstance ( status , ( text_type , bytes , bytearray ) ) : \t \t\t\t\t rv . status = status \t \t else : \t \t\t\t\t rv . status_code = status \t \t \t if headers : \t \t\t\t rv . headers . extend ( headers ) \t \t return rv \t \t def create_url_adapter ( self , request ) : \t \t\t \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\" \t if request is not None : \t \t\t\t subdomain = ( ( self . url_map . default_subdomain or None ) if not self . subdomain_matching else None ) \t return self . url_map . bind_to_environ ( request . environ , server_name = self . config [ \"SERVER_NAME\" ] , subdomain = subdomain , ) \t \t if self . config [ \"SERVER_NAME\" ] is not None : \t \t\t\t return self . url_map . bind ( self . config [ \"SERVER_NAME\" ] , script_name = self . config [ \"APPLICATION_ROOT\" ] , url_scheme = self . config [ \"PREFERRED_URL_SCHEME\" ] , ) \t \t \t def inject_url_defaults ( self , endpoint , values ) : \t \t\t \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\" \t funcs = self . url_default_functions . get ( None , ( ) ) \t if \".\" in endpoint : \t \t\t\t bp = endpoint . rsplit ( \".\" , 1 ) [ 0 ] \t funcs = chain ( funcs , self . url_default_functions . get ( bp , ( ) ) ) \t \t for func in funcs : \t \t\t\t func ( endpoint , values ) \t \t \t def handle_url_build_error ( self , error , endpoint , values ) : \t \t\t \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t for handler in self . url_build_error_handlers : \t \t\t\t try : \t \t\t\t\t rv = handler ( error , endpoint , values ) \t if rv is not None : \t \t\t\t\t\t return rv \t \t \t except BuildError as e : \t \t\t\t\t error = e \t \t \t if error is exc_value : \t \t\t\t reraise ( exc_type , exc_value , tb ) \t \t raise error \t \t def preprocess_request ( self ) : \t \t\t \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\" \t bp = _request_ctx_stack . top . request . blueprint \t funcs = self . url_value_preprocessors . get ( None , ( ) ) \t if bp is not None and bp in self . url_value_preprocessors : \t \t\t\t funcs = chain ( funcs , self . url_value_preprocessors [ bp ] ) \t \t for func in funcs : \t \t\t\t func ( request . endpoint , request . view_args ) \t \t funcs = self . before_request_funcs . get ( None , ( ) ) \t if bp is not None and bp in self . before_request_funcs : \t \t\t\t funcs = chain ( funcs , self . before_request_funcs [ bp ] ) \t \t for func in funcs : \t \t\t\t rv = func ( ) \t if rv is not None : \t \t\t\t\t return rv \t \t \t \t def process_response ( self , response ) : \t \t\t \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\" \t ctx = _request_ctx_stack . top \t bp = ctx . request . blueprint \t funcs = ctx . _after_request_functions \t if bp is not None and bp in self . after_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . after_request_funcs [ bp ] ) ) \t \t if None in self . after_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . after_request_funcs [ None ] ) ) \t \t for handler in funcs : \t \t\t\t response = handler ( response ) \t \t if not self . session_interface . is_null_session ( ctx . session ) : \t \t\t\t self . session_interface . save_session ( self , ctx . session , response ) \t \t return response \t \t def do_teardown_request ( self , exc = _sentinel ) : \t \t\t \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\" \t if exc is _sentinel : \t \t\t\t exc = sys . exc_info ( ) [ 1 ] \t \t funcs = reversed ( self . teardown_request_funcs . get ( None , ( ) ) ) \t bp = _request_ctx_stack . top . request . blueprint \t if bp is not None and bp in self . teardown_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . teardown_request_funcs [ bp ] ) ) \t \t for func in funcs : \t \t\t\t func ( exc ) \t \t request_tearing_down . send ( self , exc = exc ) \t \t def do_teardown_appcontext ( self , exc = _sentinel ) : \t \t\t \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t if exc is _sentinel : \t \t\t\t exc = sys . exc_info ( ) [ 1 ] \t \t for func in reversed ( self . teardown_appcontext_funcs ) : \t \t\t\t func ( exc ) \t \t appcontext_tearing_down . send ( self , exc = exc ) \t \t def app_context ( self ) : \t \t\t \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t return AppContext ( self ) \t \t def request_context ( self , environ ) : \t \t\t \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\" \t return RequestContext ( self , environ ) \t \t def test_request_context ( self , * args , ** kwargs ) : \t \t\t \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\" \t from . testing import EnvironBuilder \t builder = EnvironBuilder ( self , * args , ** kwargs ) \t try : \t \t\t\t return self . request_context ( builder . get_environ ( ) ) \t \t finally : \t \t\t\t builder . close ( ) \t \t \t def wsgi_app ( self , environ , start_response ) : \t \t\t \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\" \t ctx = self . request_context ( environ ) \t error = None \t try : \t \t\t\t try : \t \t\t\t\t ctx . push ( ) \t response = self . full_dispatch_request ( ) \t \t except Exception as e : \t \t\t\t\t error = e \t response = self . handle_exception ( e ) \t \t except : \t \t\t\t\t error = sys . exc_info ( ) [ 1 ] \t raise \t \t return response ( environ , start_response ) \t \t finally : \t \t\t\t if self . should_ignore_error ( error ) : \t \t\t\t\t error = None \t \t ctx . auto_pop ( error ) \t \t \t def __call__ ( self , environ , start_response ) : \t \t\t \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\" \t return self . wsgi_app ( environ , start_response ) \t \t def __repr__ ( self ) : \t \t\t return \"<%s %r>\" % ( self . __class__ . __name__ , self . name ) \n \n \n < EOF >","type":"boolean","boost":1.0}}},{"match":{"t2src":{"query":"NSNimport SNimportW NimportWN importWNimport WNimportW NimportWN importWNimport WNimportW NimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.import from.importW .importWN importWNfrom WNfrom. Nfrom.import from.importW .importWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNW WNW= NW=W W=W( =W() W()N ()Ndef )NdefW NdefW( defW(W W(W) (W): W):N ):NI :NIif NIifnot IifnotW ifnotW( notW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnW( returnW(W W(W= (W=W W=W) =W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W): W):N ):NI :NIif NIifW IifW. ifW.W W.Wand .WandW WandW. andW.W W.W: .W:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSSS SSSS SSSS SSSS SSS) SS)N S)ND )NDreturn NDreturnW DreturnW( returnW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W)N W)ND )NDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDclass NDclassW DclassW( classW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S, (S,W S,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W( =W(S W(S, (S,W S,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W. =W.W W.WN .WNW WNW= NW=W W=W. =W.W W.WN .WNW WNW= NW={ W={S ={S: {S:[ S:[S :[S, [S,S S,S] ,S]} S]}N ]}NW }NW= NW=W W=W( =W({ W({S ({S: {S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:W S:W( :W(W W(W= (W=V W=V) =V), V),S ),S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:S S:S, :S,S S,S: ,S:S S:S, :S,S S,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:True S:True, :True,S True,S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:True S:True, :True,S True,S: ,S:None S:None, :None,S None,S: ,S:W S:W( :W(W W(W= (W=V W=V) =V), V),S ),S: ,S:None S:None, :None,S None,S: ,S:False S:False, :False,S False,S: ,S:False S:False, :False,S False,S: ,S:S S:S, :S,S S,S: ,S:True S:True, :True,S True,S: ,S:True S:True, :True,S True,S: ,S:False S:False, :False,S False,S: ,S:S S:S, :S,S S,S: ,S:None S:None, :None,S None,S: ,S:V S:V, :V,} V,}) ,})N })NW )NW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNW NoneNW= NW=W W=W( =W() W()N ()NW )NW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNdef NoneNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None, =None,W None,W= ,W=S W=S, =S,W S,W= ,W=None W=None, =None,W None,W= ,W=False W=False, =False,W False,W= ,W=False W=False, =False,W False,W= ,W=S W=S, =S,W S,W= ,W=None W=None, =None,W None,W= ,W=False W=False, =False,W False,W= ,W=None W=None, =None,) None,): ,):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W) =W)N W)NW )NW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=WN =WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()N ()ND )NDelif NDelifnot DelifnotW elifnotW. notW.W W.W. .W.W W.W( .W(W W(W) (W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS) SS)N S)ND )NDW NDW. DW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={None ={None: {None:[ None:[W :[W] [W]} W]}N ]}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=False W=FalseN =FalseNW FalseNW. NW.W W.W= .W=W W=W( =W() W()N ()Nif )NifW NifW. ifW.W W.W: .W:N W:NI :NIassert NIassert( Iassert(W assert(W( (W(W W(W) (W)== W)==W )==W) ==W), W),S ),SN ,SNW SNW. NW.W W.W( .W(W W(W. (W.W W.W+ .W+S W+S, +S,W S,W= ,W=S W=S, =S,W S,W= ,W=W W=W, =W,W W,W= ,W=W W=W. =W.W W.W, .W,) W,)N ,)ND )NDW NDW. DW.W W.W. .W.W W.W= .W=W W=W. =W.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W== .W==S W==S: ==S:N S:NI :NIW NIW= IW=W W=W( =W(W W(W. (W.W W.W[ .W[S W[S] [S], S],S ],S, ,S,None S,None) ,None)N None)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnS IreturnSN returnSND SNDreturn NDreturnW DreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W. .W.W W.W( .W(W W(W) (W)) W))[ ))[V )[V] [V]N V]ND ]NDreturn NDreturnW DreturnW. returnW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW. returnW.W W.Wor .WorW WorW. orW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW. returnW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W( .W() W()N ()ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.WN .WND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=False W=False) =False): False):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifW: ifW:N W:NI :NIW NIW= IW=W W=W. =W.W W.WN .WND WNDW NDW= DW=W W=W( =W(W W(W. (W.W W.W) .W)N W)NW )NW[ NW[S W[S] [S]= S]=W ]=W( =W() W()N ()NW )NW[ NW[S W[S] [S]= S]=W ]=W( =W() W()N ()Nreturn )NreturnW NreturnW. returnW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W= ,W=W W=W( =W(W W(W. (W.W W.W) .W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S) ,S)N S)ND )NDreturn NDreturnW DreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S, ,S,W S,W. ,W.W W.W+ .W+S W+S) +S)N S)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=S W=S) =S): S):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W. (W.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W) ,W), W),W ),W) ,W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nreturn ]NreturnW NreturnWif returnWifW WifWis ifWisnot WisnotNone isnotNoneelse notNoneelseW NoneelseW. elseW.W W.WN .WND WND@ ND@W D@W. @W.W W.WN .WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]= S]=W ]=WN =WND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W( =W(W W(W. (W.W W.W) .W)N W)Nif )NifS NifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW[ IW[S W[S] [S]= S]=W ]=W. =W.W W.WN .WND WNDif NDifS DifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW[ IW[S W[S] [S]= S]=W ]=W. =W.W W.WN .WND WNDW NDW= DW=W W=W. =W.W W.W( .W(W W(W, (W,** W,**W ,**W) **W)N W)NW )NW. NW.W W.W. .W.W W.W( .W(W W(W= (W=W W=W, =W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W. =W.W W.W, .W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W, =W,) W,)N ,)NW )NW. NW.W W.W[ .W[S W[S] [S]= S]=W ]=W. =W.W W.WN .WNreturn WNreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDreturn NDreturnW DreturnW. returnW.W W.W( .W(( W((S ((S, (S,S S,S, ,S,S S,S, ,S,S S,S) ,S)) S))N ))ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[None W[None] [None]N None]NW ]NW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDD NDDW DDW= DW=W W=W. =W.W W.W( .W() W()N ()Nfor )NforW NforWin forWinW WinW: inW:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW={ W={S ={S: {S:W S:W, :W,S W,S: ,S:W S:W} :W}N W}Nfor }NforW NforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDreturn NDreturnW DreturnWN returnWND WNDW NDW= DW=W W=W( =W(S W(S) (S)N S)N@ )N@W N@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W[ .W[S W[S] [S]N S]ND ]ND@ ND@W D@W. @W.W W.WN .WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]= S]=W ]=WN =WNW WNW. NW.W W.W. .W.W W.W= .W=W W=W. =W.W W.WN .WND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=True W=True, =True,** True,**W ,**W) **W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W. .W.W W.W( .W(S W(S) (S)== S)==S )==S: ==S:N S:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWN importWNW WNW( NW() W()N ()Nreturn )NreturnN NreturnND returnNDif NDifW DifW( ifW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W() W()N ()Nif )NifS NifSin ifSinW SinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W= .W=W W=W( =W() W()N ()NW )NW. NW.W W.W= .W=W W=W( =W() W()N ()ND )NDelif NDelifS DelifSin elifSinW SinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W= .W=W W=W( =W() W()N ()ND )NDD NDDif DDifW DifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW. IW.W W.W= .W=W W=W( =W(W W(W) (W)N W)ND )NDW NDW= DW=S W=SN =SNW SNW= NW=V W=VN =VNW VNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(S W(S) (S)N S)NW )NW, NW,W W,W= ,W=None W=None, =None,None None,NoneN ,NoneNif NoneNifW NifW: ifW:N W:NI :NIW NIW, IW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W(S W(S) (S)N S)ND )NDW NDW= DW=W W=Wor =WorW WorWor orWorW WorWN orWNW WNW= NW=W W=W( =W(W W(W( (W(( W((W ((Wfor (WforW WforWin forWin( Win(W in(W, (W,W W,W) ,W)if W)ifW )ifWis ifWisnot WisnotNone isnotNone) notNone), None),W ),W) ,W)) W))N ))NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,True S,True) ,True)N True)NW )NW. NW.W W.W( .W(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W, .W,W W,W. ,W.W W.W, .W,False W,False) ,False)N False)Nfrom )NfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNtry WNtry: Ntry:N try:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W, ,W,** W,**W ,**W) **W)N W)ND )NDfinally NDfinally: Dfinally:N finally:NI :NIW NIW. IW.W W.W= .W=False W=FalseN =FalseND FalseNDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W= ,W=True W=True, =True,** True,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWas importWasW WasWN asWND WNDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W= ,W=W W=W, =W,** W,**W ,**W) **W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWas importWasW WasWN asWND WNDreturn NDreturnW DreturnW( returnW(W W(W, (W,** W,**W ,**W) **W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=False W=FalseN =FalseNif FalseNifW NifW. ifW.W W.Win .WinW WinW. inW.W W.W: .W:N W:NI :NIassert NIassertW IassertW. assertW.W W.W[ .W[W W[W. [W.W W.W] .W]is W]isW ]isW, isW,( W,(S ,(SS (SSS SSS% SS%( S%(W %(W, (W,W W,W. ,W.W W.W[ .W[W W[W. [W.W W.W] .W], W],W ],W. ,W.W W.W) .W)) W))N ))ND )NDelse NDelse: Delse:N else:NI :NIW NIW. IW.W W.W[ .W[W W[W. [W.W W.W] .W]= W]=W ]=WN =WNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NW )NW= NW=True W=TrueN =TrueND TrueNDW NDW. DW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W. (W.W W.W) .W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,** None,**W ,**W) **W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDW NDW[ DW[S W[S] [S]= S]=W ]=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(S W(S, (S,None S,None) ,None)N None)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,S W,S, ,S,None S,None) ,None)or None)or( )or(S or(S, (S,) S,)N ,)ND )NDif NDifW DifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS) SS)N S)ND )NDW NDW= DW=W W=W( =W(W W(W. (W.W W.W( .W() W()for ()forW )forWin forWinW WinW) inW)N W)NW )NW= NW=W W=W( =W(W W(W( (W(W W(W, (W,S W,S, ,S,( S,() ,()) ())) )))N ))Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,S W,S, ,S,None S,None) ,None)N None)ND )NDif NDifW DifWis ifWisNone WisNone: isNone:N None:NI :NIif NIifS IifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW= IW=True W=TrueN =TrueNW TrueNW. NW.W W.W( .W(S W(S) (S)N S)ND )NDelse NDelse: Delse:N else:NI :NIW NIW= IW=False W=FalseN =FalseND FalseNDD NDDW DDW|= DW|=W W|=WN |=WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W, =W,** W,**W ,**W) **W)N W)NW )NW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandW!= andW!=W W!=W: !=W:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS% SS%W S%W) %W)N W)ND )NDW NDW. DW.W W.W[ .W[W W[W] [W]= W]=W ]=WN =WND WNDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW= IW=W W=W. =W.W W.W( .W(S W(S, (S,None S,None) ,None)N None)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W, ,W,** W,**W ,**W) **W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W[ .W[W W[W] [W]= W]=W ]=WN =WNreturn WNreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W[ =W[W W[W] [W]N W]ND ]NDelse NDelse: Delse:N else:NI :NIW NIW= IW=W W=WN =WND WNDassert NDassertW DassertW( assertW(W W(W, (W,W W,W) ,W)N W)Nif )NifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnW, returnW,W W,W. ,W.W W.WN .WND WNDelse NDelse: Delse:N else:NI :NIreturn NIreturnW IreturnW, returnW,None W,NoneN ,NoneND NoneNDD NDD@ DD@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(None W(None, (None,W None,W, ,W,W W,W) ,W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(None W(None, (None,W None,W, ,W,W W,W) ,W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDtry NDtry: Dtry:N try:NI :NIW NIW, IW,W W,W= ,W=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDexcept NDexceptW DexceptW: exceptW:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDW NDW= DW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W, (W,{ W,{} ,{}) {})N })NW )NW[ NW[W W[W] [W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W[ .W[None W[None] [None]. None].W ].W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W= ,W=W W=W. =W.W W.W( .W(W W(W( (W(W W(W) (W)) W))N ))Nfor )NforW NforW, forW,W W,Win ,Win( Win(( in((W ((W. (W.W W.W, .W,W W,W) ,W), W),( ),(None ,(None, (None,W None,W) ,W), W),( ),(W ,(W. (W.W W.W, .W,None W,None) ,None), None),( ),(None ,(None, (None,None None,None) ,None), None),) ),): ,):N ):NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W) (W)N W)Nif )Nifnot NifnotW ifnotW: notW:N W:NI :NIcontinue NIcontinueN IcontinueND continueNDfor NDforW DforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDD DDDD DDDdef DDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.Wis .WisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDif NDifW DifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnWN returnWND WNDW NDW= DW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDW NDW= DW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]Nif( Nif(W if(Wis (WisNone WisNoneand isNoneandW NoneandW. andW.W W.Wand .WandW WandW( andW(W W(W, (W,W W,W) ,W)) W)): )):N ):NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDif NDifW DifW: ifW:N W:NI :NIreturn NIreturnW IreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDreturn NDreturnFalse DreturnFalseN returnFalseND FalseNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()Nassert )NassertW NassertWis assertWisW WisWN isWNif WNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIif NIifW IifW. ifW.W W.Wor .WorW WorW. orW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIW NIW. IW.W W.W= .W=True W=TrueN =TrueNif TrueNifW NifW. ifW.W W.W[ .W[V W[V] [V]not V]notin ]notinW notinW. inW.W W.W( .W() W(): ():N ):NI :NIW NIW. IW.W W.W= .W=S W=S. =S.W S.W( .W(* W(*W (*W. *W.W W.W) .W)N W)ND )NDD NDDelif DDelifnot DelifnotW elifnotW( notW(W W(W, (W,S W,S) ,S): S):N ):NI :NIW NIW. IW.W W.W= .W=( W=() =()N ()ND )NDD NDDif DDifW DifW( ifW(W W(W, (W,W W,W) ,W)and W)andnot )andnotW andnotW. notW.W W.W( .W(W W(W) (W): W):N ):NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W(W W(W) (W)N W)ND )NDW NDW= DW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDreturn NDreturnW DreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nif )NifW NifW. ifW.W W.W: .W:N W:NI :NIif NIifW IifWis ifWisW WisW: isW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDelse NDelse: Delse:N else:NI :NIraise NIraiseW IraiseWN raiseWND WNDD NDDW DDW. DW.W W.W( .W(( W((W ((W, (W,W W,W, ,W,W W,W) ,W)) W))N ))NW )NW= NW=W W=W( =W() W()N ()NW )NW. NW.W W.W= .W=W W=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnW. returnW.W W.W( .W(W W(W, (W,W W,W= ,W=True W=True) =True)N True)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(S W(S% (S%( S%(W %(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W), W),W ),W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNif( Nif(not if(notW (notW. notW.W W.Wor .Wornot WornotW ornotW( notW(W W(W. (W.W W.W, .W,W W,W) ,W)or W)orW )orW. orW.W W.Win .Win( Win(S in(S, (S,S S,S, ,S,S S,S) ,S)) S)): )):N ):NI :NIraise NIraiseW IraiseW. raiseW.W W.WN .WND WNDfrom NDfrom. Dfrom.W from.Wimport .WimportW WimportWN importWNraise WNraiseW NraiseW( raiseW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNif WNifW NifW. ifW.W W.Wis .Wisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)ND )NDW NDW= DW=W W=W. =W.W W.WN .WNif WNif( Nif(W if(W( (W(W W(W, (W,S W,S, ,S,False S,False) ,False)and False)andW )andW. andW.W W.W== .W==S W==S) ==S): S):N ):NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W() W()N ()ND )NDreturn NDreturnW DreturnW. returnW.W W.W[ .W[W W[W. [W.W W.W] .W]( W](** ](**W (**W. **W.W W.W) .W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W() W()N ()Ntry )Ntry: Ntry:N try:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()N ()ND )NDD NDDexcept DDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnW. returnW.W W.W( .W(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=False W=False) =False): False):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Ntry )Ntry: Ntry:N try:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDexcept NDexceptW DexceptW: exceptW:N W:NI :NIif NIifnot IifnotW ifnotW: notW:N W:NI :NIraise NIraiseN IraiseND raiseNDW NDW. DW.W W.W. .W.W W.W( .W(S W(S) (S)N S)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W: .W:N W:NI :NIreturn NIreturnN IreturnND returnNDwith NDwithW DwithW. withW.W W.W: .W:N W:NI :NIif NIifW IifW. ifW.W W.W: .W:N W:NI :NIreturn NIreturnN IreturnND returnNDfor NDforW DforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW( IW() W()N ()ND )NDW NDW. DW.W W.W= .W=True W=TrueN =TrueND TrueNDD NDDdef DDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W( .W() W()N ()NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnFalse NreturnFalseN returnFalseND FalseNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W= =W=None W=NoneN =NoneNif NoneNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)Nif )NifW NifW== ifW==V W==V: ==V:N V:NI :NIW NIW, IW,W W,W, ,W,W W,W= ,W=W W=WN =WND WNDelif NDelifW DelifW== elifW==V W==V: ==V:N V:NI :NIif NIifW IifW( ifW(W W(W[ (W[V W[V] [V], V],( ],(W ,(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW, IW,W W,W= ,W=W W=WN =WND WNDelse NDelse: Delse:N else:NI :NIW NIW, IW,W W,W= ,W=W W=WN =WND WNDD NDDelse DDelse: Delse:N else:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS) SS)N S)ND )NDD NDDif DDifW DifWis ifWisNone WisNone: isNone:N None:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS) SS)N S)ND )NDif NDifnot DifnotW ifnotW( notW(W W(W, (W,W W,W. ,W.W W.W) .W): W):N ):NI :NIif NIifW IifW( ifW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W= =W=None W=NoneN =NoneND NoneNDelif NDelifW DelifW( elifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDelif NDelifW DelifW( elifW(W W(W, (W,W W,W) ,W)or W)orW )orW( orW(W W(W) (W): W):N ):NI :NItry NItry: Itry:N try:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W) .W)N W)ND )NDexcept NDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=W( =W(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(W= (W=W W=W, =W,W W,W= ,W=W W=W) =W)) W))N ))NW )NW( NW(W W(W, (W,W W,W, ,W,W W,W. ,W.W W.W( .W() W()[ ()[V )[V] [V]) V])N ])ND )NDD NDDelse DDelse: Delse:N else:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(W= (W=W W=W) =W)) W))N ))ND )NDD NDDif DDifW DifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIif NIifW IifW( ifW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW. IW.W W.W= .W=W W=WN =WND WNDelse NDelse: Delse:N else:NI :NIW NIW. IW.W W.W= .W=W W=WN =WND WNDD NDDif DDifW DifW: ifW:N W:NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=( W=(( =((W ((W. (W.W W.W. .W.W W.Wor .WorNone WorNone) orNone)if None)ifnot )ifnotW ifnotW. notW.W W.Welse .WelseNone WelseNone) elseNone)N None)Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W, =W,) W,)N ,)ND )NDif NDifW DifW. ifW.W W.W[ .W[S W[S] [S]is S]isnot ]isnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],) ],)N ,)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifS NifSin ifSinW SinW: inW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(S W(S, (S,V S,V) ,V)[ V)[V )[V] [V]N V]NW ]NW= NW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W. .W.W W.W( .W(W W(W, (W,( W,() ,()) ())) )))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W) ,W)N W)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()Nfor )NforW NforWin forWinW WinW. inW.W W.W: .W:N W:NI :NItry NItry: Itry:N try:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDexcept DDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=WN =WND WNDD NDDif DDifW DifWis ifWisW WisW: isW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDraise NDraiseW DraiseWN raiseWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDW NDW= DW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW= IW=W W=W( =W() W()N ()Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDD DDDdef DDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDif NDifNone DifNonein ifNoneinW NoneinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[None W[None] [None]) None])) ]))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDif NDifnot DifnotW ifnotW. notW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W) ,W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=W W=W) =W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisW WisW: isW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDW NDW= DW=W W=W( =W(W W(W. (W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())) )))N ))NW )NW= NW=W W=W. =W.W W.W. .W.W W.W. .W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=W W=W) =W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisW WisW: isW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDfor NDforW DforWin forWinW WinW( inW(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNfrom SNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNW WNW= NW=W W=W( =W(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W)N W)Ntry )Ntry: Ntry:N try:NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W(W W(W. (W.W W.W( .W() W()) ())N ))ND )NDfinally NDfinally: Dfinally:N finally:NI :NIW NIW. IW.W W.W( .W() W()N ()ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW= NW=None W=NoneN =NoneNtry NoneNtry: Ntry:N try:NI :NItry NItry: Itry:N try:NI :NIW NIW. IW.W W.W( .W() W()N ()NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()ND )NDexcept NDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDexcept NDexcept: Dexcept:N except:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]Nraise ]NraiseN NraiseND raiseNDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDfinally NDfinally: Dfinally:N finally:NI :NIif NIifW IifW. ifW.W W.W( .W(W W(W) (W): W):N ):NI :NIW NIW= IW=None W=NoneN =NoneND NoneNDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIreturn NIreturnS IreturnS% returnS%( S%(W %(W. (W.W W.W. .W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDD NDD< DD<W D<W>","type":"boolean","boost":4.0}}},{"match":{"t1src":{"query":"\n\"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\"\nimport \"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\"\nimportos \nimportos\n importos\nimport os\nimportsys \nimportsys\n importsys\nimport sys\nimportwarnings \nimportwarnings\n importwarnings\nfrom warnings\nfromdatetime \nfromdatetimeimport fromdatetimeimporttimedelta datetimeimporttimedelta\n importtimedelta\nfrom timedelta\nfromfunctools \nfromfunctoolsimport fromfunctoolsimportupdate_wrapper functoolsimportupdate_wrapper\n importupdate_wrapper\nfrom update_wrapper\nfromitertools \nfromitertoolsimport fromitertoolsimportchain itertoolsimportchain\n importchain\nfrom chain\nfromthreading \nfromthreadingimport fromthreadingimportLock threadingimportLock\n importLock\nfrom Lock\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.datastructures werkzeug.datastructuresimport .datastructuresimportHeaders datastructuresimportHeaders\n importHeaders\nfrom Headers\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.datastructures werkzeug.datastructuresimport .datastructuresimportImmutableDict datastructuresimportImmutableDict\n importImmutableDict\nfrom ImmutableDict\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportBadRequest exceptionsimportBadRequest\n importBadRequest\nfrom BadRequest\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportBadRequestKeyError exceptionsimportBadRequestKeyError\n importBadRequestKeyError\nfrom BadRequestKeyError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportdefault_exceptions exceptionsimportdefault_exceptions\n importdefault_exceptions\nfrom default_exceptions\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportHTTPException exceptionsimportHTTPException\n importHTTPException\nfrom HTTPException\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportInternalServerError exceptionsimportInternalServerError\n importInternalServerError\nfrom InternalServerError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportBuildError routingimportBuildError\n importBuildError\nfrom BuildError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportMap routingimportMap\n importMap\nfrom Map\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRequestRedirect routingimportRequestRedirect\n importRequestRedirect\nfrom RequestRedirect\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRoutingException routingimportRoutingException\n importRoutingException\nfrom RoutingException\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRule routingimportRule\n importRule\nfrom Rule\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.wrappers werkzeug.wrappersimport .wrappersimportBaseResponse wrappersimportBaseResponse\n importBaseResponse\nfrom BaseResponse\nfrom. \nfrom.import from.importcli .importcli\n importcli\nfrom cli\nfrom. \nfrom.import from.importjson .importjson\n importjson\nfrom json\nfrom. \nfrom._compat from._compatimport ._compatimportinteger_types _compatimportinteger_types\n importinteger_types\nfrom integer_types\nfrom. \nfrom._compat from._compatimport ._compatimportreraise _compatimportreraise\n importreraise\nfrom reraise\nfrom. \nfrom._compat from._compatimport ._compatimportstring_types _compatimportstring_types\n importstring_types\nfrom string_types\nfrom. \nfrom._compat from._compatimport ._compatimporttext_type _compatimporttext_type\n importtext_type\nfrom text_type\nfrom. \nfrom.config from.configimport .configimportConfig configimportConfig\n importConfig\nfrom Config\nfrom. \nfrom.config from.configimport .configimportConfigAttribute configimportConfigAttribute\n importConfigAttribute\nfrom ConfigAttribute\nfrom. \nfrom.ctx from.ctximport .ctximport_AppCtxGlobals ctximport_AppCtxGlobals\n import_AppCtxGlobals\nfrom _AppCtxGlobals\nfrom. \nfrom.ctx from.ctximport .ctximportAppContext ctximportAppContext\n importAppContext\nfrom AppContext\nfrom. \nfrom.ctx from.ctximport .ctximportRequestContext ctximportRequestContext\n importRequestContext\nfrom RequestContext\nfrom. \nfrom.globals from.globalsimport .globalsimport_request_ctx_stack globalsimport_request_ctx_stack\n import_request_ctx_stack\nfrom _request_ctx_stack\nfrom. \nfrom.globals from.globalsimport .globalsimportg globalsimportg\n importg\nfrom g\nfrom. \nfrom.globals from.globalsimport .globalsimportrequest globalsimportrequest\n importrequest\nfrom request\nfrom. \nfrom.globals from.globalsimport .globalsimportsession globalsimportsession\n importsession\nfrom session\nfrom. \nfrom.helpers from.helpersimport .helpersimport_endpoint_from_view_func helpersimport_endpoint_from_view_func\n import_endpoint_from_view_func\nfrom _endpoint_from_view_func\nfrom. \nfrom.helpers from.helpersimport .helpersimport_PackageBoundObject helpersimport_PackageBoundObject\n import_PackageBoundObject\nfrom _PackageBoundObject\nfrom. \nfrom.helpers from.helpersimport .helpersimportfind_package helpersimportfind_package\n importfind_package\nfrom find_package\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_debug_flag helpersimportget_debug_flag\n importget_debug_flag\nfrom get_debug_flag\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_env helpersimportget_env\n importget_env\nfrom get_env\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_flashed_messages helpersimportget_flashed_messages\n importget_flashed_messages\nfrom get_flashed_messages\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_load_dotenv helpersimportget_load_dotenv\n importget_load_dotenv\nfrom get_load_dotenv\nfrom. \nfrom.helpers from.helpersimport .helpersimportlocked_cached_property helpersimportlocked_cached_property\n importlocked_cached_property\nfrom locked_cached_property\nfrom. \nfrom.helpers from.helpersimport .helpersimporturl_for helpersimporturl_for\n importurl_for\nfrom url_for\nfrom. \nfrom.json from.jsonimport .jsonimportjsonify jsonimportjsonify\n importjsonify\nfrom jsonify\nfrom. \nfrom.logging from.loggingimport .loggingimportcreate_logger loggingimportcreate_logger\n importcreate_logger\nfrom create_logger\nfrom. \nfrom.sessions from.sessionsimport .sessionsimportSecureCookieSessionInterface sessionsimportSecureCookieSessionInterface\n importSecureCookieSessionInterface\nfrom SecureCookieSessionInterface\nfrom. \nfrom.signals from.signalsimport .signalsimportappcontext_tearing_down signalsimportappcontext_tearing_down\n importappcontext_tearing_down\nfrom appcontext_tearing_down\nfrom. \nfrom.signals from.signalsimport .signalsimportgot_request_exception signalsimportgot_request_exception\n importgot_request_exception\nfrom got_request_exception\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_finished signalsimportrequest_finished\n importrequest_finished\nfrom request_finished\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_started signalsimportrequest_started\n importrequest_started\nfrom request_started\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_tearing_down signalsimportrequest_tearing_down\n importrequest_tearing_down\nfrom request_tearing_down\nfrom. \nfrom.templating from.templatingimport .templatingimport_default_template_ctx_processor templatingimport_default_template_ctx_processor\n import_default_template_ctx_processor\nfrom _default_template_ctx_processor\nfrom. \nfrom.templating from.templatingimport .templatingimportDispatchingJinjaLoader templatingimportDispatchingJinjaLoader\n importDispatchingJinjaLoader\nfrom DispatchingJinjaLoader\nfrom. \nfrom.templating from.templatingimport .templatingimportEnvironment templatingimportEnvironment\n importEnvironment\nfrom Environment\nfrom. \nfrom.wrappers from.wrappersimport .wrappersimportRequest wrappersimportRequest\n importRequest\nfrom Request\nfrom. \nfrom.wrappers from.wrappersimport .wrappersimportResponse wrappersimportResponse\n importResponse\n_sentinel Response\n_sentinel= \n_sentinel=object _sentinel=object( =object() object()\n ()\ndef )\ndef_make_timedelta \ndef_make_timedelta( def_make_timedelta(value _make_timedelta(value) (value): value):\t ):\t\t :\t\tif \t\tifnot \tifnotisinstance ifnotisinstance( notisinstance(value isinstance(value, (value,timedelta value,timedelta) ,timedelta): timedelta):\t ):\t\t\t :\t\t\treturn \t\t\treturntimedelta \t\treturntimedelta( returntimedelta(seconds timedelta(seconds= (seconds=value seconds=value) =value)\t value)\t\t )\t\treturn \t\treturnvalue \treturnvalue\n returnvalue\n\n value\n\ndef \n\ndefsetupmethod \ndefsetupmethod( defsetupmethod(f setupmethod(f) (f): f):\t ):\t\t :\t\t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\" \t\t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\t \t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\tdef \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\tdefwrapper_func \tdefwrapper_func( defwrapper_func(self wrapper_func(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\tif \t\t\tifself \t\tifself. ifself.debug self.debugand .debugandself debugandself. andself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t :\t\t\t\traise \t\t\t\traiseAssertionError \t\t\traiseAssertionError( raiseAssertionError(\"A setup function was called after the \" AssertionError(\"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \" (\"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \" \"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\" \"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \" \"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \" \"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \"\"before the application starts serving requests.\" \"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \"\"before the application starts serving requests.\") \"database models and everything related at a central place \"\"before the application starts serving requests.\")\t \"before the application starts serving requests.\")\t\t )\t\treturn \t\treturnf \treturnf( returnf(self f(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\treturn \t\treturnupdate_wrapper \treturnupdate_wrapper( returnupdate_wrapper(wrapper_func update_wrapper(wrapper_func, (wrapper_func,f wrapper_func,f) ,f)\n f)\n\n )\n\nclass \n\nclassFlask \nclassFlask( classFlask(_PackageBoundObject Flask(_PackageBoundObject) (_PackageBoundObject): _PackageBoundObject):\t ):\t\t :\t\t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\" \t\t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\t \t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\trequest_class \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\trequest_class= \trequest_class=Request request_class=Request\t =Request\tresponse_class Request\tresponse_class= \tresponse_class=Response response_class=Response\t =Response\tjinja_environment Response\tjinja_environment= \tjinja_environment=Environment jinja_environment=Environment\t =Environment\tapp_ctx_globals_class Environment\tapp_ctx_globals_class= \tapp_ctx_globals_class=_AppCtxGlobals app_ctx_globals_class=_AppCtxGlobals\t =_AppCtxGlobals\tconfig_class _AppCtxGlobals\tconfig_class= \tconfig_class=Config config_class=Config\t =Config\ttesting Config\ttesting= \ttesting=ConfigAttribute testing=ConfigAttribute( =ConfigAttribute(\"TESTING\" ConfigAttribute(\"TESTING\") (\"TESTING\")\t \"TESTING\")\tsecret_key )\tsecret_key= \tsecret_key=ConfigAttribute secret_key=ConfigAttribute( =ConfigAttribute(\"SECRET_KEY\" ConfigAttribute(\"SECRET_KEY\") (\"SECRET_KEY\")\t \"SECRET_KEY\")\tsession_cookie_name )\tsession_cookie_name= \tsession_cookie_name=ConfigAttribute session_cookie_name=ConfigAttribute( =ConfigAttribute(\"SESSION_COOKIE_NAME\" ConfigAttribute(\"SESSION_COOKIE_NAME\") (\"SESSION_COOKIE_NAME\")\t \"SESSION_COOKIE_NAME\")\tpermanent_session_lifetime )\tpermanent_session_lifetime= \tpermanent_session_lifetime=ConfigAttribute permanent_session_lifetime=ConfigAttribute( =ConfigAttribute(\"PERMANENT_SESSION_LIFETIME\" ConfigAttribute(\"PERMANENT_SESSION_LIFETIME\", (\"PERMANENT_SESSION_LIFETIME\",get_converter \"PERMANENT_SESSION_LIFETIME\",get_converter= ,get_converter=_make_timedelta get_converter=_make_timedelta) =_make_timedelta)\t _make_timedelta)\tsend_file_max_age_default )\tsend_file_max_age_default= \tsend_file_max_age_default=ConfigAttribute send_file_max_age_default=ConfigAttribute( =ConfigAttribute(\"SEND_FILE_MAX_AGE_DEFAULT\" ConfigAttribute(\"SEND_FILE_MAX_AGE_DEFAULT\", (\"SEND_FILE_MAX_AGE_DEFAULT\",get_converter \"SEND_FILE_MAX_AGE_DEFAULT\",get_converter= ,get_converter=_make_timedelta get_converter=_make_timedelta) =_make_timedelta)\t _make_timedelta)\tuse_x_sendfile )\tuse_x_sendfile= \tuse_x_sendfile=ConfigAttribute use_x_sendfile=ConfigAttribute( =ConfigAttribute(\"USE_X_SENDFILE\" ConfigAttribute(\"USE_X_SENDFILE\") (\"USE_X_SENDFILE\")\t \"USE_X_SENDFILE\")\tjson_encoder )\tjson_encoder= \tjson_encoder=json json_encoder=json. =json.JSONEncoder json.JSONEncoder\t .JSONEncoder\tjson_decoder JSONEncoder\tjson_decoder= \tjson_decoder=json json_decoder=json. =json.JSONDecoder json.JSONDecoder\t .JSONDecoder\tjinja_options JSONDecoder\tjinja_options= \tjinja_options={ jinja_options={\"extensions\" ={\"extensions\": {\"extensions\":[ \"extensions\":[\"jinja2.ext.autoescape\" :[\"jinja2.ext.autoescape\", [\"jinja2.ext.autoescape\",\"jinja2.ext.with_\" \"jinja2.ext.autoescape\",\"jinja2.ext.with_\"] ,\"jinja2.ext.with_\"]} \"jinja2.ext.with_\"]}\t ]}\tdefault_config }\tdefault_config= \tdefault_config=ImmutableDict default_config=ImmutableDict( =ImmutableDict({ ImmutableDict({\"ENV\" ({\"ENV\": {\"ENV\":None \"ENV\":None, :None,\"DEBUG\" None,\"DEBUG\": ,\"DEBUG\":None \"DEBUG\":None, :None,\"TESTING\" None,\"TESTING\": ,\"TESTING\":False \"TESTING\":False, :False,\"PROPAGATE_EXCEPTIONS\" False,\"PROPAGATE_EXCEPTIONS\": ,\"PROPAGATE_EXCEPTIONS\":None \"PROPAGATE_EXCEPTIONS\":None, :None,\"PRESERVE_CONTEXT_ON_EXCEPTION\" None,\"PRESERVE_CONTEXT_ON_EXCEPTION\": ,\"PRESERVE_CONTEXT_ON_EXCEPTION\":None \"PRESERVE_CONTEXT_ON_EXCEPTION\":None, :None,\"SECRET_KEY\" None,\"SECRET_KEY\": ,\"SECRET_KEY\":None \"SECRET_KEY\":None, :None,\"PERMANENT_SESSION_LIFETIME\" None,\"PERMANENT_SESSION_LIFETIME\": ,\"PERMANENT_SESSION_LIFETIME\":timedelta \"PERMANENT_SESSION_LIFETIME\":timedelta( :timedelta(days timedelta(days= (days=31 days=31) =31), 31),\"USE_X_SENDFILE\" ),\"USE_X_SENDFILE\": ,\"USE_X_SENDFILE\":False \"USE_X_SENDFILE\":False, :False,\"SERVER_NAME\" False,\"SERVER_NAME\": ,\"SERVER_NAME\":None \"SERVER_NAME\":None, :None,\"APPLICATION_ROOT\" None,\"APPLICATION_ROOT\": ,\"APPLICATION_ROOT\":\"/\" \"APPLICATION_ROOT\":\"/\", :\"/\",\"SESSION_COOKIE_NAME\" \"/\",\"SESSION_COOKIE_NAME\": ,\"SESSION_COOKIE_NAME\":\"session\" \"SESSION_COOKIE_NAME\":\"session\", :\"session\",\"SESSION_COOKIE_DOMAIN\" \"session\",\"SESSION_COOKIE_DOMAIN\": ,\"SESSION_COOKIE_DOMAIN\":None \"SESSION_COOKIE_DOMAIN\":None, :None,\"SESSION_COOKIE_PATH\" None,\"SESSION_COOKIE_PATH\": ,\"SESSION_COOKIE_PATH\":None \"SESSION_COOKIE_PATH\":None, :None,\"SESSION_COOKIE_HTTPONLY\" None,\"SESSION_COOKIE_HTTPONLY\": ,\"SESSION_COOKIE_HTTPONLY\":True \"SESSION_COOKIE_HTTPONLY\":True, :True,\"SESSION_COOKIE_SECURE\" True,\"SESSION_COOKIE_SECURE\": ,\"SESSION_COOKIE_SECURE\":False \"SESSION_COOKIE_SECURE\":False, :False,\"SESSION_COOKIE_SAMESITE\" False,\"SESSION_COOKIE_SAMESITE\": ,\"SESSION_COOKIE_SAMESITE\":None \"SESSION_COOKIE_SAMESITE\":None, :None,\"SESSION_REFRESH_EACH_REQUEST\" None,\"SESSION_REFRESH_EACH_REQUEST\": ,\"SESSION_REFRESH_EACH_REQUEST\":True \"SESSION_REFRESH_EACH_REQUEST\":True, :True,\"MAX_CONTENT_LENGTH\" True,\"MAX_CONTENT_LENGTH\": ,\"MAX_CONTENT_LENGTH\":None \"MAX_CONTENT_LENGTH\":None, :None,\"SEND_FILE_MAX_AGE_DEFAULT\" None,\"SEND_FILE_MAX_AGE_DEFAULT\": ,\"SEND_FILE_MAX_AGE_DEFAULT\":timedelta \"SEND_FILE_MAX_AGE_DEFAULT\":timedelta( :timedelta(hours timedelta(hours= (hours=12 hours=12) =12), 12),\"TRAP_BAD_REQUEST_ERRORS\" ),\"TRAP_BAD_REQUEST_ERRORS\": ,\"TRAP_BAD_REQUEST_ERRORS\":None \"TRAP_BAD_REQUEST_ERRORS\":None, :None,\"TRAP_HTTP_EXCEPTIONS\" None,\"TRAP_HTTP_EXCEPTIONS\": ,\"TRAP_HTTP_EXCEPTIONS\":False \"TRAP_HTTP_EXCEPTIONS\":False, :False,\"EXPLAIN_TEMPLATE_LOADING\" False,\"EXPLAIN_TEMPLATE_LOADING\": ,\"EXPLAIN_TEMPLATE_LOADING\":False \"EXPLAIN_TEMPLATE_LOADING\":False, :False,\"PREFERRED_URL_SCHEME\" False,\"PREFERRED_URL_SCHEME\": ,\"PREFERRED_URL_SCHEME\":\"http\" \"PREFERRED_URL_SCHEME\":\"http\", :\"http\",\"JSON_AS_ASCII\" \"http\",\"JSON_AS_ASCII\": ,\"JSON_AS_ASCII\":True \"JSON_AS_ASCII\":True, :True,\"JSON_SORT_KEYS\" True,\"JSON_SORT_KEYS\": ,\"JSON_SORT_KEYS\":True \"JSON_SORT_KEYS\":True, :True,\"JSONIFY_PRETTYPRINT_REGULAR\" True,\"JSONIFY_PRETTYPRINT_REGULAR\": ,\"JSONIFY_PRETTYPRINT_REGULAR\":False \"JSONIFY_PRETTYPRINT_REGULAR\":False, :False,\"JSONIFY_MIMETYPE\" False,\"JSONIFY_MIMETYPE\": ,\"JSONIFY_MIMETYPE\":\"application/json\" \"JSONIFY_MIMETYPE\":\"application/json\", :\"application/json\",\"TEMPLATES_AUTO_RELOAD\" \"application/json\",\"TEMPLATES_AUTO_RELOAD\": ,\"TEMPLATES_AUTO_RELOAD\":None \"TEMPLATES_AUTO_RELOAD\":None, :None,\"MAX_COOKIE_SIZE\" None,\"MAX_COOKIE_SIZE\": ,\"MAX_COOKIE_SIZE\":4093 \"MAX_COOKIE_SIZE\":4093, :4093,} 4093,}) ,})\t })\turl_rule_class )\turl_rule_class= \turl_rule_class=Rule url_rule_class=Rule\t =Rule\turl_map_class Rule\turl_map_class= \turl_map_class=Map url_map_class=Map\t =Map\ttest_client_class Map\ttest_client_class= \ttest_client_class=None test_client_class=None\t =None\ttest_cli_runner_class None\ttest_cli_runner_class= \ttest_cli_runner_class=None test_cli_runner_class=None\t =None\tsession_interface None\tsession_interface= \tsession_interface=SecureCookieSessionInterface session_interface=SecureCookieSessionInterface( =SecureCookieSessionInterface() SecureCookieSessionInterface()\t ()\timport_name )\timport_name= \timport_name=None import_name=None\t =None\ttemplate_folder None\ttemplate_folder= \ttemplate_folder=None template_folder=None\t =None\troot_path None\troot_path= \troot_path=None root_path=None\t =None\tdef None\tdef__init__ \tdef__init__( def__init__(self __init__(self, (self,import_name self,import_name, ,import_name,static_url_path import_name,static_url_path= ,static_url_path=None static_url_path=None, =None,static_folder None,static_folder= ,static_folder=\"static\" static_folder=\"static\", =\"static\",static_host \"static\",static_host= ,static_host=None static_host=None, =None,host_matching None,host_matching= ,host_matching=False host_matching=False, =False,subdomain_matching False,subdomain_matching= ,subdomain_matching=False subdomain_matching=False, =False,template_folder False,template_folder= ,template_folder=\"templates\" template_folder=\"templates\", =\"templates\",instance_path \"templates\",instance_path= ,instance_path=None instance_path=None, =None,instance_relative_config None,instance_relative_config= ,instance_relative_config=False instance_relative_config=False, =False,root_path False,root_path= ,root_path=None root_path=None, =None,) None,): ,):\t ):\t\t\t :\t\t\t_PackageBoundObject \t\t\t_PackageBoundObject. \t\t_PackageBoundObject.__init__ _PackageBoundObject.__init__( .__init__(self __init__(self, (self,import_name self,import_name, ,import_name,template_folder import_name,template_folder= ,template_folder=template_folder template_folder=template_folder, =template_folder,root_path template_folder,root_path= ,root_path=root_path root_path=root_path) =root_path)\t root_path)\tself )\tself. \tself.static_url_path self.static_url_path= .static_url_path=static_url_path static_url_path=static_url_path\t =static_url_path\tself static_url_path\tself. \tself.static_folder self.static_folder= .static_folder=static_folder static_folder=static_folder\t =static_folder\tif static_folder\tifinstance_path \tifinstance_pathis ifinstance_pathisNone instance_pathisNone: isNone:\t None:\t\t\t\t :\t\t\t\tinstance_path \t\t\t\tinstance_path= \t\t\tinstance_path=self instance_path=self. =self.auto_find_instance_path self.auto_find_instance_path( .auto_find_instance_path() auto_find_instance_path()\t ()\t\t )\t\telif \t\telifnot \telifnotos elifnotos. notos.path os.path. .path.isabs path.isabs( .isabs(instance_path isabs(instance_path) (instance_path): instance_path):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseValueError \t\t\traiseValueError( raiseValueError(\"If an instance path is provided it must be absolute.\" ValueError(\"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\" (\"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\") \"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\")\t \" A relative path was given instead.\")\t\t )\t\tself \t\tself. \tself.instance_path self.instance_path= .instance_path=instance_path instance_path=instance_path\t =instance_path\tself instance_path\tself. \tself.config self.config= .config=self config=self. =self.make_config self.make_config( .make_config(instance_relative_config make_config(instance_relative_config) (instance_relative_config)\t instance_relative_config)\tself )\tself. \tself.view_functions self.view_functions= .view_functions={ view_functions={} ={}\t {}\tself }\tself. \tself.error_handler_spec self.error_handler_spec= .error_handler_spec={ error_handler_spec={} ={}\t {}\tself }\tself. \tself.url_build_error_handlers self.url_build_error_handlers= .url_build_error_handlers=[ url_build_error_handlers=[] =[]\t []\tself ]\tself. \tself.before_request_funcs self.before_request_funcs= .before_request_funcs={ before_request_funcs={} ={}\t {}\tself }\tself. \tself.before_first_request_funcs self.before_first_request_funcs= .before_first_request_funcs=[ before_first_request_funcs=[] =[]\t []\tself ]\tself. \tself.after_request_funcs self.after_request_funcs= .after_request_funcs={ after_request_funcs={} ={}\t {}\tself }\tself. \tself.teardown_request_funcs self.teardown_request_funcs= .teardown_request_funcs={ teardown_request_funcs={} ={}\t {}\tself }\tself. \tself.teardown_appcontext_funcs self.teardown_appcontext_funcs= .teardown_appcontext_funcs=[ teardown_appcontext_funcs=[] =[]\t []\tself ]\tself. \tself.url_value_preprocessors self.url_value_preprocessors= .url_value_preprocessors={ url_value_preprocessors={} ={}\t {}\tself }\tself. \tself.url_default_functions self.url_default_functions= .url_default_functions={ url_default_functions={} ={}\t {}\tself }\tself. \tself.template_context_processors self.template_context_processors= .template_context_processors={ template_context_processors={None ={None: {None:[ None:[_default_template_ctx_processor :[_default_template_ctx_processor] [_default_template_ctx_processor]} _default_template_ctx_processor]}\t ]}\tself }\tself. \tself.shell_context_processors self.shell_context_processors= .shell_context_processors=[ shell_context_processors=[] =[]\t []\tself ]\tself. \tself.blueprints self.blueprints= .blueprints={ blueprints={} ={}\t {}\tself }\tself. \tself._blueprint_order self._blueprint_order= ._blueprint_order=[ _blueprint_order=[] =[]\t []\tself ]\tself. \tself.extensions self.extensions= .extensions={ extensions={} ={}\t {}\tself }\tself. \tself.url_map self.url_map= .url_map=self url_map=self. =self.url_map_class self.url_map_class( .url_map_class() url_map_class()\t ()\tself )\tself. \tself.url_map self.url_map. .url_map.host_matching url_map.host_matching= .host_matching=host_matching host_matching=host_matching\t =host_matching\tself host_matching\tself. \tself.subdomain_matching self.subdomain_matching= .subdomain_matching=subdomain_matching subdomain_matching=subdomain_matching\t =subdomain_matching\tself subdomain_matching\tself. \tself._got_first_request self._got_first_request= ._got_first_request=False _got_first_request=False\t =False\tself False\tself. \tself._before_request_lock self._before_request_lock= ._before_request_lock=Lock _before_request_lock=Lock( =Lock() Lock()\t ()\tif )\tifself \tifself. ifself.has_static_folder self.has_static_folder: .has_static_folder:\t has_static_folder:\t\t\t\t :\t\t\t\tassert \t\t\t\tassert( \t\t\tassert(bool assert(bool( (bool(static_host bool(static_host) (static_host)== static_host)==host_matching )==host_matching) ==host_matching), host_matching),\"Invalid static_host/host_matching combination\" ),\"Invalid static_host/host_matching combination\"\t ,\"Invalid static_host/host_matching combination\"\tself \"Invalid static_host/host_matching combination\"\tself. \tself.add_url_rule self.add_url_rule( .add_url_rule(self add_url_rule(self. (self.static_url_path self.static_url_path+ .static_url_path+\"/<path:filename>\" static_url_path+\"/<path:filename>\", +\"/<path:filename>\",endpoint \"/<path:filename>\",endpoint= ,endpoint=\"static\" endpoint=\"static\", =\"static\",host \"static\",host= ,host=static_host host=static_host, =static_host,view_func static_host,view_func= ,view_func=self view_func=self. =self.send_static_file self.send_static_file, .send_static_file,) send_static_file,)\t ,)\t\t )\t\tself \t\tself. \tself.cli self.cli. .cli.name cli.name= .name=self name=self. =self.name self.name\t .name\t\t name\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdefname \tdefname( defname(self name(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\tif \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\tifself \tifself. ifself.import_name self.import_name== .import_name==\"__main__\" import_name==\"__main__\": ==\"__main__\":\t \"__main__\":\t\t\t\t :\t\t\t\tfn \t\t\t\tfn= \t\t\tfn=getattr fn=getattr( =getattr(sys getattr(sys. (sys.modules sys.modules[ .modules[\"__main__\" modules[\"__main__\"] [\"__main__\"], \"__main__\"],\"__file__\" ],\"__file__\", ,\"__file__\",None \"__file__\",None) ,None)\t None)\tif )\tiffn \tiffnis iffnisNone fnisNone: isNone:\t None:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturn\"__main__\" \t\t\t\treturn\"__main__\"\t return\"__main__\"\t\t \"__main__\"\t\treturn \t\treturnos \treturnos. returnos.path os.path. .path.splitext path.splitext( .splitext(os splitext(os. (os.path os.path. .path.basename path.basename( .basename(fn basename(fn) (fn)) fn))[ ))[0 )[0] [0]\t 0]\t\t ]\t\treturn \t\treturnself \treturnself. returnself.import_name self.import_name\t .import_name\t\t import_name\t\t@ \t\t@property \t@property\t @property\tdef property\tdefpropagate_exceptions \tdefpropagate_exceptions( defpropagate_exceptions(self propagate_exceptions(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"PROPAGATE_EXCEPTIONS\" config[\"PROPAGATE_EXCEPTIONS\"] [\"PROPAGATE_EXCEPTIONS\"]\t \"PROPAGATE_EXCEPTIONS\"]\tif ]\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnrv \t\t\treturnrv\t returnrv\t\t rv\t\treturn \t\treturnself \treturnself. returnself.testing self.testingor .testingorself testingorself. orself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@property \t@property\t @property\tdef property\tdefpreserve_context_on_exception \tdefpreserve_context_on_exception( defpreserve_context_on_exception(self preserve_context_on_exception(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"PRESERVE_CONTEXT_ON_EXCEPTION\" config[\"PRESERVE_CONTEXT_ON_EXCEPTION\"] [\"PRESERVE_CONTEXT_ON_EXCEPTION\"]\t \"PRESERVE_CONTEXT_ON_EXCEPTION\"]\tif ]\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnrv \t\t\treturnrv\t returnrv\t\t rv\t\treturn \t\treturnself \treturnself. returnself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdeflogger \tdeflogger( deflogger(self logger(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\treturn \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\treturncreate_logger \treturncreate_logger( returncreate_logger(self create_logger(self) (self)\t self)\t\t )\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdefjinja_env \tdefjinja_env( defjinja_env(self jinja_env(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\" \t\t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\t \t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\treturn \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\treturnself \treturnself. returnself.create_jinja_environment self.create_jinja_environment( .create_jinja_environment() create_jinja_environment()\t ()\t\t )\t\t@ \t\t@property \t@property\t @property\tdef property\tdefgot_first_request \tdefgot_first_request( defgot_first_request(self got_first_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\treturn \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\treturnself \treturnself. returnself._got_first_request self._got_first_request\t ._got_first_request\t\t _got_first_request\t\tdef \t\tdefmake_config \tdefmake_config( defmake_config(self make_config(self, (self,instance_relative self,instance_relative= ,instance_relative=False instance_relative=False) =False): False):\t ):\t\t\t :\t\t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\troot_path \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\troot_path= \troot_path=self root_path=self. =self.root_path self.root_path\t .root_path\tif root_path\tifinstance_relative \tifinstance_relative: ifinstance_relative:\t instance_relative:\t\t\t\t :\t\t\t\troot_path \t\t\t\troot_path= \t\t\troot_path=self root_path=self. =self.instance_path self.instance_path\t .instance_path\t\t instance_path\t\tdefaults \t\tdefaults= \tdefaults=dict defaults=dict( =dict(self dict(self. (self.default_config self.default_config) .default_config)\t default_config)\tdefaults )\tdefaults[ \tdefaults[\"ENV\" defaults[\"ENV\"] [\"ENV\"]= \"ENV\"]=get_env ]=get_env( =get_env() get_env()\t ()\tdefaults )\tdefaults[ \tdefaults[\"DEBUG\" defaults[\"DEBUG\"] [\"DEBUG\"]= \"DEBUG\"]=get_debug_flag ]=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\treturn )\treturnself \treturnself. returnself.config_class self.config_class( .config_class(root_path config_class(root_path, (root_path,defaults root_path,defaults) ,defaults)\t defaults)\t\t )\t\tdef \t\tdefauto_find_instance_path \tdefauto_find_instance_path( defauto_find_instance_path(self auto_find_instance_path(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\tprefix \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\tprefix, \tprefix,package_path prefix,package_path= ,package_path=find_package package_path=find_package( =find_package(self find_package(self. (self.import_name self.import_name) .import_name)\t import_name)\tif )\tifprefix \tifprefixis ifprefixisNone prefixisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnos \t\t\treturnos. returnos.path os.path. .path.join path.join( .join(package_path join(package_path, (package_path,\"instance\" package_path,\"instance\") ,\"instance\")\t \"instance\")\t\t )\t\treturn \t\treturnos \treturnos. returnos.path os.path. .path.join path.join( .join(prefix join(prefix, (prefix,\"var\" prefix,\"var\", ,\"var\",self \"var\",self. ,self.name self.name+ .name+\"-instance\" name+\"-instance\") +\"-instance\")\t \"-instance\")\t\t )\t\tdef \t\tdefopen_instance_resource \tdefopen_instance_resource( defopen_instance_resource(self open_instance_resource(self, (self,resource self,resource, ,resource,mode resource,mode= ,mode=\"rb\" mode=\"rb\") =\"rb\"): \"rb\"):\t ):\t\t\t :\t\t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\" \t\t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\t \t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\treturn \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\treturnopen \treturnopen( returnopen(os open(os. (os.path os.path. .path.join path.join( .join(self join(self. (self.instance_path self.instance_path, .instance_path,resource instance_path,resource) ,resource), resource),mode ),mode) ,mode)\t mode)\t\t )\t\t@ \t\t@property \t@property\t @property\tdef property\tdeftemplates_auto_reload \tdeftemplates_auto_reload( deftemplates_auto_reload(self templates_auto_reload(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\" \t\t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\t \t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\trv \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"TEMPLATES_AUTO_RELOAD\" config[\"TEMPLATES_AUTO_RELOAD\"] [\"TEMPLATES_AUTO_RELOAD\"]\t \"TEMPLATES_AUTO_RELOAD\"]\treturn ]\treturnrv \treturnrvif returnrvifrv rvifrvis ifrvisnot rvisnotNone isnotNoneelse notNoneelseself Noneelseself. elseself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@templates_auto_reload \t@templates_auto_reload. @templates_auto_reload.setter templates_auto_reload.setter\t .setter\tdef setter\tdeftemplates_auto_reload \tdeftemplates_auto_reload( deftemplates_auto_reload(self templates_auto_reload(self, (self,value self,value) ,value): value):\t ):\t\t\t :\t\t\tself \t\t\tself. \t\tself.config self.config[ .config[\"TEMPLATES_AUTO_RELOAD\" config[\"TEMPLATES_AUTO_RELOAD\"] [\"TEMPLATES_AUTO_RELOAD\"]= \"TEMPLATES_AUTO_RELOAD\"]=value ]=value\t =value\t\t value\t\tdef \t\tdefcreate_jinja_environment \tdefcreate_jinja_environment( defcreate_jinja_environment(self create_jinja_environment(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\" \t\t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\t \t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\toptions \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\toptions= \toptions=dict options=dict( =dict(self dict(self. (self.jinja_options self.jinja_options) .jinja_options)\t jinja_options)\tif )\tif\"autoescape\" \tif\"autoescape\"not if\"autoescape\"notin \"autoescape\"notinoptions notinoptions: inoptions:\t options:\t\t\t\t :\t\t\t\toptions \t\t\t\toptions[ \t\t\toptions[\"autoescape\" options[\"autoescape\"] [\"autoescape\"]= \"autoescape\"]=self ]=self. =self.select_jinja_autoescape self.select_jinja_autoescape\t .select_jinja_autoescape\t\t select_jinja_autoescape\t\tif \t\tif\"auto_reload\" \tif\"auto_reload\"not if\"auto_reload\"notin \"auto_reload\"notinoptions notinoptions: inoptions:\t options:\t\t\t\t :\t\t\t\toptions \t\t\t\toptions[ \t\t\toptions[\"auto_reload\" options[\"auto_reload\"] [\"auto_reload\"]= \"auto_reload\"]=self ]=self. =self.templates_auto_reload self.templates_auto_reload\t .templates_auto_reload\t\t templates_auto_reload\t\trv \t\trv= \trv=self rv=self. =self.jinja_environment self.jinja_environment( .jinja_environment(self jinja_environment(self, (self,** self,**options ,**options) **options)\t options)\trv )\trv. \trv.globals rv.globals. .globals.update globals.update( .update(url_for update(url_for= (url_for=url_for url_for=url_for, =url_for,get_flashed_messages url_for,get_flashed_messages= ,get_flashed_messages=get_flashed_messages get_flashed_messages=get_flashed_messages, =get_flashed_messages,config get_flashed_messages,config= ,config=self config=self. =self.config self.config, .config,request config,request= ,request=request request=request, =request,session request,session= ,session=session session=session, =session,g session,g= ,g=g g=g, =g,) g,)\t ,)\trv )\trv. \trv.filters rv.filters[ .filters[\"tojson\" filters[\"tojson\"] [\"tojson\"]= \"tojson\"]=json ]=json. =json.tojson_filter json.tojson_filter\t .tojson_filter\treturn tojson_filter\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefcreate_global_jinja_loader \tdefcreate_global_jinja_loader( defcreate_global_jinja_loader(self create_global_jinja_loader(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\treturn \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\treturnDispatchingJinjaLoader \treturnDispatchingJinjaLoader( returnDispatchingJinjaLoader(self DispatchingJinjaLoader(self) (self)\t self)\t\t )\t\tdef \t\tdefselect_jinja_autoescape \tdefselect_jinja_autoescape( defselect_jinja_autoescape(self select_jinja_autoescape(self, (self,filename self,filename) ,filename): filename):\t ):\t\t\t :\t\t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\" \t\t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\t \t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\tif \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\tiffilename \tiffilenameis iffilenameisNone filenameisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\treturn \t\treturnfilename \treturnfilename. returnfilename.endswith filename.endswith( .endswith(( endswith((\".html\" ((\".html\", (\".html\",\".htm\" \".html\",\".htm\", ,\".htm\",\".xml\" \".htm\",\".xml\", ,\".xml\",\".xhtml\" \".xml\",\".xhtml\") ,\".xhtml\")) \".xhtml\"))\t ))\t\t )\t\tdef \t\tdefupdate_template_context \tdefupdate_template_context( defupdate_template_context(self update_template_context(self, (self,context self,context) ,context): context):\t ):\t\t\t :\t\t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\" \t\t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\t \t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\tfuncs \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\tfuncs= \tfuncs=self funcs=self. =self.template_context_processors self.template_context_processors[ .template_context_processors[None template_context_processors[None] [None]\t None]\treqctx ]\treqctx= \treqctx=_request_ctx_stack reqctx=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top\t .top\tif top\tifreqctx \tifreqctxis ifreqctxisnot reqctxisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tbp \t\t\t\tbp= \t\t\tbp=reqctx bp=reqctx. =reqctx.request reqctx.request. .request.blueprint request.blueprint\t .blueprint\tif blueprint\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.template_context_processors self.template_context_processors: .template_context_processors:\t template_context_processors:\t\t\t\t\t :\t\t\t\t\tfuncs \t\t\t\t\tfuncs= \t\t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.template_context_processors self.template_context_processors[ .template_context_processors[bp template_context_processors[bp] [bp]) bp])\t ])\t\t )\t\t\t \t\t\torig_ctx \t\torig_ctx= \torig_ctx=context orig_ctx=context. =context.copy context.copy( .copy() copy()\t ()\tfor )\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tcontext \t\t\t\tcontext. \t\t\tcontext.update context.update( .update(func update(func( (func() func()) ())\t ))\t\t )\t\tcontext \t\tcontext. \tcontext.update context.update( .update(orig_ctx update(orig_ctx) (orig_ctx)\t orig_ctx)\t\t )\t\tdef \t\tdefmake_shell_context \tdefmake_shell_context( defmake_shell_context(self make_shell_context(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\trv \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\trv= \trv={ rv={\"app\" ={\"app\": {\"app\":self \"app\":self, :self,\"g\" self,\"g\": ,\"g\":g \"g\":g} :g}\t g}\tfor }\tforprocessor \tforprocessorin forprocessorinself processorinself. inself.shell_context_processors self.shell_context_processors: .shell_context_processors:\t shell_context_processors:\t\t\t\t :\t\t\t\trv \t\t\t\trv. \t\t\trv.update rv.update( .update(processor update(processor( (processor() processor()) ())\t ))\t\t )\t\treturn \t\treturnrv \treturnrv\t returnrv\t\t rv\t\tenv \t\tenv= \tenv=ConfigAttribute env=ConfigAttribute( =ConfigAttribute(\"ENV\" ConfigAttribute(\"ENV\") (\"ENV\")\t \"ENV\")\t@ )\t@property \t@property\t @property\tdef property\tdefdebug \tdefdebug( defdebug(self debug(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\" \t\t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\t \t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\treturn \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\treturnself \treturnself. returnself.config self.config[ .config[\"DEBUG\" config[\"DEBUG\"] [\"DEBUG\"]\t \"DEBUG\"]\t\t ]\t\t@ \t\t@debug \t@debug. @debug.setter debug.setter\t .setter\tdef setter\tdefdebug \tdefdebug( defdebug(self debug(self, (self,value self,value) ,value): value):\t ):\t\t\t :\t\t\tself \t\t\tself. \t\tself.config self.config[ .config[\"DEBUG\" config[\"DEBUG\"] [\"DEBUG\"]= \"DEBUG\"]=value ]=value\t =value\tself value\tself. \tself.jinja_env self.jinja_env. .jinja_env.auto_reload jinja_env.auto_reload= .auto_reload=self auto_reload=self. =self.templates_auto_reload self.templates_auto_reload\t .templates_auto_reload\t\t templates_auto_reload\t\tdef \t\tdefrun \tdefrun( defrun(self run(self, (self,host self,host= ,host=None host=None, =None,port None,port= ,port=None port=None, =None,debug None,debug= ,debug=None debug=None, =None,load_dotenv None,load_dotenv= ,load_dotenv=True load_dotenv=True, =True,** True,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\" \t\t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\t \t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\tif \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\tifos \tifos. ifos.environ os.environ. .environ.get environ.get( .get(\"FLASK_RUN_FROM_CLI\" get(\"FLASK_RUN_FROM_CLI\") (\"FLASK_RUN_FROM_CLI\")== \"FLASK_RUN_FROM_CLI\")==\"true\" )==\"true\": ==\"true\":\t \"true\":\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.debughelpers from.debughelpersimport .debughelpersimportexplain_ignored_app_run debughelpersimportexplain_ignored_app_run\t importexplain_ignored_app_run\texplain_ignored_app_run explain_ignored_app_run\texplain_ignored_app_run( \texplain_ignored_app_run() explain_ignored_app_run()\t ()\treturn )\treturn\t \treturn\t\t return\t\tif \t\tifget_load_dotenv \tifget_load_dotenv( ifget_load_dotenv(load_dotenv get_load_dotenv(load_dotenv) (load_dotenv): load_dotenv):\t ):\t\t\t\t :\t\t\t\tcli \t\t\t\tcli. \t\t\tcli.load_dotenv cli.load_dotenv( .load_dotenv() load_dotenv()\t ()\tif )\tif\"FLASK_ENV\" \tif\"FLASK_ENV\"in if\"FLASK_ENV\"inos \"FLASK_ENV\"inos. inos.environ os.environ: .environ:\t environ:\t\t\t\t\t :\t\t\t\t\tself \t\t\t\t\tself. \t\t\t\tself.env self.env= .env=get_env env=get_env( =get_env() get_env()\t ()\tself )\tself. \tself.debug self.debug= .debug=get_debug_flag debug=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\t\t )\t\telif \t\telif\"FLASK_DEBUG\" \telif\"FLASK_DEBUG\"in elif\"FLASK_DEBUG\"inos \"FLASK_DEBUG\"inos. inos.environ os.environ: .environ:\t environ:\t\t\t\t\t :\t\t\t\t\tself \t\t\t\t\tself. \t\t\t\tself.debug self.debug= .debug=get_debug_flag debug=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\t\t )\t\t\t \t\t\tif \t\tifdebug \tifdebugis ifdebugisnot debugisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.debug self.debug= .debug=bool debug=bool( =bool(debug bool(debug) (debug)\t debug)\t\t )\t\t_host \t\t_host= \t_host=\"127.0.0.1\" _host=\"127.0.0.1\"\t =\"127.0.0.1\"\t_port \"127.0.0.1\"\t_port= \t_port=5000 _port=5000\t =5000\tserver_name 5000\tserver_name= \tserver_name=self server_name=self. =self.config self.config. .config.get config.get( .get(\"SERVER_NAME\" get(\"SERVER_NAME\") (\"SERVER_NAME\")\t \"SERVER_NAME\")\tsn_host )\tsn_host, \tsn_host,sn_port sn_host,sn_port= ,sn_port=None sn_port=None, =None,None None,None\t ,None\tif None\tifserver_name \tifserver_name: ifserver_name:\t server_name:\t\t\t\t :\t\t\t\tsn_host \t\t\t\tsn_host, \t\t\tsn_host,_ sn_host,_, ,_,sn_port _,sn_port= ,sn_port=server_name sn_port=server_name. =server_name.partition server_name.partition( .partition(\":\" partition(\":\") (\":\")\t \":\")\t\t )\t\thost \t\thost= \thost=host host=hostor =hostorsn_host hostorsn_hostor orsn_hostor_host sn_hostor_host\t or_host\tport _host\tport= \tport=int port=int( =int(next int(next( (next(( next((p ((pfor (pforp pforpin forpin( pin(port in(port, (port,sn_port port,sn_port) ,sn_port)if sn_port)ifp )ifpis ifpisnot pisnotNone isnotNone) notNone), None),_port ),_port) ,_port)) _port))\t ))\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"use_reloader\" setdefault(\"use_reloader\", (\"use_reloader\",self \"use_reloader\",self. ,self.debug self.debug) .debug)\t debug)\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"use_debugger\" setdefault(\"use_debugger\", (\"use_debugger\",self \"use_debugger\",self. ,self.debug self.debug) .debug)\t debug)\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"threaded\" setdefault(\"threaded\", (\"threaded\",True \"threaded\",True) ,True)\t True)\tcli )\tcli. \tcli.show_server_banner cli.show_server_banner( .show_server_banner(self show_server_banner(self. (self.env self.env, .env,self env,self. ,self.debug self.debug, .debug,self debug,self. ,self.name self.name, .name,False name,False) ,False)\t False)\tfrom )\tfromwerkzeug \tfromwerkzeug. fromwerkzeug.serving werkzeug.servingimport .servingimportrun_simple servingimportrun_simple\t importrun_simple\ttry run_simple\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\trun_simple \t\t\t\trun_simple( \t\t\trun_simple(host run_simple(host, (host,port host,port, ,port,self port,self, ,self,** self,**options ,**options) **options)\t options)\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself._got_first_request self._got_first_request= ._got_first_request=False _got_first_request=False\t =False\t\t False\t\t\t \t\t\tdef \t\tdeftest_client \tdeftest_client( deftest_client(self test_client(self, (self,use_cookies self,use_cookies= ,use_cookies=True use_cookies=True, =True,** True,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\" \t\t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\t \t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\tcls \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\tcls= \tcls=self cls=self. =self.test_client_class self.test_client_class\t .test_client_class\tif test_client_class\tifcls \tifclsis ifclsisNone clsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.testing from.testingimport .testingimportFlaskClient testingimportFlaskClientas importFlaskClientascls FlaskClientascls\t ascls\t\t cls\t\treturn \t\treturncls \treturncls( returncls(self cls(self, (self,self self,self. ,self.response_class self.response_class, .response_class,use_cookies response_class,use_cookies= ,use_cookies=use_cookies use_cookies=use_cookies, =use_cookies,** use_cookies,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\tdef \t\tdeftest_cli_runner \tdeftest_cli_runner( deftest_cli_runner(self test_cli_runner(self, (self,** self,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\" \t\t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\t \t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\tcls \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\tcls= \tcls=self cls=self. =self.test_cli_runner_class self.test_cli_runner_class\t .test_cli_runner_class\tif test_cli_runner_class\tifcls \tifclsis ifclsisNone clsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.testing from.testingimport .testingimportFlaskCliRunner testingimportFlaskCliRunneras importFlaskCliRunnerascls FlaskCliRunnerascls\t ascls\t\t cls\t\treturn \t\treturncls \treturncls( returncls(self cls(self, (self,** self,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\tdef \t\tdefopen_session \tdefopen_session( defopen_session(self open_session(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\" \t\t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\t \t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\twarnings \"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"open_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.' ('\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.') '\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.')) ' \"session_interface.open_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.open_session session_interface.open_session( .open_session(self open_session(self, (self,request self,request) ,request)\t request)\t\t )\t\tdef \t\tdefsave_session \tdefsave_session( defsave_session(self save_session(self, (self,session self,session, ,session,response session,response) ,response): response):\t ):\t\t\t :\t\t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\" \t\t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\t \t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\twarnings \"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"save_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.' ('\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.') '\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.')) ' \"session_interface.save_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.save_session session_interface.save_session( .save_session(self save_session(self, (self,session self,session, ,session,response session,response) ,response)\t response)\t\t )\t\tdef \t\tdefmake_null_session \tdefmake_null_session( defmake_null_session(self make_null_session(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\twarnings \"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"make_null_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.' ('\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.') '\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.')) ' \"session_interface.make_null_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.make_null_session session_interface.make_null_session( .make_null_session(self make_null_session(self) (self)\t self)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefregister_blueprint \tdefregister_blueprint( defregister_blueprint(self register_blueprint(self, (self,blueprint self,blueprint, ,blueprint,** blueprint,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfirst_registration \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfirst_registration= \tfirst_registration=False first_registration=False\t =False\tif False\tifblueprint \tifblueprint. ifblueprint.name blueprint.namein .nameinself nameinself. inself.blueprints self.blueprints: .blueprints:\t blueprints:\t\t\t\t :\t\t\t\tassert \t\t\t\tassertself \t\t\tassertself. assertself.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name]is name]isblueprint ]isblueprint, isblueprint,( blueprint,(\"A name collision occurred between blueprints %r and %r. Both\" ,(\"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the' (\"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\" \"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\"% ' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\"%( \" fly need unique names.\"%(blueprint %(blueprint, (blueprint,self blueprint,self. ,self.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name], name],blueprint ],blueprint. ,blueprint.name blueprint.name) .name)) name))\t ))\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name]= name]=blueprint ]=blueprint\t =blueprint\tself blueprint\tself. \tself._blueprint_order self._blueprint_order. ._blueprint_order.append _blueprint_order.append( .append(blueprint append(blueprint) (blueprint)\t blueprint)\tfirst_registration )\tfirst_registration= \tfirst_registration=True first_registration=True\t =True\t\t True\t\tblueprint \t\tblueprint. \tblueprint.register blueprint.register( .register(self register(self, (self,options self,options, ,options,first_registration options,first_registration) ,first_registration)\t first_registration)\t\t )\t\tdef \t\tdefiter_blueprints \tdefiter_blueprints( defiter_blueprints(self iter_blueprints(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\treturn \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\treturniter \treturniter( returniter(self iter(self. (self._blueprint_order self._blueprint_order) ._blueprint_order)\t _blueprint_order)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_url_rule \tdefadd_url_rule( defadd_url_rule(self add_url_rule(self, (self,rule self,rule, ,rule,endpoint rule,endpoint= ,endpoint=None endpoint=None, =None,view_func None,view_func= ,view_func=None view_func=None, =None,provide_automatic_options None,provide_automatic_options= ,provide_automatic_options=None provide_automatic_options=None, =None,** None,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t\t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\t \t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tif \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tifendpoint \tifendpointis ifendpointisNone endpointisNone: isNone:\t None:\t\t\t\t :\t\t\t\tendpoint \t\t\t\tendpoint= \t\t\tendpoint=_endpoint_from_view_func endpoint=_endpoint_from_view_func( =_endpoint_from_view_func(view_func _endpoint_from_view_func(view_func) (view_func)\t view_func)\t\t )\t\toptions \t\toptions[ \toptions[\"endpoint\" options[\"endpoint\"] [\"endpoint\"]= \"endpoint\"]=endpoint ]=endpoint\t =endpoint\tmethods endpoint\tmethods= \tmethods=options methods=options. =options.pop options.pop( .pop(\"methods\" pop(\"methods\", (\"methods\",None \"methods\",None) ,None)\t None)\tif )\tifmethods \tifmethodsis ifmethodsisNone methodsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tmethods \t\t\t\tmethods= \t\t\tmethods=getattr methods=getattr( =getattr(view_func getattr(view_func, (view_func,\"methods\" view_func,\"methods\", ,\"methods\",None \"methods\",None) ,None)or None)or( )or(\"GET\" or(\"GET\", (\"GET\",) \"GET\",)\t ,)\t\t )\t\tif \t\tifisinstance \tifisinstance( ifisinstance(methods isinstance(methods, (methods,string_types methods,string_types) ,string_types): string_types):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseTypeError \t\t\traiseTypeError( raiseTypeError(\"Allowed methods have to be iterables of strings, \" TypeError(\"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])' (\"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])') \"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])')\t 'for example: @app.route(..., methods=[\"POST\"])')\t\t )\t\tmethods \t\tmethods= \tmethods=set methods=set( =set(item set(item. (item.upper item.upper( .upper() upper()for ()foritem )foritemin foriteminmethods iteminmethods) inmethods)\t methods)\trequired_methods )\trequired_methods= \trequired_methods=set required_methods=set( =set(getattr set(getattr( (getattr(view_func getattr(view_func, (view_func,\"required_methods\" view_func,\"required_methods\", ,\"required_methods\",( \"required_methods\",() ,()) ())) )))\t ))\tif )\tifprovide_automatic_options \tifprovide_automatic_optionsis ifprovide_automatic_optionsisNone provide_automatic_optionsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tprovide_automatic_options \t\t\t\tprovide_automatic_options= \t\t\tprovide_automatic_options=getattr provide_automatic_options=getattr( =getattr(view_func getattr(view_func, (view_func,\"provide_automatic_options\" view_func,\"provide_automatic_options\", ,\"provide_automatic_options\",None \"provide_automatic_options\",None) ,None)\t None)\t\t )\t\tif \t\tifprovide_automatic_options \tifprovide_automatic_optionsis ifprovide_automatic_optionsisNone provide_automatic_optionsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tif \t\t\t\tif\"OPTIONS\" \t\t\tif\"OPTIONS\"not if\"OPTIONS\"notin \"OPTIONS\"notinmethods notinmethods: inmethods:\t methods:\t\t\t\t\t :\t\t\t\t\tprovide_automatic_options \t\t\t\t\tprovide_automatic_options= \t\t\t\tprovide_automatic_options=True provide_automatic_options=True\t =True\trequired_methods True\trequired_methods. \trequired_methods.add required_methods.add( .add(\"OPTIONS\" add(\"OPTIONS\") (\"OPTIONS\")\t \"OPTIONS\")\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\tprovide_automatic_options \t\t\t\t\tprovide_automatic_options= \t\t\t\tprovide_automatic_options=False provide_automatic_options=False\t =False\t\t False\t\t\t \t\t\tmethods \t\tmethods|= \tmethods|=required_methods methods|=required_methods\t |=required_methods\trule required_methods\trule= \trule=self rule=self. =self.url_rule_class self.url_rule_class( .url_rule_class(rule url_rule_class(rule, (rule,methods rule,methods= ,methods=methods methods=methods, =methods,** methods,**options ,**options) **options)\t options)\trule )\trule. \trule.provide_automatic_options rule.provide_automatic_options= .provide_automatic_options=provide_automatic_options provide_automatic_options=provide_automatic_options\t =provide_automatic_options\tself provide_automatic_options\tself. \tself.url_map self.url_map. .url_map.add url_map.add( .add(rule add(rule) (rule)\t rule)\tif )\tifview_func \tifview_funcis ifview_funcisnot view_funcisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\told_func \t\t\t\told_func= \t\t\told_func=self old_func=self. =self.view_functions self.view_functions. .view_functions.get view_functions.get( .get(endpoint get(endpoint) (endpoint)\t endpoint)\tif )\tifold_func \tifold_funcis ifold_funcisnot old_funcisnotNone isnotNoneand notNoneandold_func Noneandold_func!= andold_func!=view_func old_func!=view_func: !=view_func:\t view_func:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseAssertionError \t\t\t\traiseAssertionError( raiseAssertionError(\"View function mapping is overwriting an \" AssertionError(\"View function mapping is overwriting an \"\"existing endpoint function: %s\" (\"View function mapping is overwriting an \"\"existing endpoint function: %s\"% \"View function mapping is overwriting an \"\"existing endpoint function: %s\"%endpoint \"existing endpoint function: %s\"%endpoint) %endpoint)\t endpoint)\t\t )\t\tself \t\tself. \tself.view_functions self.view_functions[ .view_functions[endpoint view_functions[endpoint] [endpoint]= endpoint]=view_func ]=view_func\t =view_func\t\t view_func\t\t\t \t\t\tdef \t\tdefroute \tdefroute( defroute(self route(self, (self,rule self,rule, ,rule,** rule,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tdef \"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tendpoint \t\t\t\tendpoint= \t\t\tendpoint=options endpoint=options. =options.pop options.pop( .pop(\"endpoint\" pop(\"endpoint\", (\"endpoint\",None \"endpoint\",None) ,None)\t None)\tself )\tself. \tself.add_url_rule self.add_url_rule( .add_url_rule(rule add_url_rule(rule, (rule,endpoint rule,endpoint, ,endpoint,f endpoint,f, ,f,** f,**options ,**options) **options)\t options)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefendpoint \tdefendpoint( defendpoint(self endpoint(self, (self,endpoint self,endpoint) ,endpoint): endpoint):\t ):\t\t\t :\t\t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\" \t\t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\t \t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\tdef \"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.view_functions self.view_functions[ .view_functions[endpoint view_functions[endpoint] [endpoint]= endpoint]=f ]=f\t =f\treturn f\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@staticmethod \t@staticmethod\t @staticmethod\tdef staticmethod\tdef_get_exc_class_and_code \tdef_get_exc_class_and_code( def_get_exc_class_and_code(exc_class_or_code _get_exc_class_and_code(exc_class_or_code) (exc_class_or_code): exc_class_or_code):\t ):\t\t\t :\t\t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\" \t\t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\t \t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\tif \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\tifisinstance \tifisinstance( ifisinstance(exc_class_or_code isinstance(exc_class_or_code, (exc_class_or_code,integer_types exc_class_or_code,integer_types) ,integer_types): integer_types):\t ):\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class= \t\t\texc_class=default_exceptions exc_class=default_exceptions[ =default_exceptions[exc_class_or_code default_exceptions[exc_class_or_code] [exc_class_or_code]\t exc_class_or_code]\t\t ]\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class= \t\t\texc_class=exc_class_or_code exc_class=exc_class_or_code\t =exc_class_or_code\t\t exc_class_or_code\t\tassert \t\tassertissubclass \tassertissubclass( assertissubclass(exc_class issubclass(exc_class, (exc_class,Exception exc_class,Exception) ,Exception)\t Exception)\tif )\tifissubclass \tifissubclass( ifissubclass(exc_class issubclass(exc_class, (exc_class,HTTPException exc_class,HTTPException) ,HTTPException): HTTPException):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnexc_class \t\t\treturnexc_class, returnexc_class,exc_class exc_class,exc_class. ,exc_class.code exc_class.code\t .code\t\t code\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnexc_class \t\t\treturnexc_class, returnexc_class,None exc_class,None\t ,None\t\t None\t\t\t \t\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeferrorhandler \tdeferrorhandler( deferrorhandler(self errorhandler(self, (self,code_or_exception self,code_or_exception) ,code_or_exception): code_or_exception):\t ):\t\t\t :\t\t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\" \t\t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\t \t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\tdef \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself._register_error_handler self._register_error_handler( ._register_error_handler(None _register_error_handler(None, (None,code_or_exception None,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefregister_error_handler \tdefregister_error_handler( defregister_error_handler(self register_error_handler(self, (self,code_or_exception self,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself. \tself._register_error_handler self._register_error_handler( ._register_error_handler(None _register_error_handler(None, (None,code_or_exception None,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f)\t f)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdef_register_error_handler \tdef_register_error_handler( def_register_error_handler(self _register_error_handler(self, (self,key self,key, ,key,code_or_exception key,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\" \t\t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\t \t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\tif \"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\tifisinstance \tifisinstance( ifisinstance(code_or_exception isinstance(code_or_exception, (code_or_exception,HTTPException code_or_exception,HTTPException) ,HTTPException): HTTPException):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseValueError \t\t\traiseValueError( raiseValueError(\"Tried to register a handler for an exception instance {0!r}.\" ValueError(\"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\" (\"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\"\" HTTP error codes.\" \"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\"\" HTTP error codes.\". \" Handlers can only be registered for exception classes or\"\" HTTP error codes.\".format \" HTTP error codes.\".format( .format(code_or_exception format(code_or_exception) (code_or_exception)) code_or_exception))\t ))\t\t )\t\ttry \t\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class, \t\t\texc_class,code exc_class,code= ,code=self code=self. =self._get_exc_class_and_code self._get_exc_class_and_code( ._get_exc_class_and_code(code_or_exception _get_exc_class_and_code(code_or_exception) (code_or_exception)\t code_or_exception)\t\t )\t\texcept \t\texceptKeyError \texceptKeyError: exceptKeyError:\t KeyError:\t\t\t\t :\t\t\t\traise \t\t\t\traiseKeyError \t\t\traiseKeyError( raiseKeyError(\"'{0}' is not a recognized HTTP error code. Use a subclass of\" KeyError(\"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\" (\"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\". \"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\".format \" HTTPException with that code instead.\".format( .format(code_or_exception format(code_or_exception) (code_or_exception)) code_or_exception))\t ))\t\t )\t\thandlers \t\thandlers= \thandlers=self handlers=self. =self.error_handler_spec self.error_handler_spec. .error_handler_spec.setdefault error_handler_spec.setdefault( .setdefault(key setdefault(key, (key,{ key,{} ,{}) {}). }).setdefault ).setdefault( .setdefault(code setdefault(code, (code,{ code,{} ,{}) {})\t })\thandlers )\thandlers[ \thandlers[exc_class handlers[exc_class] [exc_class]= exc_class]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_filter \tdeftemplate_filter( deftemplate_filter(self template_filter(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_filter self.add_template_filter( .add_template_filter(f add_template_filter(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_filter \tdefadd_template_filter( defadd_template_filter(self add_template_filter(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.filters jinja_env.filters[ .filters[name filters[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_test \tdeftemplate_test( deftemplate_test(self template_test(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_test self.add_template_test( .add_template_test(f add_template_test(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_test \tdefadd_template_test( defadd_template_test(self add_template_test(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.tests jinja_env.tests[ .tests[name tests[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_global \tdeftemplate_global( deftemplate_global(self template_global(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_global self.add_template_global( .add_template_global(f add_template_global(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_global \tdefadd_template_global( defadd_template_global(self add_template_global(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.globals jinja_env.globals[ .globals[name globals[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefbefore_request \tdefbefore_request( defbefore_request(self before_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\" \t\t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\t \t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\tself \"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\tself. \tself.before_request_funcs self.before_request_funcs. .before_request_funcs.setdefault before_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefbefore_first_request \tdefbefore_first_request( defbefore_first_request(self before_first_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself. \tself.before_first_request_funcs self.before_first_request_funcs. .before_first_request_funcs.append before_first_request_funcs.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefafter_request \tdefafter_request( defafter_request(self after_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\" \t\t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\t \t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\tself \"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\tself. \tself.after_request_funcs self.after_request_funcs. .after_request_funcs.setdefault after_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefteardown_request \tdefteardown_request( defteardown_request(self teardown_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\" \t\t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\t \t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\tself \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\tself. \tself.teardown_request_funcs self.teardown_request_funcs. .teardown_request_funcs.setdefault teardown_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefteardown_appcontext \tdefteardown_appcontext( defteardown_appcontext(self teardown_appcontext(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\tself \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\tself. \tself.teardown_appcontext_funcs self.teardown_appcontext_funcs. .teardown_appcontext_funcs.append teardown_appcontext_funcs.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefcontext_processor \tdefcontext_processor( defcontext_processor(self context_processor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a template context processor function.\"\"\" \t\t\t\"\"\"Registers a template context processor function.\"\"\"\t \t\t\"\"\"Registers a template context processor function.\"\"\"\tself \"\"\"Registers a template context processor function.\"\"\"\tself. \tself.template_context_processors self.template_context_processors[ .template_context_processors[None template_context_processors[None] [None]. None].append ].append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefshell_context_processor \tdefshell_context_processor( defshell_context_processor(self shell_context_processor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\tself \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\tself. \tself.shell_context_processors self.shell_context_processors. .shell_context_processors.append shell_context_processors.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefurl_value_preprocessor \tdefurl_value_preprocessor( defurl_value_preprocessor(self url_value_preprocessor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\" \t\t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\t \t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\tself \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\tself. \tself.url_value_preprocessors self.url_value_preprocessors. .url_value_preprocessors.setdefault url_value_preprocessors.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefurl_defaults \tdefurl_defaults( defurl_defaults(self url_defaults(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\" \t\t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\t \t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\tself \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\tself. \tself.url_default_functions self.url_default_functions. .url_default_functions.setdefault url_default_functions.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\tdef \t\tdef_find_error_handler \tdef_find_error_handler( def_find_error_handler(self _find_error_handler(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\" \t\t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\t \t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\texc_class \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\texc_class, \texc_class,code exc_class,code= ,code=self code=self. =self._get_exc_class_and_code self._get_exc_class_and_code( ._get_exc_class_and_code(type _get_exc_class_and_code(type( (type(e type(e) (e)) e))\t ))\tfor )\tforname \tforname, forname,c name,cin ,cin( cin(( in((request ((request. (request.blueprint request.blueprint, .blueprint,code blueprint,code) ,code), code),( ),(None ,(None, (None,code None,code) ,code), code),( ),(request ,(request. (request.blueprint request.blueprint, .blueprint,None blueprint,None) ,None), None),( ),(None ,(None, (None,None None,None) ,None), None),) ),): ,):\t ):\t\t\t\t :\t\t\t\thandler_map \t\t\t\thandler_map= \t\t\thandler_map=self handler_map=self. =self.error_handler_spec self.error_handler_spec. .error_handler_spec.setdefault error_handler_spec.setdefault( .setdefault(name setdefault(name, (name,{ name,{} ,{}) {}). }).get ).get( .get(c get(c) (c)\t c)\tif )\tifnot \tifnothandler_map ifnothandler_map: nothandler_map:\t handler_map:\t\t\t\t\t :\t\t\t\t\tcontinue \t\t\t\t\tcontinue\t \t\t\t\tcontinue\t\t continue\t\tfor \t\tforcls \tforclsin forclsinexc_class clsinexc_class. inexc_class.__mro__ exc_class.__mro__: .__mro__:\t __mro__:\t\t\t\t\t :\t\t\t\t\thandler \t\t\t\t\thandler= \t\t\t\thandler=handler_map handler=handler_map. =handler_map.get handler_map.get( .get(cls get(cls) (cls)\t cls)\tif )\tifhandler \tifhandleris ifhandlerisnot handlerisnotNone isnotNone: notNone:\t None:\t\t\t\t\t\t :\t\t\t\t\t\treturn \t\t\t\t\t\treturnhandler \t\t\t\t\treturnhandler\t returnhandler\t\t handler\t\t\t \t\t\t\t \t\t\t\t \t\t\tdef \t\tdefhandle_http_exception \tdefhandle_http_exception( defhandle_http_exception(self handle_http_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\tif \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\tife \tife. ife.code e.codeis .codeisNone codeisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\tif \t\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,RoutingException e,RoutingException) ,RoutingException): RoutingException):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\thandler \t\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(e _find_error_handler(e) (e)\t e)\tif )\tifhandler \tifhandleris ifhandlerisNone handlerisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\treturn \t\treturnhandler \treturnhandler( returnhandler(e handler(e) (e)\t e)\t\t )\t\tdef \t\tdeftrap_http_exception \tdeftrap_http_exception( deftrap_http_exception(self trap_http_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\tif \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\tifself \tifself. ifself.config self.config[ .config[\"TRAP_HTTP_EXCEPTIONS\" config[\"TRAP_HTTP_EXCEPTIONS\"] [\"TRAP_HTTP_EXCEPTIONS\"]: \"TRAP_HTTP_EXCEPTIONS\"]:\t ]:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\ttrap_bad_request \t\ttrap_bad_request= \ttrap_bad_request=self trap_bad_request=self. =self.config self.config[ .config[\"TRAP_BAD_REQUEST_ERRORS\" config[\"TRAP_BAD_REQUEST_ERRORS\"] [\"TRAP_BAD_REQUEST_ERRORS\"]\t \"TRAP_BAD_REQUEST_ERRORS\"]\tif ]\tif( \tif(trap_bad_request if(trap_bad_requestis (trap_bad_requestisNone trap_bad_requestisNoneand isNoneandself Noneandself. andself.debug self.debugand .debugandisinstance debugandisinstance( andisinstance(e isinstance(e, (e,BadRequestKeyError e,BadRequestKeyError) ,BadRequestKeyError)) BadRequestKeyError)): )):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\tif \t\tiftrap_bad_request \tiftrap_bad_request: iftrap_bad_request:\t trap_bad_request:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnisinstance \t\t\treturnisinstance( returnisinstance(e isinstance(e, (e,BadRequest e,BadRequest) ,BadRequest)\t BadRequest)\t\t )\t\treturn \t\treturnFalse \treturnFalse\t returnFalse\t\t False\t\tdef \t\tdefhandle_user_exception \tdefhandle_user_exception( defhandle_user_exception(self handle_user_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\texc_type \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tassert )\tassertexc_value \tassertexc_valueis assertexc_valueise exc_valueise\t ise\tif e\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,BadRequestKeyError e,BadRequestKeyError) ,BadRequestKeyError): BadRequestKeyError):\t ):\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself.debug self.debugor .debugorself debugorself. orself.config self.config[ .config[\"TRAP_BAD_REQUEST_ERRORS\" config[\"TRAP_BAD_REQUEST_ERRORS\"] [\"TRAP_BAD_REQUEST_ERRORS\"]: \"TRAP_BAD_REQUEST_ERRORS\"]:\t ]:\t\t\t\t\t :\t\t\t\t\te \t\t\t\t\te. \t\t\t\te.show_exception e.show_exception= .show_exception=True show_exception=True\t =True\tif True\tife \tife. ife.args e.args[ .args[0 args[0] [0]not 0]notin ]notine notine. ine.get_description e.get_description( .get_description() get_description(): ():\t ):\t\t\t\t\t\t :\t\t\t\t\t\te \t\t\t\t\t\te. \t\t\t\t\te.description e.description= .description=\"KeyError: '{}'\" description=\"KeyError: '{}'\". =\"KeyError: '{}'\".format \"KeyError: '{}'\".format( .format(* format(*e (*e. *e.args e.args) .args)\t args)\t\t )\t\t\t \t\t\telif \t\telifnot \telifnothasattr elifnothasattr( nothasattr(BadRequestKeyError hasattr(BadRequestKeyError, (BadRequestKeyError,\"show_exception\" BadRequestKeyError,\"show_exception\") ,\"show_exception\"): \"show_exception\"):\t ):\t\t\t\t\t :\t\t\t\t\te \t\t\t\t\te. \t\t\t\te.args e.args= .args=( args=() =()\t ()\t\t )\t\t\t \t\t\tif \t\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,HTTPException e,HTTPException) ,HTTPException)and HTTPException)andnot )andnotself andnotself. notself.trap_http_exception self.trap_http_exception( .trap_http_exception(e trap_http_exception(e) (e): e):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.handle_http_exception self.handle_http_exception( .handle_http_exception(e handle_http_exception(e) (e)\t e)\t\t )\t\thandler \t\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(e _find_error_handler(e) (e)\t e)\tif )\tifhandler \tifhandleris ifhandlerisNone handlerisNone: isNone:\t None:\t\t\t\t :\t\t\t\treraise \t\t\t\treraise( \t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\treturn \t\treturnhandler \treturnhandler( returnhandler(e handler(e) (e)\t e)\t\t )\t\tdef \t\tdefhandle_exception \tdefhandle_exception( defhandle_exception(self handle_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\texc_type \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tgot_request_exception )\tgot_request_exception. \tgot_request_exception.send got_request_exception.send( .send(self send(self, (self,exception self,exception= ,exception=e exception=e) =e)\t e)\tif )\tifself \tifself. ifself.propagate_exceptions self.propagate_exceptions: .propagate_exceptions:\t propagate_exceptions:\t\t\t\t :\t\t\t\tif \t\t\t\tifexc_value \t\t\tifexc_valueis ifexc_valueise exc_valueise: ise:\t e:\t\t\t\t\t :\t\t\t\t\treraise \t\t\t\t\treraise( \t\t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traisee \t\t\t\traisee\t raisee\t\t e\t\t\t \t\t\tself \t\tself. \tself.log_exception self.log_exception( .log_exception(( log_exception((exc_type ((exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)) tb))\t ))\tserver_error )\tserver_error= \tserver_error=InternalServerError server_error=InternalServerError( =InternalServerError() InternalServerError()\t ()\tserver_error )\tserver_error. \tserver_error.original_exception server_error.original_exception= .original_exception=e original_exception=e\t =e\thandler e\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(server_error _find_error_handler(server_error) (server_error)\t server_error)\tif )\tifhandler \tifhandleris ifhandlerisnot handlerisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tserver_error \t\t\t\tserver_error= \t\t\tserver_error=handler server_error=handler( =handler(server_error handler(server_error) (server_error)\t server_error)\t\t )\t\treturn \t\treturnself \treturnself. returnself.finalize_request self.finalize_request( .finalize_request(server_error finalize_request(server_error, (server_error,from_error_handler server_error,from_error_handler= ,from_error_handler=True from_error_handler=True) =True)\t True)\t\t )\t\tdef \t\tdeflog_exception \tdeflog_exception( deflog_exception(self log_exception(self, (self,exc_info self,exc_info) ,exc_info): exc_info):\t ):\t\t\t :\t\t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself. \tself.logger self.logger. .logger.error logger.error( .error(\"Exception on %s [%s]\" error(\"Exception on %s [%s]\"% (\"Exception on %s [%s]\"%( \"Exception on %s [%s]\"%(request %(request. (request.path request.path, .path,request path,request. ,request.method request.method) .method), method),exc_info ),exc_info= ,exc_info=exc_info exc_info=exc_info) =exc_info)\t exc_info)\t\t )\t\tdef \t\tdefraise_routing_exception \tdefraise_routing_exception( defraise_routing_exception(self raise_routing_exception(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\tif \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\tif( \tif(not if(notself (notself. notself.debug self.debugor .debugornot debugornotisinstance ornotisinstance( notisinstance(request isinstance(request. (request.routing_exception request.routing_exception, .routing_exception,RequestRedirect routing_exception,RequestRedirect) ,RequestRedirect)or RequestRedirect)orrequest )orrequest. orrequest.method request.methodin .methodin( methodin(\"GET\" in(\"GET\", (\"GET\",\"HEAD\" \"GET\",\"HEAD\", ,\"HEAD\",\"OPTIONS\" \"HEAD\",\"OPTIONS\") ,\"OPTIONS\")) \"OPTIONS\")): )):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiserequest \t\t\traiserequest. raiserequest.routing_exception request.routing_exception\t .routing_exception\t\t routing_exception\t\tfrom \t\tfrom. \tfrom.debughelpers from.debughelpersimport .debughelpersimportFormDataRoutingRedirect debughelpersimportFormDataRoutingRedirect\t importFormDataRoutingRedirect\traise FormDataRoutingRedirect\traiseFormDataRoutingRedirect \traiseFormDataRoutingRedirect( raiseFormDataRoutingRedirect(request FormDataRoutingRedirect(request) (request)\t request)\t\t )\t\tdef \t\tdefdispatch_request \tdefdispatch_request( defdispatch_request(self dispatch_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\" \t\t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\t \t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\treq \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\treq= \treq=_request_ctx_stack req=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request\t .request\tif request\tifreq \tifreq. ifreq.routing_exception req.routing_exceptionis .routing_exceptionisnot routing_exceptionisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.raise_routing_exception self.raise_routing_exception( .raise_routing_exception(req raise_routing_exception(req) (req)\t req)\t\t )\t\trule \t\trule= \trule=req rule=req. =req.url_rule req.url_rule\t .url_rule\tif url_rule\tif( \tif(getattr if(getattr( (getattr(rule getattr(rule, (rule,\"provide_automatic_options\" rule,\"provide_automatic_options\", ,\"provide_automatic_options\",False \"provide_automatic_options\",False) ,False)and False)andreq )andreq. andreq.method req.method== .method==\"OPTIONS\" method==\"OPTIONS\") ==\"OPTIONS\"): \"OPTIONS\"):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.make_default_options_response self.make_default_options_response( .make_default_options_response() make_default_options_response()\t ()\t\t )\t\treturn \t\treturnself \treturnself. returnself.view_functions self.view_functions[ .view_functions[rule view_functions[rule. [rule.endpoint rule.endpoint] .endpoint]( endpoint](** ](**req (**req. **req.view_args req.view_args) .view_args)\t view_args)\t\t )\t\tdef \t\tdeffull_dispatch_request \tdeffull_dispatch_request( deffull_dispatch_request(self full_dispatch_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself. \tself.try_trigger_before_first_request_functions self.try_trigger_before_first_request_functions( .try_trigger_before_first_request_functions() try_trigger_before_first_request_functions()\t ()\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\trequest_started \t\t\t\trequest_started. \t\t\trequest_started.send request_started.send( .send(self send(self) (self)\t self)\trv )\trv= \trv=self rv=self. =self.preprocess_request self.preprocess_request( .preprocess_request() preprocess_request()\t ()\tif )\tifrv \tifrvis ifrvisNone rvisNone: isNone:\t None:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=self rv=self. =self.dispatch_request self.dispatch_request( .dispatch_request() dispatch_request()\t ()\t\t )\t\t\t \t\t\texcept \t\texceptException \texceptExceptionas exceptExceptionase Exceptionase: ase:\t e:\t\t\t\t :\t\t\t\trv \t\t\t\trv= \t\t\trv=self rv=self. =self.handle_user_exception self.handle_user_exception( .handle_user_exception(e handle_user_exception(e) (e)\t e)\t\t )\t\treturn \t\treturnself \treturnself. returnself.finalize_request self.finalize_request( .finalize_request(rv finalize_request(rv) (rv)\t rv)\t\t )\t\tdef \t\tdeffinalize_request \tdeffinalize_request( deffinalize_request(self finalize_request(self, (self,rv self,rv, ,rv,from_error_handler rv,from_error_handler= ,from_error_handler=False from_error_handler=False) =False): False):\t ):\t\t\t :\t\t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\tresponse \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\tresponse= \tresponse=self response=self. =self.make_response self.make_response( .make_response(rv make_response(rv) (rv)\t rv)\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\tresponse \t\t\t\tresponse= \t\t\tresponse=self response=self. =self.process_response self.process_response( .process_response(response process_response(response) (response)\t response)\trequest_finished )\trequest_finished. \trequest_finished.send request_finished.send( .send(self send(self, (self,response self,response= ,response=response response=response) =response)\t response)\t\t )\t\texcept \t\texceptException \texceptException: exceptException:\t Exception:\t\t\t\t :\t\t\t\tif \t\t\t\tifnot \t\t\tifnotfrom_error_handler ifnotfrom_error_handler: notfrom_error_handler:\t from_error_handler:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traise\t \t\t\t\traise\t\t raise\t\tself \t\tself. \tself.logger self.logger. .logger.exception logger.exception( .exception(\"Request finalizing failed with an error while handling an error\" exception(\"Request finalizing failed with an error while handling an error\") (\"Request finalizing failed with an error while handling an error\")\t \"Request finalizing failed with an error while handling an error\")\t\t )\t\treturn \t\treturnresponse \treturnresponse\t returnresponse\t\t response\t\tdef \t\tdeftry_trigger_before_first_request_functions \tdeftry_trigger_before_first_request_functions( deftry_trigger_before_first_request_functions(self try_trigger_before_first_request_functions(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\tif \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\tifself \tifself. ifself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t :\t\t\t\treturn \t\t\t\treturn\t \t\t\treturn\t\t return\t\twith \t\twithself \twithself. withself._before_request_lock self._before_request_lock: ._before_request_lock:\t _before_request_lock:\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturn\t \t\t\t\treturn\t\t return\t\tfor \t\tforfunc \tforfuncin forfuncinself funcinself. inself.before_first_request_funcs self.before_first_request_funcs: .before_first_request_funcs:\t before_first_request_funcs:\t\t\t\t\t :\t\t\t\t\tfunc \t\t\t\t\tfunc( \t\t\t\tfunc() func()\t ()\t\t )\t\tself \t\tself. \tself._got_first_request self._got_first_request= ._got_first_request=True _got_first_request=True\t =True\t\t True\t\t\t \t\t\tdef \t\tdefmake_default_options_response \tdefmake_default_options_response( defmake_default_options_response(self make_default_options_response(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\tadapter \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\tadapter= \tadapter=_request_ctx_stack adapter=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.url_adapter top.url_adapter\t .url_adapter\tmethods url_adapter\tmethods= \tmethods=adapter methods=adapter. =adapter.allowed_methods adapter.allowed_methods( .allowed_methods() allowed_methods()\t ()\trv )\trv= \trv=self rv=self. =self.response_class self.response_class( .response_class() response_class()\t ()\trv )\trv. \trv.allow rv.allow. .allow.update allow.update( .update(methods update(methods) (methods)\t methods)\treturn )\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefshould_ignore_error \tdefshould_ignore_error( defshould_ignore_error(self should_ignore_error(self, (self,error self,error) ,error): error):\t ):\t\t\t :\t\t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\" \t\t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\t \t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\treturn \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\treturnFalse \treturnFalse\t returnFalse\t\t False\t\tdef \t\tdefmake_response \tdefmake_response( defmake_response(self make_response(self, (self,rv self,rv) ,rv): rv):\t ):\t\t\t :\t\t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\" \t\t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\t \t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\tstatus \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\tstatus= \tstatus=headers status=headers= =headers=None headers=None\t =None\tif None\tifisinstance \tifisinstance( ifisinstance(rv isinstance(rv, (rv,tuple rv,tuple) ,tuple): tuple):\t ):\t\t\t\t :\t\t\t\tlen_rv \t\t\t\tlen_rv= \t\t\tlen_rv=len len_rv=len( =len(rv len(rv) (rv)\t rv)\tif )\tiflen_rv \tiflen_rv== iflen_rv==3 len_rv==3: ==3:\t 3:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv, \t\t\t\trv,status rv,status, ,status,headers status,headers= ,headers=rv headers=rv\t =rv\t\t rv\t\telif \t\teliflen_rv \teliflen_rv== eliflen_rv==2 len_rv==2: ==2:\t 2:\t\t\t\t\t :\t\t\t\t\tif \t\t\t\t\tifisinstance \t\t\t\tifisinstance( ifisinstance(rv isinstance(rv[ (rv[1 rv[1] [1], 1],( ],(Headers ,(Headers, (Headers,dict Headers,dict, ,dict,tuple dict,tuple, ,tuple,list tuple,list) ,list)) list)): )):\t ):\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv, \t\t\t\t\trv,headers rv,headers= ,headers=rv headers=rv\t =rv\t\t rv\t\telse \t\telse: \telse:\t else:\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv, \t\t\t\t\trv,status rv,status= ,status=rv status=rv\t =rv\t\t rv\t\t\t \t\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseTypeError \t\t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid response tuple.\" TypeError(\"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\" (\"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\" \"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\") \" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\")\t \" (body, status), or (body, headers).\")\t\t )\t\t\t \t\t\tif \t\tifrv \tifrvis ifrvisNone rvisNone: isNone:\t None:\t\t\t\t :\t\t\t\traise \t\t\t\traiseTypeError \t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid response. The\" TypeError(\"The view function did not return a valid response. The\"\" function either returned None or ended without a return\" (\"The view function did not return a valid response. The\"\" function either returned None or ended without a return\"\" statement.\" \"The view function did not return a valid response. The\"\" function either returned None or ended without a return\"\" statement.\") \" function either returned None or ended without a return\"\" statement.\")\t \" statement.\")\t\t )\t\tif \t\tifnot \tifnotisinstance ifnotisinstance( notisinstance(rv isinstance(rv, (rv,self rv,self. ,self.response_class self.response_class) .response_class): response_class):\t ):\t\t\t\t :\t\t\t\tif \t\t\t\tifisinstance \t\t\tifisinstance( ifisinstance(rv isinstance(rv, (rv,( rv,(text_type ,(text_type, (text_type,bytes text_type,bytes, ,bytes,bytearray bytes,bytearray) ,bytearray)) bytearray)): )):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=self rv=self. =self.response_class self.response_class( .response_class(rv response_class(rv, (rv,status rv,status= ,status=status status=status, =status,headers status,headers= ,headers=headers headers=headers) =headers)\t headers)\tstatus )\tstatus= \tstatus=headers status=headers= =headers=None headers=None\t =None\t\t None\t\telif \t\telifisinstance \telifisinstance( elifisinstance(rv isinstance(rv, (rv,dict rv,dict) ,dict): dict):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=jsonify rv=jsonify( =jsonify(rv jsonify(rv) (rv)\t rv)\t\t )\t\telif \t\telifisinstance \telifisinstance( elifisinstance(rv isinstance(rv, (rv,BaseResponse rv,BaseResponse) ,BaseResponse)or BaseResponse)orcallable )orcallable( orcallable(rv callable(rv) (rv): rv):\t ):\t\t\t\t\t :\t\t\t\t\ttry \t\t\t\t\ttry: \t\t\t\ttry:\t try:\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv= \t\t\t\t\trv=self rv=self. =self.response_class self.response_class. .response_class.force_type response_class.force_type( .force_type(rv force_type(rv, (rv,request rv,request. ,request.environ request.environ) .environ)\t environ)\t\t )\t\texcept \t\texceptTypeError \texceptTypeErroras exceptTypeErrorase TypeErrorase: ase:\t e:\t\t\t\t\t\t :\t\t\t\t\t\tnew_error \t\t\t\t\t\tnew_error= \t\t\t\t\tnew_error=TypeError new_error=TypeError( =TypeError(\"{e}\\nThe view function did not return a valid\" TypeError(\"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\" (\"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\" \"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\" \" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\". \" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\".format \" {rv.__class__.__name__}.\".format( .format(e format(e= (e=e e=e, =e,rv e,rv= ,rv=rv rv=rv) =rv)) rv))\t ))\treraise )\treraise( \treraise(TypeError reraise(TypeError, (TypeError,new_error TypeError,new_error, ,new_error,sys new_error,sys. ,sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[2 )[2] [2]) 2])\t ])\t\t )\t\t\t \t\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseTypeError \t\t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid\" TypeError(\"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\" (\"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\" \"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\" \" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\". \" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\".format \" {rv.__class__.__name__}.\".format( .format(rv format(rv= (rv=rv rv=rv) =rv)) rv))\t ))\t\t )\t\t\t \t\t\tif \t\tifstatus \tifstatusis ifstatusisnot statusisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tif \t\t\t\tifisinstance \t\t\tifisinstance( ifisinstance(status isinstance(status, (status,( status,(text_type ,(text_type, (text_type,bytes text_type,bytes, ,bytes,bytearray bytes,bytearray) ,bytearray)) bytearray)): )):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv. \t\t\t\trv.status rv.status= .status=status status=status\t =status\t\t status\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv. \t\t\t\trv.status_code rv.status_code= .status_code=status status_code=status\t =status\t\t status\t\t\t \t\t\tif \t\tifheaders \tifheaders: ifheaders:\t headers:\t\t\t\t :\t\t\t\trv \t\t\t\trv. \t\t\trv.headers rv.headers. .headers.extend headers.extend( .extend(headers extend(headers) (headers)\t headers)\t\t )\t\treturn \t\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefcreate_url_adapter \tdefcreate_url_adapter( defcreate_url_adapter(self create_url_adapter(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\" \t\t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\t \t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\tif \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\tifrequest \tifrequestis ifrequestisnot requestisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tsubdomain \t\t\t\tsubdomain= \t\t\tsubdomain=( subdomain=(( =((self ((self. (self.url_map self.url_map. .url_map.default_subdomain url_map.default_subdomainor .default_subdomainorNone default_subdomainorNone) orNone)if None)ifnot )ifnotself ifnotself. notself.subdomain_matching self.subdomain_matchingelse .subdomain_matchingelseNone subdomain_matchingelseNone) elseNone)\t None)\treturn )\treturnself \treturnself. returnself.url_map self.url_map. .url_map.bind_to_environ url_map.bind_to_environ( .bind_to_environ(request bind_to_environ(request. (request.environ request.environ, .environ,server_name environ,server_name= ,server_name=self server_name=self. =self.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"], \"SERVER_NAME\"],subdomain ],subdomain= ,subdomain=subdomain subdomain=subdomain, =subdomain,) subdomain,)\t ,)\t\t )\t\tif \t\tifself \tifself. ifself.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"]is \"SERVER_NAME\"]isnot ]isnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.url_map self.url_map. .url_map.bind url_map.bind( .bind(self bind(self. (self.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"], \"SERVER_NAME\"],script_name ],script_name= ,script_name=self script_name=self. =self.config self.config[ .config[\"APPLICATION_ROOT\" config[\"APPLICATION_ROOT\"] [\"APPLICATION_ROOT\"], \"APPLICATION_ROOT\"],url_scheme ],url_scheme= ,url_scheme=self url_scheme=self. =self.config self.config[ .config[\"PREFERRED_URL_SCHEME\" config[\"PREFERRED_URL_SCHEME\"] [\"PREFERRED_URL_SCHEME\"], \"PREFERRED_URL_SCHEME\"],) ],)\t ,)\t\t )\t\t\t \t\t\tdef \t\tdefinject_url_defaults \tdefinject_url_defaults( definject_url_defaults(self inject_url_defaults(self, (self,endpoint self,endpoint, ,endpoint,values endpoint,values) ,values): values):\t ):\t\t\t :\t\t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfuncs \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfuncs= \tfuncs=self funcs=self. =self.url_default_functions self.url_default_functions. .url_default_functions.get url_default_functions.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tif\".\" \tif\".\"in if\".\"inendpoint \".\"inendpoint: inendpoint:\t endpoint:\t\t\t\t :\t\t\t\tbp \t\t\t\tbp= \t\t\tbp=endpoint bp=endpoint. =endpoint.rsplit endpoint.rsplit( .rsplit(\".\" rsplit(\".\", (\".\",1 \".\",1) ,1)[ 1)[0 )[0] [0]\t 0]\tfuncs ]\tfuncs= \tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.url_default_functions self.url_default_functions. .url_default_functions.get url_default_functions.get( .get(bp get(bp, (bp,( bp,() ,()) ())) )))\t ))\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(endpoint func(endpoint, (endpoint,values endpoint,values) ,values)\t values)\t\t )\t\t\t \t\t\tdef \t\tdefhandle_url_build_error \tdefhandle_url_build_error( defhandle_url_build_error(self handle_url_build_error(self, (self,error self,error, ,error,endpoint error,endpoint, ,endpoint,values endpoint,values) ,values): values):\t ):\t\t\t :\t\t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\" \t\t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\t \t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\texc_type \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tfor )\tforhandler \tforhandlerin forhandlerinself handlerinself. inself.url_build_error_handlers self.url_build_error_handlers: .url_build_error_handlers:\t url_build_error_handlers:\t\t\t\t :\t\t\t\ttry \t\t\t\ttry: \t\t\ttry:\t try:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=handler rv=handler( =handler(error handler(error, (error,endpoint error,endpoint, ,endpoint,values endpoint,values) ,values)\t values)\tif )\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t\t\t :\t\t\t\t\t\treturn \t\t\t\t\t\treturnrv \t\t\t\t\treturnrv\t returnrv\t\t rv\t\t\t \t\t\texcept \t\texceptBuildError \texceptBuildErroras exceptBuildErrorase BuildErrorase: ase:\t e:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=e error=e\t =e\t\t e\t\t\t \t\t\tif \t\tiferror \tiferroris iferrorisexc_value errorisexc_value: isexc_value:\t exc_value:\t\t\t\t :\t\t\t\treraise \t\t\t\treraise( \t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\traise \t\traiseerror \traiseerror\t raiseerror\t\t error\t\tdef \t\tdefpreprocess_request \tdefpreprocess_request( defpreprocess_request(self preprocess_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\" \t\t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\t \t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\tbp \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\tbp= \tbp=_request_ctx_stack bp=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request. .request.blueprint request.blueprint\t .blueprint\tfuncs blueprint\tfuncs= \tfuncs=self funcs=self. =self.url_value_preprocessors self.url_value_preprocessors. .url_value_preprocessors.get url_value_preprocessors.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.url_value_preprocessors self.url_value_preprocessors: .url_value_preprocessors:\t url_value_preprocessors:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.url_value_preprocessors self.url_value_preprocessors[ .url_value_preprocessors[bp url_value_preprocessors[bp] [bp]) bp])\t ])\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(request func(request. (request.endpoint request.endpoint, .endpoint,request endpoint,request. ,request.view_args request.view_args) .view_args)\t view_args)\t\t )\t\tfuncs \t\tfuncs= \tfuncs=self funcs=self. =self.before_request_funcs self.before_request_funcs. .before_request_funcs.get before_request_funcs.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.before_request_funcs self.before_request_funcs: .before_request_funcs:\t before_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.before_request_funcs self.before_request_funcs[ .before_request_funcs[bp before_request_funcs[bp] [bp]) bp])\t ])\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\trv \t\t\t\trv= \t\t\trv=func rv=func( =func() func()\t ()\tif )\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturnrv \t\t\t\treturnrv\t returnrv\t\t rv\t\t\t \t\t\t\t \t\t\tdef \t\tdefprocess_response \tdefprocess_response( defprocess_response(self process_response(self, (self,response self,response) ,response): response):\t ):\t\t\t :\t\t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\" \t\t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\t \t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\tctx \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\tctx= \tctx=_request_ctx_stack ctx=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top\t .top\tbp top\tbp= \tbp=ctx bp=ctx. =ctx.request ctx.request. .request.blueprint request.blueprint\t .blueprint\tfuncs blueprint\tfuncs= \tfuncs=ctx funcs=ctx. =ctx._after_request_functions ctx._after_request_functions\t ._after_request_functions\tif _after_request_functions\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.after_request_funcs self.after_request_funcs: .after_request_funcs:\t after_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.after_request_funcs self.after_request_funcs[ .after_request_funcs[bp after_request_funcs[bp] [bp]) bp])) ]))\t ))\t\t )\t\tif \t\tifNone \tifNonein ifNoneinself Noneinself. inself.after_request_funcs self.after_request_funcs: .after_request_funcs:\t after_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.after_request_funcs self.after_request_funcs[ .after_request_funcs[None after_request_funcs[None] [None]) None])) ]))\t ))\t\t )\t\tfor \t\tforhandler \tforhandlerin forhandlerinfuncs handlerinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tresponse \t\t\t\tresponse= \t\t\tresponse=handler response=handler( =handler(response handler(response) (response)\t response)\t\t )\t\tif \t\tifnot \tifnotself ifnotself. notself.session_interface self.session_interface. .session_interface.is_null_session session_interface.is_null_session( .is_null_session(ctx is_null_session(ctx. (ctx.session ctx.session) .session): session):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.session_interface self.session_interface. .session_interface.save_session session_interface.save_session( .save_session(self save_session(self, (self,ctx self,ctx. ,ctx.session ctx.session, .session,response session,response) ,response)\t response)\t\t )\t\treturn \t\treturnresponse \treturnresponse\t returnresponse\t\t response\t\tdef \t\tdefdo_teardown_request \tdefdo_teardown_request( defdo_teardown_request(self do_teardown_request(self, (self,exc self,exc= ,exc=_sentinel exc=_sentinel) =_sentinel): _sentinel):\t ):\t\t\t :\t\t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\" \t\t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\t \t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\tif \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\tifexc \tifexcis ifexcis_sentinel excis_sentinel: is_sentinel:\t _sentinel:\t\t\t\t :\t\t\t\texc \t\t\t\texc= \t\t\texc=sys exc=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\t\t ]\t\tfuncs \t\tfuncs= \tfuncs=reversed funcs=reversed( =reversed(self reversed(self. (self.teardown_request_funcs self.teardown_request_funcs. .teardown_request_funcs.get teardown_request_funcs.get( .get(None get(None, (None,( None,() ,()) ())) )))\t ))\tbp )\tbp= \tbp=_request_ctx_stack bp=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request. .request.blueprint request.blueprint\t .blueprint\tif blueprint\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.teardown_request_funcs self.teardown_request_funcs: .teardown_request_funcs:\t teardown_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.teardown_request_funcs self.teardown_request_funcs[ .teardown_request_funcs[bp teardown_request_funcs[bp] [bp]) bp])) ]))\t ))\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(exc func(exc) (exc)\t exc)\t\t )\t\trequest_tearing_down \t\trequest_tearing_down. \trequest_tearing_down.send request_tearing_down.send( .send(self send(self, (self,exc self,exc= ,exc=exc exc=exc) =exc)\t exc)\t\t )\t\tdef \t\tdefdo_teardown_appcontext \tdefdo_teardown_appcontext( defdo_teardown_appcontext(self do_teardown_appcontext(self, (self,exc self,exc= ,exc=_sentinel exc=_sentinel) =_sentinel): _sentinel):\t ):\t\t\t :\t\t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\tif \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\tifexc \tifexcis ifexcis_sentinel excis_sentinel: is_sentinel:\t _sentinel:\t\t\t\t :\t\t\t\texc \t\t\t\texc= \t\t\texc=sys exc=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\t\t ]\t\tfor \t\tforfunc \tforfuncin forfuncinreversed funcinreversed( inreversed(self reversed(self. (self.teardown_appcontext_funcs self.teardown_appcontext_funcs) .teardown_appcontext_funcs): teardown_appcontext_funcs):\t ):\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(exc func(exc) (exc)\t exc)\t\t )\t\tappcontext_tearing_down \t\tappcontext_tearing_down. \tappcontext_tearing_down.send appcontext_tearing_down.send( .send(self send(self, (self,exc self,exc= ,exc=exc exc=exc) =exc)\t exc)\t\t )\t\tdef \t\tdefapp_context \tdefapp_context( defapp_context(self app_context(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\treturn \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\treturnAppContext \treturnAppContext( returnAppContext(self AppContext(self) (self)\t self)\t\t )\t\tdef \t\tdefrequest_context \tdefrequest_context( defrequest_context(self request_context(self, (self,environ self,environ) ,environ): environ):\t ):\t\t\t :\t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\" \t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\t \t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\treturn \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\treturnRequestContext \treturnRequestContext( returnRequestContext(self RequestContext(self, (self,environ self,environ) ,environ)\t environ)\t\t )\t\tdef \t\tdeftest_request_context \tdeftest_request_context( deftest_request_context(self test_request_context(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\" \t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\t \t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\tfrom \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\tfrom. \tfrom.testing from.testingimport .testingimportEnvironBuilder testingimportEnvironBuilder\t importEnvironBuilder\tbuilder EnvironBuilder\tbuilder= \tbuilder=EnvironBuilder builder=EnvironBuilder( =EnvironBuilder(self EnvironBuilder(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs)\t kwargs)\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.request_context self.request_context( .request_context(builder request_context(builder. (builder.get_environ builder.get_environ( .get_environ() get_environ()) ())\t ))\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tbuilder \t\t\t\tbuilder. \t\t\tbuilder.close builder.close( .close() close()\t ()\t\t )\t\t\t \t\t\tdef \t\tdefwsgi_app \tdefwsgi_app( defwsgi_app(self wsgi_app(self, (self,environ self,environ, ,environ,start_response environ,start_response) ,start_response): start_response):\t ):\t\t\t :\t\t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\" \t\t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\t \t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\tctx \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\tctx= \tctx=self ctx=self. =self.request_context self.request_context( .request_context(environ request_context(environ) (environ)\t environ)\terror )\terror= \terror=None error=None\t =None\ttry None\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\ttry \t\t\t\ttry: \t\t\ttry:\t try:\t\t\t\t\t :\t\t\t\t\tctx \t\t\t\t\tctx. \t\t\t\tctx.push ctx.push( .push() push()\t ()\tresponse )\tresponse= \tresponse=self response=self. =self.full_dispatch_request self.full_dispatch_request( .full_dispatch_request() full_dispatch_request()\t ()\t\t )\t\texcept \t\texceptException \texceptExceptionas exceptExceptionase Exceptionase: ase:\t e:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=e error=e\t =e\tresponse e\tresponse= \tresponse=self response=self. =self.handle_exception self.handle_exception( .handle_exception(e handle_exception(e) (e)\t e)\t\t )\t\texcept \t\texcept: \texcept:\t except:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=sys error=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\traise ]\traise\t \traise\t\t raise\t\treturn \t\treturnresponse \treturnresponse( returnresponse(environ response(environ, (environ,start_response environ,start_response) ,start_response)\t start_response)\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself.should_ignore_error self.should_ignore_error( .should_ignore_error(error should_ignore_error(error) (error): error):\t ):\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=None error=None\t =None\t\t None\t\tctx \t\tctx. \tctx.auto_pop ctx.auto_pop( .auto_pop(error auto_pop(error) (error)\t error)\t\t )\t\t\t \t\t\tdef \t\tdef__call__ \tdef__call__( def__call__(self __call__(self, (self,environ self,environ, ,environ,start_response environ,start_response) ,start_response): start_response):\t ):\t\t\t :\t\t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\" \t\t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\t \t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\treturn \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\treturnself \treturnself. returnself.wsgi_app self.wsgi_app( .wsgi_app(environ wsgi_app(environ, (environ,start_response environ,start_response) ,start_response)\t start_response)\t\t )\t\tdef \t\tdef__repr__ \tdef__repr__( def__repr__(self __repr__(self) (self): self):\t ):\t\t\t :\t\t\treturn \t\t\treturn\"<%s %r>\" \t\treturn\"<%s %r>\"% return\"<%s %r>\"%( \"<%s %r>\"%(self %(self. (self.__class__ self.__class__. .__class__.__name__ __class__.__name__, .__name__,self __name__,self. ,self.name self.name) .name)\n name)\n\n )\n\n\n \n\n\n< \n\n<EOF \n<EOF>","type":"boolean","boost":4.0}}},{"match":{"src":{"query":"NSNK SNKW NKWN KWNK WNKW NKWN KWNK WNKW NKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNK. NK.K K.KW .KWN KWNK WNK. NK.K K.KW .KWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNW WNWO NWOW WOW( OW() W()N ()NK )NKW NKW( KW(W W(W) (W): W):N ):NI :NIK NIKK IKKW KKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(W W(WO (WOW WOW) OW)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW): W):N ):NI :NIK NIKW IKW. KW.W W.WK .WKW WKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW( KW(S W(SS (SSS SSSS SSSS SSSS SSSS SSS) SS)N S)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S, (S,W S,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOW( OW(S W(S, (S,W S,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW. OW.W W.WN .WNW WNWO NWOW WOW. OW.W W.WN .WNW WNWO NWO{ WO{S O{S: {S:[ S:[S :[S, [S,S S,S] ,S]} S]}N ]}NW }NWO NWOW WOW( OW({ W({S ({S: {S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:W S:W( :W(W W(WO (WOV WOV) OV), V),S ),S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:W S:W( :W(W W(WO (WOV WOV) OV), V),S ),S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:V S:V, :V,} V,}) ,})N })NW )NWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOK WOKN OKNW KNWO NWOK WOKN OKNW KNWO NWOW WOW( OW() W()N ()NW )NWO NWOK WOKN OKNW KNWO NWOK WOKN OKNW KNWO NWOK WOKN OKNK KNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK, OK,W K,WO ,WOS WOS, OS,W S,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOS WOS, OS,W S,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,) K,): ,):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW) OW)N W)NW )NW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOWN OWNK WNKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()N ()ND )NDK NDKK DKKW KKW. KW.W W.W. .W.W W.W( .W(W W(W) (W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SS) SS)N S)ND )NDW NDW. DW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{K O{K: {K:[ K:[W :[W] [W]} W]}N ]}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOK WOKN OKNW KNW. NW.W W.WO .WOW WOW( OW() W()N ()NK )NKW NKW. KW.W W.W: .W:N W:NI :NIK NIK( IK(W K(W( (W(W W(W) (W)O W)OW )OW) OW), W),S ),SN ,SNW SNW. NW.W W.W( .W(W W(W. (W.W W.WO .WOS WOS, OS,W S,WO ,WOS WOS, OS,W S,WO ,WOW WOW, OW,W W,WO ,WOW WOW. OW.W W.W, .W,) W,)N ,)ND )NDW NDW. DW.W W.W. .W.W W.WO .WOW WOW. OW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WO .WOS WOS: OS:N S:NI :NIW NIWO IWOW WOW( OW(W W(W. (W.W W.W[ .W[S W[S] [S], S],S ],S, ,S,K S,K) ,K)N K)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKS IKSN KSND SNDK NDKW DKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W. .W.W W.W( .W(W W(W) (W)) W))[ ))[V )[V] [V]N V]ND ]NDK NDKW DKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW. KW.W W.WK .WKW WKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W( .W() W()N ()ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WN .WND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.WN .WND WNDW NDWO DWOW WOW( OW(W W(W. (W.W W.W) .W)N W)NW )NW[ NW[S W[S] [S]O S]OW ]OW( OW() W()N ()NW )NW[ NW[S W[S] [S]O S]OW ]OW( OW() W()N ()NK )NKW NKW. KW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,WO ,WOW WOW( OW(W W(W. (W.W W.W) .W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKW IKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S) ,S)N S)ND )NDK NDKW DKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S, ,S,W S,W. ,W.W W.WO .WOS WOS) OS)N S)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOS WOS) OS): S):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W. (W.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W) ,W), W),W ),W) ,W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKW WKWK KWKK WKKK KKKK KKKW KKW. KW.W W.WN .WND WNDO NDOW DOW. OW.W W.WN .WNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]O S]OW ]OWN OWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW( OW(W W(W. (W.W W.W) .W)N W)NK )NKS NKSK KSKK SKKW KKW: KW:N W:NI :NIW NIW[ IW[S W[S] [S]O S]OW ]OW. OW.W W.WN .WND WNDK NDKS DKSK KSKK SKKW KKW: KW:N W:NI :NIW NIW[ IW[S W[S] [S]O S]OW ]OW. OW.W W.WN .WND WNDW NDWO DWOW WOW. OW.W W.W( .W(W W(W, (W,O W,OW ,OW) OW)N W)NW )NW. NW.W W.W. .W.W W.W( .W(W W(WO (WOW WOW, OW,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW. OW.W W.W, .W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW, OW,) W,)N ,)NW )NW. NW.W W.W[ .W[S W[S] [S]O S]OW ]OW. OW.W W.WN .WNK WNKW NKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKK: KK:N K:NI :NIK NIKK IKKN KKND KNDK NDKW DKW. KW.W W.W( .W(( W((S ((S, (S,S S,S, ,S,S S,S, ,S,S S,S) ,S)) S))N ))ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[K W[K] [K]N K]NW ]NWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDD NDDW DDWO DWOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKW: KW:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWO{ WO{S O{S: {S:W S:W, :W,S W,S: ,S:W S:W} :W}N W}NK }NKW NKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDK NDKW DKWN KWND WNDW NDWO DWOW WOW( OW(S W(S) (S)N S)NO )NOW NOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W[ .W[S W[S] [S]N S]ND ]NDO NDOW DOW. OW.W W.WN .WNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]O S]OW ]OWN OWNW WNW. NW.W W.W. .W.W W.WO .WOW WOW. OW.W W.WN .WND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W. .W.W W.W( .W(S W(S) (S)O S)OS )OS: OS:N S:NI :NIK NIK. IK.W K.WK .WKW WKWN KWNW WNW( NW() W()N ()NK )NKN NKND KNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W() W()N ()NK )NKS NKSK KSKW SKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.WO .WOW WOW( OW() W()N ()NW )NW. NW.W W.WO .WOW WOW( OW() W()N ()ND )NDK NDKS DKSK KSKW SKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.WO .WOW WOW( OW() W()N ()ND )NDD NDDK DDKW DKWK KWKK WKKK KKK: KK:N K:NI :NIW NIW. IW.W W.WO .WOW WOW( OW(W W(W) (W)N W)ND )NDW NDWO DWOS WOSN OSNW SNWO NWOV WOVN OVNW VNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(S W(S) (S)N S)NW )NW, NW,W W,WO ,WOK WOK, OK,K K,KN ,KNK KNKW NKW: KW:N W:NI :NIW NIW, IW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W(S W(S) (S)N S)ND )NDW NDWO DWOW WOWK OWKW WKWK KWKW WKWN KWNW WNWO NWOW WOW( OW(W W(W( (W(( W((W ((WK (WKW WKWK KWK( WK(W K(W, (W,W W,W) ,W)K W)KW )KWK KWKK WKKK KKK) KK), K),W ),W) ,W)) W))N ))NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NW )NW. NW.W W.W( .W(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W, .W,W W,W. ,W.W W.W, .W,K W,K) ,K)N K)NK )NKW NKW. KW.W W.WK .WKW WKWN KWNK WNK: NK:N K:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W, ,W,O W,OW ,OW) OW)N W)ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.WO .WOK WOKN OKND KNDD NDDK DDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKK: KK:N K:NI :NIK NIK. IK.W K.WK .WKW WKWK KWKW WKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W. ,W.W W.W, .W,W W,WO ,WOW WOW, OW,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKK: KK:N K:NI :NIK NIK. IK.W K.WK .WKW WKWK KWKW WKWN KWND WNDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOK WOKN OKNK KNKW NKW. KW.W W.WK .WKW WKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW. KW.W W.W[ .W[W W[W. [W.W W.W] .W]K W]KW ]KW, KW,( W,(S ,(SS (SSS SSSO SSO( SO(W O(W, (W,W W,W. ,W.W W.W[ .W[W W[W. [W.W W.W] .W], W],W ],W. ,W.W W.W) .W)) W))N ))ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.W[ .W[W W[W. [W.W W.W] .W]O W]OW ]OWN OWNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NW )NWO NWOK WOKN OKND KNDW NDW. DW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W. (W.W W.W) .W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDW NDW[ DW[S W[S] [S]O S]OW ]OWN OWNW WNWO NWOW WOW. OW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,S W,S, ,S,K S,K) ,K)K K)K( )K(S K(S, (S,) S,)N ,)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SS) SS)N S)ND )NDW NDWO DWOW WOW( OW(W W(W. (W.W W.W( .W() W()K ()KW )KWK KWKW WKW) KW)N W)NW )NWO NWOW WOW( OW(W W(W( (W(W W(W, (W,S W,S, ,S,( S,() ,()) ())) )))N ))NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,S W,S, ,S,K S,K) ,K)N K)ND )NDK NDKW DKWK KWKK WKK: KK:N K:NI :NIK NIKS IKSK KSKK SKKW KKW: KW:N W:NI :NIW NIWO IWOK WOKN OKNW KNW. NW.W W.W( .W(S W(S) (S)N S)ND )NDK NDK: DK:N K:NI :NIW NIWO IWOK WOKN OKND KNDD NDDW DDWO DWOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW, OW,O W,OW ,OW) OW)N W)NW )NW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKKK KKKW KKWO KWOW WOW: OW:N W:NI :NIK NIKW IKW( KW(S W(SS (SSO SSOW SOW) OW)N W)ND )NDW NDW. DW.W W.W[ .W[W W[W] [W]O W]OW ]OWN OWND WNDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIWO IWOW WOW. OW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W, ,W,O W,OW ,OW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W[ .W[W W[W] [W]O W]OW ]OWN OWNK WNKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW[ OW[W W[W] [W]N W]ND ]NDK NDK: DK:N K:NI :NIW NIWO IWOW WOWN OWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)NK )NKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW, KW,W W,W. ,W.W W.WN .WND WNDK NDK: DK:N K:NI :NIK NIKW IKW, KW,K W,KN ,KND KNDD NDDO DDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(K W(K, (K,W K,W, ,W,W W,W) ,W)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(K W(K, (K,W K,W, ,W,W W,W) ,W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SSS SSS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDK NDK: DK:N K:NI :NIW NIW, IW,W W,WO ,WOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW: KW:N W:NI :NIK NIKW IKW( KW(S W(SS (SS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDW NDWO DWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W, (W,{ W,{} ,{}) {})N })NW )NW[ NW[W W[W] [W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W[ .W[K W[K] [K]. K].W ].W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,WO ,WOW WOW. OW.W W.W( .W(W W(W( (W(W W(W) (W)) W))N ))NK )NKW NKW, KW,W W,WK ,WK( WK(( K((W ((W. (W.W W.W, .W,W W,W) ,W), W),( ),(K ,(K, (K,W K,W) ,W), W),( ),(W ,(W. (W.W W.W, .W,K W,K) ,K), K),( ),(K ,(K, (K,K K,K) ,K), K),) ),): ,):N ):NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W) (W)N W)NK )NKK NKKW KKW: KW:N W:NI :NIK NIKN IKND KNDK NDKW DKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDD DDDD DDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WK .WKK WKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKWN KWND WNDW NDWO DWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIK NIKK IKKN KKND KNDW NDWO DWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NK( NK(W K(WK (WKK WKKK KKKW KKW. KW.W W.WK .WKW WKW( KW(W W(W, (W,W W,W) ,W)) W)): )):N ):NI :NIK NIKK IKKN KKND KNDK NDKW DKW: KW:N W:NI :NIK NIKW IKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKK DKKN KKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKWN KWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW. KW.W W.WK .WKW WKW. KW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIW NIW. IW.W W.WO .WOK WOKN OKNK KNKW NKW. KW.W W.W[ .W[V W[V] [V]K V]KK ]KKW KKW. KW.W W.W( .W() W(): ():N ):NI :NIW NIW. IW.W W.WO .WOS WOS. OS.W S.W( .W(O W(OW (OW. OW.W W.W) .W)N W)ND )NDD NDDK DDKK DKKW KKW( KW(W W(W, (W,S W,S) ,S): S):N ):NI :NIW NIW. IW.W W.WO .WO( WO() O()N ()ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W)K W)KK )KKW KKW. KW.W W.W( .W(W W(W) (W): W):N ):NI :NIK NIKW IKW. KW.W W.W( .W(W W(W) (W)N W)ND )NDW NDWO DWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKW. KW.W W.W: .W:N W:NI :NIK NIKW IKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDK: DK:N K:NI :NIK NIKW IKWN KWND WNDD NDDW DDW. DW.W W.W( .W(( W((W ((W, (W,W W,W, ,W,W W,W) ,W)) W))N ))NW )NWO NWOW WOW( OW() W()N ()NW )NW. NW.W W.WO .WOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKW DKW. KW.W W.W( .W(W W(W, (W,W W,WO ,WOK WOK) OK)N K)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(S W(SO (SO( SO(W O(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W), W),W ),WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNK( NK(K K(KW (KW. KW.W W.WK .WKK WKKW KKW( KW(W W(W. (W.W W.W, .W,W W,W) ,W)K W)KW )KW. KW.W W.WK .WK( WK(S K(S, (S,S S,S, ,S,S S,S) ,S)) S)): )):N ):NI :NIK NIKW IKW. KW.W W.WN .WND WNDK NDK. DK.W K.WK .WKW WKWN KWNK WNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNK WNKW NKW. KW.W W.WK .WKK WKKK KKK: KK:N K:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)ND )NDW NDWO DWOW WOW. OW.W W.WN .WNK WNK( NK(W K(W( (W(W W(W, (W,S W,S, ,S,K S,K) ,K)K K)KW )KW. KW.W W.WO .WOS WOS) OS): S):N ):NI :NIK NIKW IKW. KW.W W.W( .W() W()N ()ND )NDK NDKW DKW. KW.W W.W[ .W[W W[W. [W.W W.W] .W]( W](O ](OW (OW. OW.W W.W) .W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W() W()N ()NK )NK: NK:N K:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()N ()ND )NDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW. KW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NK: NK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW: KW:N W:NI :NIK NIKK IKKW KKW: KW:N W:NI :NIK NIKN IKND KNDW NDW. DW.W W.W. .W.W W.W( .W(S W(S) (S)N S)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W: .W:N W:NI :NIK NIKN IKND KNDK NDKW DKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW. KW.W W.W: .W:N W:NI :NIK NIKN IKND KNDK NDKW DKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIW( IW() W()N ()ND )NDW NDW. DW.W W.WO .WOK WOKN OKND KNDD NDDK DDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.W( .W() W()N ()NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKK NKKN KKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOWO OWOK WOKN OKNK KNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)NK )NKW NKWO KWOV WOV: OV:N V:NI :NIW NIW, IW,W W,W, ,W,W W,WO ,WOW WOWN OWND WNDK NDKW DKWO KWOV WOV: OV:N V:NI :NIK NIKW IKW( KW(W W(W[ (W[V W[V] [V], V],( ],(W ,(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW, IW,W W,WO ,WOW WOWN OWND WNDK NDK: DK:N K:NI :NIW NIW, IW,W W,WO ,WOW WOWN OWND WNDD NDDK DDK: DK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSS) SS)N S)ND )NDD NDDK DDKW DKWK KWKK WKK: KK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSS) SS)N S)ND )NDK NDKK DKKW KKW( KW(W W(W, (W,W W,W. ,W.W W.W) .W): W):N ):NI :NIK NIKW IKW( KW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOWO OWOK WOKN OKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)K W)KW )KW( KW(W W(W) (W): W):N ):NI :NIK NIK: IK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W) .W)N W)ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(WO (WOW WOW, OW,W W,WO ,WOW WOW) OW)) W))N ))NW )NW( NW(W W(W, (W,W W,W, ,W,W W,W. ,W.W W.W( .W() W()[ ()[V )[V] [V]) V])N ])ND )NDD NDDK DDK: DK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(WO (WOW WOW) OW)) W))N ))ND )NDD NDDK DDKW DKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKW( KW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW. IW.W W.WO .WOW WOWN OWND WNDK NDK: DK:N K:NI :NIW NIW. IW.W W.WO .WOW WOWN OWND WNDD NDDK DDKW DKW: KW:N W:NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWO( WO(( O((W ((W. (W.W W.W. .W.W W.WK .WKK WKK) KK)K K)KK )KKW KKW. KW.W W.WK .WKK WKK) KK)N K)NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW, OW,) W,)N ,)ND )NDK NDKW DKW. KW.W W.W[ .W[S W[S] [S]K S]KK ]KKK KKK: KK:N K:NI :NIK NIKW IKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],) ],)N ,)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKS NKSK KSKW SKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(S W(S, (S,V S,V) ,V)[ V)[V )[V] [V]N V]NW ]NWO NWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W. .W.W W.W( .W(W W(W, (W,( W,() ,()) ())) )))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W) ,W)N W)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIK NIK: IK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOWN OWND WNDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDW NDWO DWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW() W()N ()NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDD DDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNW WNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDK NDKK DKKK KKKW KKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[K W[K] [K]) K])) ]))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKK DKKW KKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W) ,W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOW WOW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDW NDWO DWOW WOW( OW(W W(W. (W.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())) )))N ))NW )NWO NWOW WOW. OW.W W.W. .W.W W.W. .W.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOW WOW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDK NDKW DKWK KWKW WKW( KW(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNK. NK.W K.WK .WKW WKWN KWNW WNWO NWOW WOW( OW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW)N W)NK )NK: NK:N K:NI :NIK NIKW IKW. KW.W W.W( .W(W W(W. (W.W W.W( .W() W()) ())N ))ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.W( .W() W()N ()ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NWO NWOK WOKN OKNK KNK: NK:N K:NI :NIK NIK: IK:N K:NI :NIW NIW. IW.W W.W( .W() W()N ()NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDK: DK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]NK ]NKN NKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDK: DK:N K:NI :NIK NIKW IKW. KW.W W.W( .W(W W(W) (W): W):N ):NI :NIW NIWO IWOK WOKN OKND KNDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIK NIKS IKSO KSO( SO(W O(W. (W.W W.W. .W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDD NDDO DDOW DOWO","type":"boolean","boost":4.0}}}]}},"sort":[{"_score":{"order":"desc"}},{"file":{"order":"desc"}}]}]]; nested: TooManyClauses[maxClauseCount is set to 20480];
	at org.elasticsearch.search.SearchService.parseSource(SearchService.java:853)
	at org.elasticsearch.search.SearchService.createContext(SearchService.java:652)
	at org.elasticsearch.search.SearchService.createAndPutContext(SearchService.java:618)
	at org.elasticsearch.search.SearchService.executeFetchPhase(SearchService.java:461)
	at org.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryFetchTransportHandler.messageReceived(SearchServiceTransportAction.java:392)
	at org.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryFetchTransportHandler.messageReceived(SearchServiceTransportAction.java:389)
	at org.elasticsearch.transport.TransportService$4.doRun(TransportService.java:350)
	at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.lucene.search.BooleanQuery$TooManyClauses: maxClauseCount is set to 20480
	at org.apache.lucene.search.BooleanQuery$Builder.add(BooleanQuery.java:136)
	at org.apache.lucene.util.QueryBuilder.add(QueryBuilder.java:302)
	at org.apache.lucene.util.QueryBuilder.analyzeMultiBoolean(QueryBuilder.java:322)
	at org.apache.lucene.util.QueryBuilder.createFieldQuery(QueryBuilder.java:257)
	at org.apache.lucene.util.QueryBuilder.createBooleanQuery(QueryBuilder.java:87)
	at org.elasticsearch.index.search.MatchQuery.parse(MatchQuery.java:178)
	at org.elasticsearch.index.query.MatchQueryParser.parse(MatchQueryParser.java:165)
	at org.elasticsearch.index.query.QueryParseContext.parseInnerQuery(QueryParseContext.java:256)
	at org.elasticsearch.index.query.BoolQueryParser.parse(BoolQueryParser.java:116)
	at org.elasticsearch.index.query.QueryParseContext.parseInnerQuery(QueryParseContext.java:256)
	at org.elasticsearch.index.query.IndexQueryParserService.innerParse(IndexQueryParserService.java:303)
	at org.elasticsearch.index.query.IndexQueryParserService.parse(IndexQueryParserService.java:206)
	at org.elasticsearch.index.query.IndexQueryParserService.parse(IndexQueryParserService.java:201)
	at org.elasticsearch.search.query.QueryParseElement.parse(QueryParseElement.java:33)
	at org.elasticsearch.search.SearchService.parseSource(SearchService.java:836)
	... 10 more
[2020-03-04 14:42:55,928][DEBUG][action.search.type       ] [Talisman] All shards failed for phase: [query_fetch]
RemoteTransportException[[Talisman][127.0.0.1:9300][indices:data/read/search[phase/query+fetch]]]; nested: SearchParseException[failed to parse search source [{"from":0,"size":100,"query":{"bool":{"should":[{"match":{"tokenizedsrc":{"query":"\n \"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\" \n import os \n import sys \n import warnings \n from datetime import timedelta \n from functools import update_wrapper \n from itertools import chain \n from threading import Lock \n from werkzeug . datastructures import Headers \n from werkzeug . datastructures import ImmutableDict \n from werkzeug . exceptions import BadRequest \n from werkzeug . exceptions import BadRequestKeyError \n from werkzeug . exceptions import default_exceptions \n from werkzeug . exceptions import HTTPException \n from werkzeug . exceptions import InternalServerError \n from werkzeug . routing import BuildError \n from werkzeug . routing import Map \n from werkzeug . routing import RequestRedirect \n from werkzeug . routing import RoutingException \n from werkzeug . routing import Rule \n from werkzeug . wrappers import BaseResponse \n from . import cli \n from . import json \n from . _compat import integer_types \n from . _compat import reraise \n from . _compat import string_types \n from . _compat import text_type \n from . config import Config \n from . config import ConfigAttribute \n from . ctx import _AppCtxGlobals \n from . ctx import AppContext \n from . ctx import RequestContext \n from . globals import _request_ctx_stack \n from . globals import g \n from . globals import request \n from . globals import session \n from . helpers import _endpoint_from_view_func \n from . helpers import _PackageBoundObject \n from . helpers import find_package \n from . helpers import get_debug_flag \n from . helpers import get_env \n from . helpers import get_flashed_messages \n from . helpers import get_load_dotenv \n from . helpers import locked_cached_property \n from . helpers import url_for \n from . json import jsonify \n from . logging import create_logger \n from . sessions import SecureCookieSessionInterface \n from . signals import appcontext_tearing_down \n from . signals import got_request_exception \n from . signals import request_finished \n from . signals import request_started \n from . signals import request_tearing_down \n from . templating import _default_template_ctx_processor \n from . templating import DispatchingJinjaLoader \n from . templating import Environment \n from . wrappers import Request \n from . wrappers import Response \n _sentinel = object ( ) \n def _make_timedelta ( value ) : \t \t if not isinstance ( value , timedelta ) : \t \t\t return timedelta ( seconds = value ) \t \t return value \n \n def setupmethod ( f ) : \t \t \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\" \t def wrapper_func ( self , * args , ** kwargs ) : \t \t\t if self . debug and self . _got_first_request : \t \t\t\t raise AssertionError ( \"A setup function was called after the \" \"first request was handled.  This usually indicates a bug \" \"in the application where a module was not imported \" \"and decorators or other functionality was called too late.\\n\" \"To fix this make sure to import all your view modules, \" \"database models and everything related at a central place \" \"before the application starts serving requests.\" ) \t \t return f ( self , * args , ** kwargs ) \t \t return update_wrapper ( wrapper_func , f ) \n \n class Flask ( _PackageBoundObject ) : \t \t \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\" \t request_class = Request \t response_class = Response \t jinja_environment = Environment \t app_ctx_globals_class = _AppCtxGlobals \t config_class = Config \t testing = ConfigAttribute ( \"TESTING\" ) \t secret_key = ConfigAttribute ( \"SECRET_KEY\" ) \t session_cookie_name = ConfigAttribute ( \"SESSION_COOKIE_NAME\" ) \t permanent_session_lifetime = ConfigAttribute ( \"PERMANENT_SESSION_LIFETIME\" , get_converter = _make_timedelta ) \t send_file_max_age_default = ConfigAttribute ( \"SEND_FILE_MAX_AGE_DEFAULT\" , get_converter = _make_timedelta ) \t use_x_sendfile = ConfigAttribute ( \"USE_X_SENDFILE\" ) \t json_encoder = json . JSONEncoder \t json_decoder = json . JSONDecoder \t jinja_options = { \"extensions\" : [ \"jinja2.ext.autoescape\" , \"jinja2.ext.with_\" ] } \t default_config = ImmutableDict ( { \"ENV\" : None , \"DEBUG\" : None , \"TESTING\" : False , \"PROPAGATE_EXCEPTIONS\" : None , \"PRESERVE_CONTEXT_ON_EXCEPTION\" : None , \"SECRET_KEY\" : None , \"PERMANENT_SESSION_LIFETIME\" : timedelta ( days = 31 ) , \"USE_X_SENDFILE\" : False , \"SERVER_NAME\" : None , \"APPLICATION_ROOT\" : \"/\" , \"SESSION_COOKIE_NAME\" : \"session\" , \"SESSION_COOKIE_DOMAIN\" : None , \"SESSION_COOKIE_PATH\" : None , \"SESSION_COOKIE_HTTPONLY\" : True , \"SESSION_COOKIE_SECURE\" : False , \"SESSION_COOKIE_SAMESITE\" : None , \"SESSION_REFRESH_EACH_REQUEST\" : True , \"MAX_CONTENT_LENGTH\" : None , \"SEND_FILE_MAX_AGE_DEFAULT\" : timedelta ( hours = 12 ) , \"TRAP_BAD_REQUEST_ERRORS\" : None , \"TRAP_HTTP_EXCEPTIONS\" : False , \"EXPLAIN_TEMPLATE_LOADING\" : False , \"PREFERRED_URL_SCHEME\" : \"http\" , \"JSON_AS_ASCII\" : True , \"JSON_SORT_KEYS\" : True , \"JSONIFY_PRETTYPRINT_REGULAR\" : False , \"JSONIFY_MIMETYPE\" : \"application/json\" , \"TEMPLATES_AUTO_RELOAD\" : None , \"MAX_COOKIE_SIZE\" : 4093 , } ) \t url_rule_class = Rule \t url_map_class = Map \t test_client_class = None \t test_cli_runner_class = None \t session_interface = SecureCookieSessionInterface ( ) \t import_name = None \t template_folder = None \t root_path = None \t def __init__ ( self , import_name , static_url_path = None , static_folder = \"static\" , static_host = None , host_matching = False , subdomain_matching = False , template_folder = \"templates\" , instance_path = None , instance_relative_config = False , root_path = None , ) : \t \t\t _PackageBoundObject . __init__ ( self , import_name , template_folder = template_folder , root_path = root_path ) \t self . static_url_path = static_url_path \t self . static_folder = static_folder \t if instance_path is None : \t \t\t\t instance_path = self . auto_find_instance_path ( ) \t \t elif not os . path . isabs ( instance_path ) : \t \t\t\t raise ValueError ( \"If an instance path is provided it must be absolute.\" \" A relative path was given instead.\" ) \t \t self . instance_path = instance_path \t self . config = self . make_config ( instance_relative_config ) \t self . view_functions = { } \t self . error_handler_spec = { } \t self . url_build_error_handlers = [ ] \t self . before_request_funcs = { } \t self . before_first_request_funcs = [ ] \t self . after_request_funcs = { } \t self . teardown_request_funcs = { } \t self . teardown_appcontext_funcs = [ ] \t self . url_value_preprocessors = { } \t self . url_default_functions = { } \t self . template_context_processors = { None : [ _default_template_ctx_processor ] } \t self . shell_context_processors = [ ] \t self . blueprints = { } \t self . _blueprint_order = [ ] \t self . extensions = { } \t self . url_map = self . url_map_class ( ) \t self . url_map . host_matching = host_matching \t self . subdomain_matching = subdomain_matching \t self . _got_first_request = False \t self . _before_request_lock = Lock ( ) \t if self . has_static_folder : \t \t\t\t assert ( bool ( static_host ) == host_matching ) , \"Invalid static_host/host_matching combination\" \t self . add_url_rule ( self . static_url_path + \"/<path:filename>\" , endpoint = \"static\" , host = static_host , view_func = self . send_static_file , ) \t \t self . cli . name = self . name \t \t @ locked_cached_property \t def name ( self ) : \t \t\t \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\" \t if self . import_name == \"__main__\" : \t \t\t\t fn = getattr ( sys . modules [ \"__main__\" ] , \"__file__\" , None ) \t if fn is None : \t \t\t\t\t return \"__main__\" \t \t return os . path . splitext ( os . path . basename ( fn ) ) [ 0 ] \t \t return self . import_name \t \t @ property \t def propagate_exceptions ( self ) : \t \t\t \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t rv = self . config [ \"PROPAGATE_EXCEPTIONS\" ] \t if rv is not None : \t \t\t\t return rv \t \t return self . testing or self . debug \t \t @ property \t def preserve_context_on_exception ( self ) : \t \t\t \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t rv = self . config [ \"PRESERVE_CONTEXT_ON_EXCEPTION\" ] \t if rv is not None : \t \t\t\t return rv \t \t return self . debug \t \t @ locked_cached_property \t def logger ( self ) : \t \t\t \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\" \t return create_logger ( self ) \t \t @ locked_cached_property \t def jinja_env ( self ) : \t \t\t \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\" \t return self . create_jinja_environment ( ) \t \t @ property \t def got_first_request ( self ) : \t \t\t \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\" \t return self . _got_first_request \t \t def make_config ( self , instance_relative = False ) : \t \t\t \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\" \t root_path = self . root_path \t if instance_relative : \t \t\t\t root_path = self . instance_path \t \t defaults = dict ( self . default_config ) \t defaults [ \"ENV\" ] = get_env ( ) \t defaults [ \"DEBUG\" ] = get_debug_flag ( ) \t return self . config_class ( root_path , defaults ) \t \t def auto_find_instance_path ( self ) : \t \t\t \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\" \t prefix , package_path = find_package ( self . import_name ) \t if prefix is None : \t \t\t\t return os . path . join ( package_path , \"instance\" ) \t \t return os . path . join ( prefix , \"var\" , self . name + \"-instance\" ) \t \t def open_instance_resource ( self , resource , mode = \"rb\" ) : \t \t\t \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\" \t return open ( os . path . join ( self . instance_path , resource ) , mode ) \t \t @ property \t def templates_auto_reload ( self ) : \t \t\t \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\" \t rv = self . config [ \"TEMPLATES_AUTO_RELOAD\" ] \t return rv if rv is not None else self . debug \t \t @ templates_auto_reload . setter \t def templates_auto_reload ( self , value ) : \t \t\t self . config [ \"TEMPLATES_AUTO_RELOAD\" ] = value \t \t def create_jinja_environment ( self ) : \t \t\t \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\" \t options = dict ( self . jinja_options ) \t if \"autoescape\" not in options : \t \t\t\t options [ \"autoescape\" ] = self . select_jinja_autoescape \t \t if \"auto_reload\" not in options : \t \t\t\t options [ \"auto_reload\" ] = self . templates_auto_reload \t \t rv = self . jinja_environment ( self , ** options ) \t rv . globals . update ( url_for = url_for , get_flashed_messages = get_flashed_messages , config = self . config , request = request , session = session , g = g , ) \t rv . filters [ \"tojson\" ] = json . tojson_filter \t return rv \t \t def create_global_jinja_loader ( self ) : \t \t\t \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\" \t return DispatchingJinjaLoader ( self ) \t \t def select_jinja_autoescape ( self , filename ) : \t \t\t \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\" \t if filename is None : \t \t\t\t return True \t \t return filename . endswith ( ( \".html\" , \".htm\" , \".xml\" , \".xhtml\" ) ) \t \t def update_template_context ( self , context ) : \t \t\t \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\" \t funcs = self . template_context_processors [ None ] \t reqctx = _request_ctx_stack . top \t if reqctx is not None : \t \t\t\t bp = reqctx . request . blueprint \t if bp is not None and bp in self . template_context_processors : \t \t\t\t\t funcs = chain ( funcs , self . template_context_processors [ bp ] ) \t \t \t orig_ctx = context . copy ( ) \t for func in funcs : \t \t\t\t context . update ( func ( ) ) \t \t context . update ( orig_ctx ) \t \t def make_shell_context ( self ) : \t \t\t \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\" \t rv = { \"app\" : self , \"g\" : g } \t for processor in self . shell_context_processors : \t \t\t\t rv . update ( processor ( ) ) \t \t return rv \t \t env = ConfigAttribute ( \"ENV\" ) \t @ property \t def debug ( self ) : \t \t\t \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\" \t return self . config [ \"DEBUG\" ] \t \t @ debug . setter \t def debug ( self , value ) : \t \t\t self . config [ \"DEBUG\" ] = value \t self . jinja_env . auto_reload = self . templates_auto_reload \t \t def run ( self , host = None , port = None , debug = None , load_dotenv = True , ** options ) : \t \t\t \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\" \t if os . environ . get ( \"FLASK_RUN_FROM_CLI\" ) == \"true\" : \t \t\t\t from . debughelpers import explain_ignored_app_run \t explain_ignored_app_run ( ) \t return \t \t if get_load_dotenv ( load_dotenv ) : \t \t\t\t cli . load_dotenv ( ) \t if \"FLASK_ENV\" in os . environ : \t \t\t\t\t self . env = get_env ( ) \t self . debug = get_debug_flag ( ) \t \t elif \"FLASK_DEBUG\" in os . environ : \t \t\t\t\t self . debug = get_debug_flag ( ) \t \t \t if debug is not None : \t \t\t\t self . debug = bool ( debug ) \t \t _host = \"127.0.0.1\" \t _port = 5000 \t server_name = self . config . get ( \"SERVER_NAME\" ) \t sn_host , sn_port = None , None \t if server_name : \t \t\t\t sn_host , _ , sn_port = server_name . partition ( \":\" ) \t \t host = host or sn_host or _host \t port = int ( next ( ( p for p in ( port , sn_port ) if p is not None ) , _port ) ) \t options . setdefault ( \"use_reloader\" , self . debug ) \t options . setdefault ( \"use_debugger\" , self . debug ) \t options . setdefault ( \"threaded\" , True ) \t cli . show_server_banner ( self . env , self . debug , self . name , False ) \t from werkzeug . serving import run_simple \t try : \t \t\t\t run_simple ( host , port , self , ** options ) \t \t finally : \t \t\t\t self . _got_first_request = False \t \t \t def test_client ( self , use_cookies = True , ** kwargs ) : \t \t\t \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\" \t cls = self . test_client_class \t if cls is None : \t \t\t\t from . testing import FlaskClient as cls \t \t return cls ( self , self . response_class , use_cookies = use_cookies , ** kwargs ) \t \t def test_cli_runner ( self , ** kwargs ) : \t \t\t \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\" \t cls = self . test_cli_runner_class \t if cls is None : \t \t\t\t from . testing import FlaskCliRunner as cls \t \t return cls ( self , ** kwargs ) \t \t def open_session ( self , request ) : \t \t\t \"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"open_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.open_session\" instead.' ) ) \t return self . session_interface . open_session ( self , request ) \t \t def save_session ( self , session , response ) : \t \t\t \"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"save_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.save_session\" instead.' ) ) \t return self . session_interface . save_session ( self , session , response ) \t \t def make_null_session ( self ) : \t \t\t \"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"make_null_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.make_null_session\" instead.' ) ) \t return self . session_interface . make_null_session ( self ) \t \t @ setupmethod \t def register_blueprint ( self , blueprint , ** options ) : \t \t\t \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\" \t first_registration = False \t if blueprint . name in self . blueprints : \t \t\t\t assert self . blueprints [ blueprint . name ] is blueprint , ( \"A name collision occurred between blueprints %r and %r. Both\" ' share the same name \"%s\". Blueprints that are created on the' \" fly need unique names.\" % ( blueprint , self . blueprints [ blueprint . name ] , blueprint . name ) ) \t \t else : \t \t\t\t self . blueprints [ blueprint . name ] = blueprint \t self . _blueprint_order . append ( blueprint ) \t first_registration = True \t \t blueprint . register ( self , options , first_registration ) \t \t def iter_blueprints ( self ) : \t \t\t \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\" \t return iter ( self . _blueprint_order ) \t \t @ setupmethod \t def add_url_rule ( self , rule , endpoint = None , view_func = None , provide_automatic_options = None , ** options ) : \t \t\t \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t if endpoint is None : \t \t\t\t endpoint = _endpoint_from_view_func ( view_func ) \t \t options [ \"endpoint\" ] = endpoint \t methods = options . pop ( \"methods\" , None ) \t if methods is None : \t \t\t\t methods = getattr ( view_func , \"methods\" , None ) or ( \"GET\" , ) \t \t if isinstance ( methods , string_types ) : \t \t\t\t raise TypeError ( \"Allowed methods have to be iterables of strings, \" 'for example: @app.route(..., methods=[\"POST\"])' ) \t \t methods = set ( item . upper ( ) for item in methods ) \t required_methods = set ( getattr ( view_func , \"required_methods\" , ( ) ) ) \t if provide_automatic_options is None : \t \t\t\t provide_automatic_options = getattr ( view_func , \"provide_automatic_options\" , None ) \t \t if provide_automatic_options is None : \t \t\t\t if \"OPTIONS\" not in methods : \t \t\t\t\t provide_automatic_options = True \t required_methods . add ( \"OPTIONS\" ) \t \t else : \t \t\t\t\t provide_automatic_options = False \t \t \t methods |= required_methods \t rule = self . url_rule_class ( rule , methods = methods , ** options ) \t rule . provide_automatic_options = provide_automatic_options \t self . url_map . add ( rule ) \t if view_func is not None : \t \t\t\t old_func = self . view_functions . get ( endpoint ) \t if old_func is not None and old_func != view_func : \t \t\t\t\t raise AssertionError ( \"View function mapping is overwriting an \" \"existing endpoint function: %s\" % endpoint ) \t \t self . view_functions [ endpoint ] = view_func \t \t \t def route ( self , rule , ** options ) : \t \t\t \"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t endpoint = options . pop ( \"endpoint\" , None ) \t self . add_url_rule ( rule , endpoint , f , ** options ) \t return f \t \t return decorator \t \t @ setupmethod \t def endpoint ( self , endpoint ) : \t \t\t \"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . view_functions [ endpoint ] = f \t return f \t \t return decorator \t \t @ staticmethod \t def _get_exc_class_and_code ( exc_class_or_code ) : \t \t\t \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\" \t if isinstance ( exc_class_or_code , integer_types ) : \t \t\t\t exc_class = default_exceptions [ exc_class_or_code ] \t \t else : \t \t\t\t exc_class = exc_class_or_code \t \t assert issubclass ( exc_class , Exception ) \t if issubclass ( exc_class , HTTPException ) : \t \t\t\t return exc_class , exc_class . code \t \t else : \t \t\t\t return exc_class , None \t \t \t @ setupmethod \t def errorhandler ( self , code_or_exception ) : \t \t\t \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . _register_error_handler ( None , code_or_exception , f ) \t return f \t \t return decorator \t \t @ setupmethod \t def register_error_handler ( self , code_or_exception , f ) : \t \t\t \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\" \t self . _register_error_handler ( None , code_or_exception , f ) \t \t @ setupmethod \t def _register_error_handler ( self , key , code_or_exception , f ) : \t \t\t \"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\" \t if isinstance ( code_or_exception , HTTPException ) : \t \t\t\t raise ValueError ( \"Tried to register a handler for an exception instance {0!r}.\" \" Handlers can only be registered for exception classes or\" \" HTTP error codes.\" . format ( code_or_exception ) ) \t \t try : \t \t\t\t exc_class , code = self . _get_exc_class_and_code ( code_or_exception ) \t \t except KeyError : \t \t\t\t raise KeyError ( \"'{0}' is not a recognized HTTP error code. Use a subclass of\" \" HTTPException with that code instead.\" . format ( code_or_exception ) ) \t \t handlers = self . error_handler_spec . setdefault ( key , { } ) . setdefault ( code , { } ) \t handlers [ exc_class ] = f \t \t @ setupmethod \t def template_filter ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_filter ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_filter ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . filters [ name or f . __name__ ] = f \t \t @ setupmethod \t def template_test ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_test ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_test ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . tests [ name or f . __name__ ] = f \t \t @ setupmethod \t def template_global ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_global ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_global ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . globals [ name or f . __name__ ] = f \t \t @ setupmethod \t def before_request ( self , f ) : \t \t\t \"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\" \t self . before_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def before_first_request ( self , f ) : \t \t\t \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\" \t self . before_first_request_funcs . append ( f ) \t return f \t \t @ setupmethod \t def after_request ( self , f ) : \t \t\t \"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\" \t self . after_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def teardown_request ( self , f ) : \t \t\t \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\" \t self . teardown_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def teardown_appcontext ( self , f ) : \t \t\t \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\" \t self . teardown_appcontext_funcs . append ( f ) \t return f \t \t @ setupmethod \t def context_processor ( self , f ) : \t \t\t \"\"\"Registers a template context processor function.\"\"\" \t self . template_context_processors [ None ] . append ( f ) \t return f \t \t @ setupmethod \t def shell_context_processor ( self , f ) : \t \t\t \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\" \t self . shell_context_processors . append ( f ) \t return f \t \t @ setupmethod \t def url_value_preprocessor ( self , f ) : \t \t\t \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\" \t self . url_value_preprocessors . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def url_defaults ( self , f ) : \t \t\t \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\" \t self . url_default_functions . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t def _find_error_handler ( self , e ) : \t \t\t \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\" \t exc_class , code = self . _get_exc_class_and_code ( type ( e ) ) \t for name , c in ( ( request . blueprint , code ) , ( None , code ) , ( request . blueprint , None ) , ( None , None ) , ) : \t \t\t\t handler_map = self . error_handler_spec . setdefault ( name , { } ) . get ( c ) \t if not handler_map : \t \t\t\t\t continue \t \t for cls in exc_class . __mro__ : \t \t\t\t\t handler = handler_map . get ( cls ) \t if handler is not None : \t \t\t\t\t\t return handler \t \t \t \t \t def handle_http_exception ( self , e ) : \t \t\t \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\" \t if e . code is None : \t \t\t\t return e \t \t if isinstance ( e , RoutingException ) : \t \t\t\t return e \t \t handler = self . _find_error_handler ( e ) \t if handler is None : \t \t\t\t return e \t \t return handler ( e ) \t \t def trap_http_exception ( self , e ) : \t \t\t \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\" \t if self . config [ \"TRAP_HTTP_EXCEPTIONS\" ] : \t \t\t\t return True \t \t trap_bad_request = self . config [ \"TRAP_BAD_REQUEST_ERRORS\" ] \t if ( trap_bad_request is None and self . debug and isinstance ( e , BadRequestKeyError ) ) : \t \t\t\t return True \t \t if trap_bad_request : \t \t\t\t return isinstance ( e , BadRequest ) \t \t return False \t \t def handle_user_exception ( self , e ) : \t \t\t \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t assert exc_value is e \t if isinstance ( e , BadRequestKeyError ) : \t \t\t\t if self . debug or self . config [ \"TRAP_BAD_REQUEST_ERRORS\" ] : \t \t\t\t\t e . show_exception = True \t if e . args [ 0 ] not in e . get_description ( ) : \t \t\t\t\t\t e . description = \"KeyError: '{}'\" . format ( * e . args ) \t \t \t elif not hasattr ( BadRequestKeyError , \"show_exception\" ) : \t \t\t\t\t e . args = ( ) \t \t \t if isinstance ( e , HTTPException ) and not self . trap_http_exception ( e ) : \t \t\t\t return self . handle_http_exception ( e ) \t \t handler = self . _find_error_handler ( e ) \t if handler is None : \t \t\t\t reraise ( exc_type , exc_value , tb ) \t \t return handler ( e ) \t \t def handle_exception ( self , e ) : \t \t\t \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t got_request_exception . send ( self , exception = e ) \t if self . propagate_exceptions : \t \t\t\t if exc_value is e : \t \t\t\t\t reraise ( exc_type , exc_value , tb ) \t \t else : \t \t\t\t\t raise e \t \t \t self . log_exception ( ( exc_type , exc_value , tb ) ) \t server_error = InternalServerError ( ) \t server_error . original_exception = e \t handler = self . _find_error_handler ( server_error ) \t if handler is not None : \t \t\t\t server_error = handler ( server_error ) \t \t return self . finalize_request ( server_error , from_error_handler = True ) \t \t def log_exception ( self , exc_info ) : \t \t\t \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\" \t self . logger . error ( \"Exception on %s [%s]\" % ( request . path , request . method ) , exc_info = exc_info ) \t \t def raise_routing_exception ( self , request ) : \t \t\t \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\" \t if ( not self . debug or not isinstance ( request . routing_exception , RequestRedirect ) or request . method in ( \"GET\" , \"HEAD\" , \"OPTIONS\" ) ) : \t \t\t\t raise request . routing_exception \t \t from . debughelpers import FormDataRoutingRedirect \t raise FormDataRoutingRedirect ( request ) \t \t def dispatch_request ( self ) : \t \t\t \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\" \t req = _request_ctx_stack . top . request \t if req . routing_exception is not None : \t \t\t\t self . raise_routing_exception ( req ) \t \t rule = req . url_rule \t if ( getattr ( rule , \"provide_automatic_options\" , False ) and req . method == \"OPTIONS\" ) : \t \t\t\t return self . make_default_options_response ( ) \t \t return self . view_functions [ rule . endpoint ] ( ** req . view_args ) \t \t def full_dispatch_request ( self ) : \t \t\t \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\" \t self . try_trigger_before_first_request_functions ( ) \t try : \t \t\t\t request_started . send ( self ) \t rv = self . preprocess_request ( ) \t if rv is None : \t \t\t\t\t rv = self . dispatch_request ( ) \t \t \t except Exception as e : \t \t\t\t rv = self . handle_user_exception ( e ) \t \t return self . finalize_request ( rv ) \t \t def finalize_request ( self , rv , from_error_handler = False ) : \t \t\t \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\" \t response = self . make_response ( rv ) \t try : \t \t\t\t response = self . process_response ( response ) \t request_finished . send ( self , response = response ) \t \t except Exception : \t \t\t\t if not from_error_handler : \t \t\t\t\t raise \t \t self . logger . exception ( \"Request finalizing failed with an error while handling an error\" ) \t \t return response \t \t def try_trigger_before_first_request_functions ( self ) : \t \t\t \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\" \t if self . _got_first_request : \t \t\t\t return \t \t with self . _before_request_lock : \t \t\t\t if self . _got_first_request : \t \t\t\t\t return \t \t for func in self . before_first_request_funcs : \t \t\t\t\t func ( ) \t \t self . _got_first_request = True \t \t \t def make_default_options_response ( self ) : \t \t\t \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\" \t adapter = _request_ctx_stack . top . url_adapter \t methods = adapter . allowed_methods ( ) \t rv = self . response_class ( ) \t rv . allow . update ( methods ) \t return rv \t \t def should_ignore_error ( self , error ) : \t \t\t \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\" \t return False \t \t def make_response ( self , rv ) : \t \t\t \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\" \t status = headers = None \t if isinstance ( rv , tuple ) : \t \t\t\t len_rv = len ( rv ) \t if len_rv == 3 : \t \t\t\t\t rv , status , headers = rv \t \t elif len_rv == 2 : \t \t\t\t\t if isinstance ( rv [ 1 ] , ( Headers , dict , tuple , list ) ) : \t \t\t\t\t\t rv , headers = rv \t \t else : \t \t\t\t\t\t rv , status = rv \t \t \t else : \t \t\t\t\t raise TypeError ( \"The view function did not return a valid response tuple.\" \" The tuple must have the form (body, status, headers),\" \" (body, status), or (body, headers).\" ) \t \t \t if rv is None : \t \t\t\t raise TypeError ( \"The view function did not return a valid response. The\" \" function either returned None or ended without a return\" \" statement.\" ) \t \t if not isinstance ( rv , self . response_class ) : \t \t\t\t if isinstance ( rv , ( text_type , bytes , bytearray ) ) : \t \t\t\t\t rv = self . response_class ( rv , status = status , headers = headers ) \t status = headers = None \t \t elif isinstance ( rv , dict ) : \t \t\t\t\t rv = jsonify ( rv ) \t \t elif isinstance ( rv , BaseResponse ) or callable ( rv ) : \t \t\t\t\t try : \t \t\t\t\t\t rv = self . response_class . force_type ( rv , request . environ ) \t \t except TypeError as e : \t \t\t\t\t\t new_error = TypeError ( \"{e}\\nThe view function did not return a valid\" \" response. The return type must be a string, dict, tuple,\" \" Response instance, or WSGI callable, but it was a\" \" {rv.__class__.__name__}.\" . format ( e = e , rv = rv ) ) \t reraise ( TypeError , new_error , sys . exc_info ( ) [ 2 ] ) \t \t \t else : \t \t\t\t\t raise TypeError ( \"The view function did not return a valid\" \" response. The return type must be a string, dict, tuple,\" \" Response instance, or WSGI callable, but it was a\" \" {rv.__class__.__name__}.\" . format ( rv = rv ) ) \t \t \t if status is not None : \t \t\t\t if isinstance ( status , ( text_type , bytes , bytearray ) ) : \t \t\t\t\t rv . status = status \t \t else : \t \t\t\t\t rv . status_code = status \t \t \t if headers : \t \t\t\t rv . headers . extend ( headers ) \t \t return rv \t \t def create_url_adapter ( self , request ) : \t \t\t \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\" \t if request is not None : \t \t\t\t subdomain = ( ( self . url_map . default_subdomain or None ) if not self . subdomain_matching else None ) \t return self . url_map . bind_to_environ ( request . environ , server_name = self . config [ \"SERVER_NAME\" ] , subdomain = subdomain , ) \t \t if self . config [ \"SERVER_NAME\" ] is not None : \t \t\t\t return self . url_map . bind ( self . config [ \"SERVER_NAME\" ] , script_name = self . config [ \"APPLICATION_ROOT\" ] , url_scheme = self . config [ \"PREFERRED_URL_SCHEME\" ] , ) \t \t \t def inject_url_defaults ( self , endpoint , values ) : \t \t\t \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\" \t funcs = self . url_default_functions . get ( None , ( ) ) \t if \".\" in endpoint : \t \t\t\t bp = endpoint . rsplit ( \".\" , 1 ) [ 0 ] \t funcs = chain ( funcs , self . url_default_functions . get ( bp , ( ) ) ) \t \t for func in funcs : \t \t\t\t func ( endpoint , values ) \t \t \t def handle_url_build_error ( self , error , endpoint , values ) : \t \t\t \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t for handler in self . url_build_error_handlers : \t \t\t\t try : \t \t\t\t\t rv = handler ( error , endpoint , values ) \t if rv is not None : \t \t\t\t\t\t return rv \t \t \t except BuildError as e : \t \t\t\t\t error = e \t \t \t if error is exc_value : \t \t\t\t reraise ( exc_type , exc_value , tb ) \t \t raise error \t \t def preprocess_request ( self ) : \t \t\t \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\" \t bp = _request_ctx_stack . top . request . blueprint \t funcs = self . url_value_preprocessors . get ( None , ( ) ) \t if bp is not None and bp in self . url_value_preprocessors : \t \t\t\t funcs = chain ( funcs , self . url_value_preprocessors [ bp ] ) \t \t for func in funcs : \t \t\t\t func ( request . endpoint , request . view_args ) \t \t funcs = self . before_request_funcs . get ( None , ( ) ) \t if bp is not None and bp in self . before_request_funcs : \t \t\t\t funcs = chain ( funcs , self . before_request_funcs [ bp ] ) \t \t for func in funcs : \t \t\t\t rv = func ( ) \t if rv is not None : \t \t\t\t\t return rv \t \t \t \t def process_response ( self , response ) : \t \t\t \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\" \t ctx = _request_ctx_stack . top \t bp = ctx . request . blueprint \t funcs = ctx . _after_request_functions \t if bp is not None and bp in self . after_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . after_request_funcs [ bp ] ) ) \t \t if None in self . after_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . after_request_funcs [ None ] ) ) \t \t for handler in funcs : \t \t\t\t response = handler ( response ) \t \t if not self . session_interface . is_null_session ( ctx . session ) : \t \t\t\t self . session_interface . save_session ( self , ctx . session , response ) \t \t return response \t \t def do_teardown_request ( self , exc = _sentinel ) : \t \t\t \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\" \t if exc is _sentinel : \t \t\t\t exc = sys . exc_info ( ) [ 1 ] \t \t funcs = reversed ( self . teardown_request_funcs . get ( None , ( ) ) ) \t bp = _request_ctx_stack . top . request . blueprint \t if bp is not None and bp in self . teardown_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . teardown_request_funcs [ bp ] ) ) \t \t for func in funcs : \t \t\t\t func ( exc ) \t \t request_tearing_down . send ( self , exc = exc ) \t \t def do_teardown_appcontext ( self , exc = _sentinel ) : \t \t\t \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t if exc is _sentinel : \t \t\t\t exc = sys . exc_info ( ) [ 1 ] \t \t for func in reversed ( self . teardown_appcontext_funcs ) : \t \t\t\t func ( exc ) \t \t appcontext_tearing_down . send ( self , exc = exc ) \t \t def app_context ( self ) : \t \t\t \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t return AppContext ( self ) \t \t def request_context ( self , environ ) : \t \t\t \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\" \t return RequestContext ( self , environ ) \t \t def test_request_context ( self , * args , ** kwargs ) : \t \t\t \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\" \t from . testing import EnvironBuilder \t builder = EnvironBuilder ( self , * args , ** kwargs ) \t try : \t \t\t\t return self . request_context ( builder . get_environ ( ) ) \t \t finally : \t \t\t\t builder . close ( ) \t \t \t def wsgi_app ( self , environ , start_response ) : \t \t\t \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\" \t ctx = self . request_context ( environ ) \t error = None \t try : \t \t\t\t try : \t \t\t\t\t ctx . push ( ) \t response = self . full_dispatch_request ( ) \t \t except Exception as e : \t \t\t\t\t error = e \t response = self . handle_exception ( e ) \t \t except : \t \t\t\t\t error = sys . exc_info ( ) [ 1 ] \t raise \t \t return response ( environ , start_response ) \t \t finally : \t \t\t\t if self . should_ignore_error ( error ) : \t \t\t\t\t error = None \t \t ctx . auto_pop ( error ) \t \t \t def __call__ ( self , environ , start_response ) : \t \t\t \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\" \t return self . wsgi_app ( environ , start_response ) \t \t def __repr__ ( self ) : \t \t\t return \"<%s %r>\" % ( self . __class__ . __name__ , self . name ) \n \n \n < EOF >","type":"boolean","boost":1.0}}},{"match":{"t2src":{"query":"NSNimport SNimportW NimportWN importWNimport WNimportW NimportWN importWNimport WNimportW NimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.import from.importW .importWN importWNfrom WNfrom. Nfrom.import from.importW .importWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNW WNW= NW=W W=W( =W() W()N ()Ndef )NdefW NdefW( defW(W W(W) (W): W):N ):NI :NIif NIifnot IifnotW ifnotW( notW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnW( returnW(W W(W= (W=W W=W) =W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W): W):N ):NI :NIif NIifW IifW. ifW.W W.Wand .WandW WandW. andW.W W.W: .W:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSSS SSSS SSSS SSSS SSS) SS)N S)ND )NDreturn NDreturnW DreturnW( returnW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W)N W)ND )NDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDclass NDclassW DclassW( classW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S, (S,W S,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W( =W(S W(S, (S,W S,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W. =W.W W.WN .WNW WNW= NW=W W=W. =W.W W.WN .WNW WNW= NW={ W={S ={S: {S:[ S:[S :[S, [S,S S,S] ,S]} S]}N ]}NW }NW= NW=W W=W( =W({ W({S ({S: {S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:W S:W( :W(W W(W= (W=V W=V) =V), V),S ),S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:S S:S, :S,S S,S: ,S:S S:S, :S,S S,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:True S:True, :True,S True,S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:True S:True, :True,S True,S: ,S:None S:None, :None,S None,S: ,S:W S:W( :W(W W(W= (W=V W=V) =V), V),S ),S: ,S:None S:None, :None,S None,S: ,S:False S:False, :False,S False,S: ,S:False S:False, :False,S False,S: ,S:S S:S, :S,S S,S: ,S:True S:True, :True,S True,S: ,S:True S:True, :True,S True,S: ,S:False S:False, :False,S False,S: ,S:S S:S, :S,S S,S: ,S:None S:None, :None,S None,S: ,S:V S:V, :V,} V,}) ,})N })NW )NW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNW NoneNW= NW=W W=W( =W() W()N ()NW )NW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNdef NoneNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None, =None,W None,W= ,W=S W=S, =S,W S,W= ,W=None W=None, =None,W None,W= ,W=False W=False, =False,W False,W= ,W=False W=False, =False,W False,W= ,W=S W=S, =S,W S,W= ,W=None W=None, =None,W None,W= ,W=False W=False, =False,W False,W= ,W=None W=None, =None,) None,): ,):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W) =W)N W)NW )NW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=WN =WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()N ()ND )NDelif NDelifnot DelifnotW elifnotW. notW.W W.W. .W.W W.W( .W(W W(W) (W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS) SS)N S)ND )NDW NDW. DW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={None ={None: {None:[ None:[W :[W] [W]} W]}N ]}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=False W=FalseN =FalseNW FalseNW. NW.W W.W= .W=W W=W( =W() W()N ()Nif )NifW NifW. ifW.W W.W: .W:N W:NI :NIassert NIassert( Iassert(W assert(W( (W(W W(W) (W)== W)==W )==W) ==W), W),S ),SN ,SNW SNW. NW.W W.W( .W(W W(W. (W.W W.W+ .W+S W+S, +S,W S,W= ,W=S W=S, =S,W S,W= ,W=W W=W, =W,W W,W= ,W=W W=W. =W.W W.W, .W,) W,)N ,)ND )NDW NDW. DW.W W.W. .W.W W.W= .W=W W=W. =W.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W== .W==S W==S: ==S:N S:NI :NIW NIW= IW=W W=W( =W(W W(W. (W.W W.W[ .W[S W[S] [S], S],S ],S, ,S,None S,None) ,None)N None)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnS IreturnSN returnSND SNDreturn NDreturnW DreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W. .W.W W.W( .W(W W(W) (W)) W))[ ))[V )[V] [V]N V]ND ]NDreturn NDreturnW DreturnW. returnW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW. returnW.W W.Wor .WorW WorW. orW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW. returnW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W( .W() W()N ()ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.WN .WND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=False W=False) =False): False):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifW: ifW:N W:NI :NIW NIW= IW=W W=W. =W.W W.WN .WND WNDW NDW= DW=W W=W( =W(W W(W. (W.W W.W) .W)N W)NW )NW[ NW[S W[S] [S]= S]=W ]=W( =W() W()N ()NW )NW[ NW[S W[S] [S]= S]=W ]=W( =W() W()N ()Nreturn )NreturnW NreturnW. returnW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W= ,W=W W=W( =W(W W(W. (W.W W.W) .W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S) ,S)N S)ND )NDreturn NDreturnW DreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S, ,S,W S,W. ,W.W W.W+ .W+S W+S) +S)N S)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=S W=S) =S): S):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W. (W.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W) ,W), W),W ),W) ,W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nreturn ]NreturnW NreturnWif returnWifW WifWis ifWisnot WisnotNone isnotNoneelse notNoneelseW NoneelseW. elseW.W W.WN .WND WND@ ND@W D@W. @W.W W.WN .WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]= S]=W ]=WN =WND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W( =W(W W(W. (W.W W.W) .W)N W)Nif )NifS NifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW[ IW[S W[S] [S]= S]=W ]=W. =W.W W.WN .WND WNDif NDifS DifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW[ IW[S W[S] [S]= S]=W ]=W. =W.W W.WN .WND WNDW NDW= DW=W W=W. =W.W W.W( .W(W W(W, (W,** W,**W ,**W) **W)N W)NW )NW. NW.W W.W. .W.W W.W( .W(W W(W= (W=W W=W, =W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W. =W.W W.W, .W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W, =W,) W,)N ,)NW )NW. NW.W W.W[ .W[S W[S] [S]= S]=W ]=W. =W.W W.WN .WNreturn WNreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDreturn NDreturnW DreturnW. returnW.W W.W( .W(( W((S ((S, (S,S S,S, ,S,S S,S, ,S,S S,S) ,S)) S))N ))ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[None W[None] [None]N None]NW ]NW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDD NDDW DDW= DW=W W=W. =W.W W.W( .W() W()N ()Nfor )NforW NforWin forWinW WinW: inW:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW={ W={S ={S: {S:W S:W, :W,S W,S: ,S:W S:W} :W}N W}Nfor }NforW NforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDreturn NDreturnW DreturnWN returnWND WNDW NDW= DW=W W=W( =W(S W(S) (S)N S)N@ )N@W N@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W[ .W[S W[S] [S]N S]ND ]ND@ ND@W D@W. @W.W W.WN .WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]= S]=W ]=WN =WNW WNW. NW.W W.W. .W.W W.W= .W=W W=W. =W.W W.WN .WND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=True W=True, =True,** True,**W ,**W) **W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W. .W.W W.W( .W(S W(S) (S)== S)==S )==S: ==S:N S:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWN importWNW WNW( NW() W()N ()Nreturn )NreturnN NreturnND returnNDif NDifW DifW( ifW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W() W()N ()Nif )NifS NifSin ifSinW SinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W= .W=W W=W( =W() W()N ()NW )NW. NW.W W.W= .W=W W=W( =W() W()N ()ND )NDelif NDelifS DelifSin elifSinW SinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W= .W=W W=W( =W() W()N ()ND )NDD NDDif DDifW DifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW. IW.W W.W= .W=W W=W( =W(W W(W) (W)N W)ND )NDW NDW= DW=S W=SN =SNW SNW= NW=V W=VN =VNW VNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(S W(S) (S)N S)NW )NW, NW,W W,W= ,W=None W=None, =None,None None,NoneN ,NoneNif NoneNifW NifW: ifW:N W:NI :NIW NIW, IW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W(S W(S) (S)N S)ND )NDW NDW= DW=W W=Wor =WorW WorWor orWorW WorWN orWNW WNW= NW=W W=W( =W(W W(W( (W(( W((W ((Wfor (WforW WforWin forWin( Win(W in(W, (W,W W,W) ,W)if W)ifW )ifWis ifWisnot WisnotNone isnotNone) notNone), None),W ),W) ,W)) W))N ))NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,True S,True) ,True)N True)NW )NW. NW.W W.W( .W(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W, .W,W W,W. ,W.W W.W, .W,False W,False) ,False)N False)Nfrom )NfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNtry WNtry: Ntry:N try:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W, ,W,** W,**W ,**W) **W)N W)ND )NDfinally NDfinally: Dfinally:N finally:NI :NIW NIW. IW.W W.W= .W=False W=FalseN =FalseND FalseNDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W= ,W=True W=True, =True,** True,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWas importWasW WasWN asWND WNDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W= ,W=W W=W, =W,** W,**W ,**W) **W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWas importWasW WasWN asWND WNDreturn NDreturnW DreturnW( returnW(W W(W, (W,** W,**W ,**W) **W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=False W=FalseN =FalseNif FalseNifW NifW. ifW.W W.Win .WinW WinW. inW.W W.W: .W:N W:NI :NIassert NIassertW IassertW. assertW.W W.W[ .W[W W[W. [W.W W.W] .W]is W]isW ]isW, isW,( W,(S ,(SS (SSS SSS% SS%( S%(W %(W, (W,W W,W. ,W.W W.W[ .W[W W[W. [W.W W.W] .W], W],W ],W. ,W.W W.W) .W)) W))N ))ND )NDelse NDelse: Delse:N else:NI :NIW NIW. IW.W W.W[ .W[W W[W. [W.W W.W] .W]= W]=W ]=WN =WNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NW )NW= NW=True W=TrueN =TrueND TrueNDW NDW. DW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W. (W.W W.W) .W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,** None,**W ,**W) **W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDW NDW[ DW[S W[S] [S]= S]=W ]=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(S W(S, (S,None S,None) ,None)N None)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,S W,S, ,S,None S,None) ,None)or None)or( )or(S or(S, (S,) S,)N ,)ND )NDif NDifW DifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS) SS)N S)ND )NDW NDW= DW=W W=W( =W(W W(W. (W.W W.W( .W() W()for ()forW )forWin forWinW WinW) inW)N W)NW )NW= NW=W W=W( =W(W W(W( (W(W W(W, (W,S W,S, ,S,( S,() ,()) ())) )))N ))Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,S W,S, ,S,None S,None) ,None)N None)ND )NDif NDifW DifWis ifWisNone WisNone: isNone:N None:NI :NIif NIifS IifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW= IW=True W=TrueN =TrueNW TrueNW. NW.W W.W( .W(S W(S) (S)N S)ND )NDelse NDelse: Delse:N else:NI :NIW NIW= IW=False W=FalseN =FalseND FalseNDD NDDW DDW|= DW|=W W|=WN |=WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W, =W,** W,**W ,**W) **W)N W)NW )NW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandW!= andW!=W W!=W: !=W:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS% SS%W S%W) %W)N W)ND )NDW NDW. DW.W W.W[ .W[W W[W] [W]= W]=W ]=WN =WND WNDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW= IW=W W=W. =W.W W.W( .W(S W(S, (S,None S,None) ,None)N None)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W, ,W,** W,**W ,**W) **W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W[ .W[W W[W] [W]= W]=W ]=WN =WNreturn WNreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W[ =W[W W[W] [W]N W]ND ]NDelse NDelse: Delse:N else:NI :NIW NIW= IW=W W=WN =WND WNDassert NDassertW DassertW( assertW(W W(W, (W,W W,W) ,W)N W)Nif )NifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnW, returnW,W W,W. ,W.W W.WN .WND WNDelse NDelse: Delse:N else:NI :NIreturn NIreturnW IreturnW, returnW,None W,NoneN ,NoneND NoneNDD NDD@ DD@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(None W(None, (None,W None,W, ,W,W W,W) ,W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(None W(None, (None,W None,W, ,W,W W,W) ,W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDtry NDtry: Dtry:N try:NI :NIW NIW, IW,W W,W= ,W=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDexcept NDexceptW DexceptW: exceptW:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDW NDW= DW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W, (W,{ W,{} ,{}) {})N })NW )NW[ NW[W W[W] [W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W[ .W[None W[None] [None]. None].W ].W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W= ,W=W W=W. =W.W W.W( .W(W W(W( (W(W W(W) (W)) W))N ))Nfor )NforW NforW, forW,W W,Win ,Win( Win(( in((W ((W. (W.W W.W, .W,W W,W) ,W), W),( ),(None ,(None, (None,W None,W) ,W), W),( ),(W ,(W. (W.W W.W, .W,None W,None) ,None), None),( ),(None ,(None, (None,None None,None) ,None), None),) ),): ,):N ):NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W) (W)N W)Nif )Nifnot NifnotW ifnotW: notW:N W:NI :NIcontinue NIcontinueN IcontinueND continueNDfor NDforW DforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDD DDDD DDDdef DDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.Wis .WisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDif NDifW DifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnWN returnWND WNDW NDW= DW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDW NDW= DW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]Nif( Nif(W if(Wis (WisNone WisNoneand isNoneandW NoneandW. andW.W W.Wand .WandW WandW( andW(W W(W, (W,W W,W) ,W)) W)): )):N ):NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDif NDifW DifW: ifW:N W:NI :NIreturn NIreturnW IreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDreturn NDreturnFalse DreturnFalseN returnFalseND FalseNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()Nassert )NassertW NassertWis assertWisW WisWN isWNif WNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIif NIifW IifW. ifW.W W.Wor .WorW WorW. orW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIW NIW. IW.W W.W= .W=True W=TrueN =TrueNif TrueNifW NifW. ifW.W W.W[ .W[V W[V] [V]not V]notin ]notinW notinW. inW.W W.W( .W() W(): ():N ):NI :NIW NIW. IW.W W.W= .W=S W=S. =S.W S.W( .W(* W(*W (*W. *W.W W.W) .W)N W)ND )NDD NDDelif DDelifnot DelifnotW elifnotW( notW(W W(W, (W,S W,S) ,S): S):N ):NI :NIW NIW. IW.W W.W= .W=( W=() =()N ()ND )NDD NDDif DDifW DifW( ifW(W W(W, (W,W W,W) ,W)and W)andnot )andnotW andnotW. notW.W W.W( .W(W W(W) (W): W):N ):NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W(W W(W) (W)N W)ND )NDW NDW= DW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDreturn NDreturnW DreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nif )NifW NifW. ifW.W W.W: .W:N W:NI :NIif NIifW IifWis ifWisW WisW: isW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDelse NDelse: Delse:N else:NI :NIraise NIraiseW IraiseWN raiseWND WNDD NDDW DDW. DW.W W.W( .W(( W((W ((W, (W,W W,W, ,W,W W,W) ,W)) W))N ))NW )NW= NW=W W=W( =W() W()N ()NW )NW. NW.W W.W= .W=W W=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnW. returnW.W W.W( .W(W W(W, (W,W W,W= ,W=True W=True) =True)N True)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(S W(S% (S%( S%(W %(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W), W),W ),W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNif( Nif(not if(notW (notW. notW.W W.Wor .Wornot WornotW ornotW( notW(W W(W. (W.W W.W, .W,W W,W) ,W)or W)orW )orW. orW.W W.Win .Win( Win(S in(S, (S,S S,S, ,S,S S,S) ,S)) S)): )):N ):NI :NIraise NIraiseW IraiseW. raiseW.W W.WN .WND WNDfrom NDfrom. Dfrom.W from.Wimport .WimportW WimportWN importWNraise WNraiseW NraiseW( raiseW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNif WNifW NifW. ifW.W W.Wis .Wisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)ND )NDW NDW= DW=W W=W. =W.W W.WN .WNif WNif( Nif(W if(W( (W(W W(W, (W,S W,S, ,S,False S,False) ,False)and False)andW )andW. andW.W W.W== .W==S W==S) ==S): S):N ):NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W() W()N ()ND )NDreturn NDreturnW DreturnW. returnW.W W.W[ .W[W W[W. [W.W W.W] .W]( W](** ](**W (**W. **W.W W.W) .W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W() W()N ()Ntry )Ntry: Ntry:N try:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()N ()ND )NDD NDDexcept DDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnW. returnW.W W.W( .W(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=False W=False) =False): False):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Ntry )Ntry: Ntry:N try:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDexcept NDexceptW DexceptW: exceptW:N W:NI :NIif NIifnot IifnotW ifnotW: notW:N W:NI :NIraise NIraiseN IraiseND raiseNDW NDW. DW.W W.W. .W.W W.W( .W(S W(S) (S)N S)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W: .W:N W:NI :NIreturn NIreturnN IreturnND returnNDwith NDwithW DwithW. withW.W W.W: .W:N W:NI :NIif NIifW IifW. ifW.W W.W: .W:N W:NI :NIreturn NIreturnN IreturnND returnNDfor NDforW DforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW( IW() W()N ()ND )NDW NDW. DW.W W.W= .W=True W=TrueN =TrueND TrueNDD NDDdef DDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W( .W() W()N ()NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnFalse NreturnFalseN returnFalseND FalseNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W= =W=None W=NoneN =NoneNif NoneNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)Nif )NifW NifW== ifW==V W==V: ==V:N V:NI :NIW NIW, IW,W W,W, ,W,W W,W= ,W=W W=WN =WND WNDelif NDelifW DelifW== elifW==V W==V: ==V:N V:NI :NIif NIifW IifW( ifW(W W(W[ (W[V W[V] [V], V],( ],(W ,(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW, IW,W W,W= ,W=W W=WN =WND WNDelse NDelse: Delse:N else:NI :NIW NIW, IW,W W,W= ,W=W W=WN =WND WNDD NDDelse DDelse: Delse:N else:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS) SS)N S)ND )NDD NDDif DDifW DifWis ifWisNone WisNone: isNone:N None:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS) SS)N S)ND )NDif NDifnot DifnotW ifnotW( notW(W W(W, (W,W W,W. ,W.W W.W) .W): W):N ):NI :NIif NIifW IifW( ifW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W= =W=None W=NoneN =NoneND NoneNDelif NDelifW DelifW( elifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDelif NDelifW DelifW( elifW(W W(W, (W,W W,W) ,W)or W)orW )orW( orW(W W(W) (W): W):N ):NI :NItry NItry: Itry:N try:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W) .W)N W)ND )NDexcept NDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=W( =W(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(W= (W=W W=W, =W,W W,W= ,W=W W=W) =W)) W))N ))NW )NW( NW(W W(W, (W,W W,W, ,W,W W,W. ,W.W W.W( .W() W()[ ()[V )[V] [V]) V])N ])ND )NDD NDDelse DDelse: Delse:N else:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(W= (W=W W=W) =W)) W))N ))ND )NDD NDDif DDifW DifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIif NIifW IifW( ifW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW. IW.W W.W= .W=W W=WN =WND WNDelse NDelse: Delse:N else:NI :NIW NIW. IW.W W.W= .W=W W=WN =WND WNDD NDDif DDifW DifW: ifW:N W:NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=( W=(( =((W ((W. (W.W W.W. .W.W W.Wor .WorNone WorNone) orNone)if None)ifnot )ifnotW ifnotW. notW.W W.Welse .WelseNone WelseNone) elseNone)N None)Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W, =W,) W,)N ,)ND )NDif NDifW DifW. ifW.W W.W[ .W[S W[S] [S]is S]isnot ]isnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],) ],)N ,)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifS NifSin ifSinW SinW: inW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(S W(S, (S,V S,V) ,V)[ V)[V )[V] [V]N V]NW ]NW= NW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W. .W.W W.W( .W(W W(W, (W,( W,() ,()) ())) )))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W) ,W)N W)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()Nfor )NforW NforWin forWinW WinW. inW.W W.W: .W:N W:NI :NItry NItry: Itry:N try:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDexcept DDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=WN =WND WNDD NDDif DDifW DifWis ifWisW WisW: isW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDraise NDraiseW DraiseWN raiseWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDW NDW= DW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW= IW=W W=W( =W() W()N ()Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDD DDDdef DDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDif NDifNone DifNonein ifNoneinW NoneinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[None W[None] [None]) None])) ]))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDif NDifnot DifnotW ifnotW. notW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W) ,W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=W W=W) =W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisW WisW: isW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDW NDW= DW=W W=W( =W(W W(W. (W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())) )))N ))NW )NW= NW=W W=W. =W.W W.W. .W.W W.W. .W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=W W=W) =W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisW WisW: isW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDfor NDforW DforWin forWinW WinW( inW(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNfrom SNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNW WNW= NW=W W=W( =W(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W)N W)Ntry )Ntry: Ntry:N try:NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W(W W(W. (W.W W.W( .W() W()) ())N ))ND )NDfinally NDfinally: Dfinally:N finally:NI :NIW NIW. IW.W W.W( .W() W()N ()ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW= NW=None W=NoneN =NoneNtry NoneNtry: Ntry:N try:NI :NItry NItry: Itry:N try:NI :NIW NIW. IW.W W.W( .W() W()N ()NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()ND )NDexcept NDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDexcept NDexcept: Dexcept:N except:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]Nraise ]NraiseN NraiseND raiseNDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDfinally NDfinally: Dfinally:N finally:NI :NIif NIifW IifW. ifW.W W.W( .W(W W(W) (W): W):N ):NI :NIW NIW= IW=None W=NoneN =NoneND NoneNDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIreturn NIreturnS IreturnS% returnS%( S%(W %(W. (W.W W.W. .W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDD NDD< DD<W D<W>","type":"boolean","boost":4.0}}},{"match":{"t1src":{"query":"\n\"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\"\nimport \"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\"\nimportos \nimportos\n importos\nimport os\nimportsys \nimportsys\n importsys\nimport sys\nimportwarnings \nimportwarnings\n importwarnings\nfrom warnings\nfromdatetime \nfromdatetimeimport fromdatetimeimporttimedelta datetimeimporttimedelta\n importtimedelta\nfrom timedelta\nfromfunctools \nfromfunctoolsimport fromfunctoolsimportupdate_wrapper functoolsimportupdate_wrapper\n importupdate_wrapper\nfrom update_wrapper\nfromitertools \nfromitertoolsimport fromitertoolsimportchain itertoolsimportchain\n importchain\nfrom chain\nfromthreading \nfromthreadingimport fromthreadingimportLock threadingimportLock\n importLock\nfrom Lock\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.datastructures werkzeug.datastructuresimport .datastructuresimportHeaders datastructuresimportHeaders\n importHeaders\nfrom Headers\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.datastructures werkzeug.datastructuresimport .datastructuresimportImmutableDict datastructuresimportImmutableDict\n importImmutableDict\nfrom ImmutableDict\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportBadRequest exceptionsimportBadRequest\n importBadRequest\nfrom BadRequest\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportBadRequestKeyError exceptionsimportBadRequestKeyError\n importBadRequestKeyError\nfrom BadRequestKeyError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportdefault_exceptions exceptionsimportdefault_exceptions\n importdefault_exceptions\nfrom default_exceptions\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportHTTPException exceptionsimportHTTPException\n importHTTPException\nfrom HTTPException\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportInternalServerError exceptionsimportInternalServerError\n importInternalServerError\nfrom InternalServerError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportBuildError routingimportBuildError\n importBuildError\nfrom BuildError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportMap routingimportMap\n importMap\nfrom Map\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRequestRedirect routingimportRequestRedirect\n importRequestRedirect\nfrom RequestRedirect\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRoutingException routingimportRoutingException\n importRoutingException\nfrom RoutingException\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRule routingimportRule\n importRule\nfrom Rule\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.wrappers werkzeug.wrappersimport .wrappersimportBaseResponse wrappersimportBaseResponse\n importBaseResponse\nfrom BaseResponse\nfrom. \nfrom.import from.importcli .importcli\n importcli\nfrom cli\nfrom. \nfrom.import from.importjson .importjson\n importjson\nfrom json\nfrom. \nfrom._compat from._compatimport ._compatimportinteger_types _compatimportinteger_types\n importinteger_types\nfrom integer_types\nfrom. \nfrom._compat from._compatimport ._compatimportreraise _compatimportreraise\n importreraise\nfrom reraise\nfrom. \nfrom._compat from._compatimport ._compatimportstring_types _compatimportstring_types\n importstring_types\nfrom string_types\nfrom. \nfrom._compat from._compatimport ._compatimporttext_type _compatimporttext_type\n importtext_type\nfrom text_type\nfrom. \nfrom.config from.configimport .configimportConfig configimportConfig\n importConfig\nfrom Config\nfrom. \nfrom.config from.configimport .configimportConfigAttribute configimportConfigAttribute\n importConfigAttribute\nfrom ConfigAttribute\nfrom. \nfrom.ctx from.ctximport .ctximport_AppCtxGlobals ctximport_AppCtxGlobals\n import_AppCtxGlobals\nfrom _AppCtxGlobals\nfrom. \nfrom.ctx from.ctximport .ctximportAppContext ctximportAppContext\n importAppContext\nfrom AppContext\nfrom. \nfrom.ctx from.ctximport .ctximportRequestContext ctximportRequestContext\n importRequestContext\nfrom RequestContext\nfrom. \nfrom.globals from.globalsimport .globalsimport_request_ctx_stack globalsimport_request_ctx_stack\n import_request_ctx_stack\nfrom _request_ctx_stack\nfrom. \nfrom.globals from.globalsimport .globalsimportg globalsimportg\n importg\nfrom g\nfrom. \nfrom.globals from.globalsimport .globalsimportrequest globalsimportrequest\n importrequest\nfrom request\nfrom. \nfrom.globals from.globalsimport .globalsimportsession globalsimportsession\n importsession\nfrom session\nfrom. \nfrom.helpers from.helpersimport .helpersimport_endpoint_from_view_func helpersimport_endpoint_from_view_func\n import_endpoint_from_view_func\nfrom _endpoint_from_view_func\nfrom. \nfrom.helpers from.helpersimport .helpersimport_PackageBoundObject helpersimport_PackageBoundObject\n import_PackageBoundObject\nfrom _PackageBoundObject\nfrom. \nfrom.helpers from.helpersimport .helpersimportfind_package helpersimportfind_package\n importfind_package\nfrom find_package\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_debug_flag helpersimportget_debug_flag\n importget_debug_flag\nfrom get_debug_flag\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_env helpersimportget_env\n importget_env\nfrom get_env\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_flashed_messages helpersimportget_flashed_messages\n importget_flashed_messages\nfrom get_flashed_messages\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_load_dotenv helpersimportget_load_dotenv\n importget_load_dotenv\nfrom get_load_dotenv\nfrom. \nfrom.helpers from.helpersimport .helpersimportlocked_cached_property helpersimportlocked_cached_property\n importlocked_cached_property\nfrom locked_cached_property\nfrom. \nfrom.helpers from.helpersimport .helpersimporturl_for helpersimporturl_for\n importurl_for\nfrom url_for\nfrom. \nfrom.json from.jsonimport .jsonimportjsonify jsonimportjsonify\n importjsonify\nfrom jsonify\nfrom. \nfrom.logging from.loggingimport .loggingimportcreate_logger loggingimportcreate_logger\n importcreate_logger\nfrom create_logger\nfrom. \nfrom.sessions from.sessionsimport .sessionsimportSecureCookieSessionInterface sessionsimportSecureCookieSessionInterface\n importSecureCookieSessionInterface\nfrom SecureCookieSessionInterface\nfrom. \nfrom.signals from.signalsimport .signalsimportappcontext_tearing_down signalsimportappcontext_tearing_down\n importappcontext_tearing_down\nfrom appcontext_tearing_down\nfrom. \nfrom.signals from.signalsimport .signalsimportgot_request_exception signalsimportgot_request_exception\n importgot_request_exception\nfrom got_request_exception\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_finished signalsimportrequest_finished\n importrequest_finished\nfrom request_finished\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_started signalsimportrequest_started\n importrequest_started\nfrom request_started\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_tearing_down signalsimportrequest_tearing_down\n importrequest_tearing_down\nfrom request_tearing_down\nfrom. \nfrom.templating from.templatingimport .templatingimport_default_template_ctx_processor templatingimport_default_template_ctx_processor\n import_default_template_ctx_processor\nfrom _default_template_ctx_processor\nfrom. \nfrom.templating from.templatingimport .templatingimportDispatchingJinjaLoader templatingimportDispatchingJinjaLoader\n importDispatchingJinjaLoader\nfrom DispatchingJinjaLoader\nfrom. \nfrom.templating from.templatingimport .templatingimportEnvironment templatingimportEnvironment\n importEnvironment\nfrom Environment\nfrom. \nfrom.wrappers from.wrappersimport .wrappersimportRequest wrappersimportRequest\n importRequest\nfrom Request\nfrom. \nfrom.wrappers from.wrappersimport .wrappersimportResponse wrappersimportResponse\n importResponse\n_sentinel Response\n_sentinel= \n_sentinel=object _sentinel=object( =object() object()\n ()\ndef )\ndef_make_timedelta \ndef_make_timedelta( def_make_timedelta(value _make_timedelta(value) (value): value):\t ):\t\t :\t\tif \t\tifnot \tifnotisinstance ifnotisinstance( notisinstance(value isinstance(value, (value,timedelta value,timedelta) ,timedelta): timedelta):\t ):\t\t\t :\t\t\treturn \t\t\treturntimedelta \t\treturntimedelta( returntimedelta(seconds timedelta(seconds= (seconds=value seconds=value) =value)\t value)\t\t )\t\treturn \t\treturnvalue \treturnvalue\n returnvalue\n\n value\n\ndef \n\ndefsetupmethod \ndefsetupmethod( defsetupmethod(f setupmethod(f) (f): f):\t ):\t\t :\t\t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\" \t\t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\t \t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\tdef \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\tdefwrapper_func \tdefwrapper_func( defwrapper_func(self wrapper_func(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\tif \t\t\tifself \t\tifself. ifself.debug self.debugand .debugandself debugandself. andself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t :\t\t\t\traise \t\t\t\traiseAssertionError \t\t\traiseAssertionError( raiseAssertionError(\"A setup function was called after the \" AssertionError(\"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \" (\"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \" \"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\" \"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \" \"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \" \"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \"\"before the application starts serving requests.\" \"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \"\"before the application starts serving requests.\") \"database models and everything related at a central place \"\"before the application starts serving requests.\")\t \"before the application starts serving requests.\")\t\t )\t\treturn \t\treturnf \treturnf( returnf(self f(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\treturn \t\treturnupdate_wrapper \treturnupdate_wrapper( returnupdate_wrapper(wrapper_func update_wrapper(wrapper_func, (wrapper_func,f wrapper_func,f) ,f)\n f)\n\n )\n\nclass \n\nclassFlask \nclassFlask( classFlask(_PackageBoundObject Flask(_PackageBoundObject) (_PackageBoundObject): _PackageBoundObject):\t ):\t\t :\t\t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\" \t\t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\t \t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\trequest_class \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\trequest_class= \trequest_class=Request request_class=Request\t =Request\tresponse_class Request\tresponse_class= \tresponse_class=Response response_class=Response\t =Response\tjinja_environment Response\tjinja_environment= \tjinja_environment=Environment jinja_environment=Environment\t =Environment\tapp_ctx_globals_class Environment\tapp_ctx_globals_class= \tapp_ctx_globals_class=_AppCtxGlobals app_ctx_globals_class=_AppCtxGlobals\t =_AppCtxGlobals\tconfig_class _AppCtxGlobals\tconfig_class= \tconfig_class=Config config_class=Config\t =Config\ttesting Config\ttesting= \ttesting=ConfigAttribute testing=ConfigAttribute( =ConfigAttribute(\"TESTING\" ConfigAttribute(\"TESTING\") (\"TESTING\")\t \"TESTING\")\tsecret_key )\tsecret_key= \tsecret_key=ConfigAttribute secret_key=ConfigAttribute( =ConfigAttribute(\"SECRET_KEY\" ConfigAttribute(\"SECRET_KEY\") (\"SECRET_KEY\")\t \"SECRET_KEY\")\tsession_cookie_name )\tsession_cookie_name= \tsession_cookie_name=ConfigAttribute session_cookie_name=ConfigAttribute( =ConfigAttribute(\"SESSION_COOKIE_NAME\" ConfigAttribute(\"SESSION_COOKIE_NAME\") (\"SESSION_COOKIE_NAME\")\t \"SESSION_COOKIE_NAME\")\tpermanent_session_lifetime )\tpermanent_session_lifetime= \tpermanent_session_lifetime=ConfigAttribute permanent_session_lifetime=ConfigAttribute( =ConfigAttribute(\"PERMANENT_SESSION_LIFETIME\" ConfigAttribute(\"PERMANENT_SESSION_LIFETIME\", (\"PERMANENT_SESSION_LIFETIME\",get_converter \"PERMANENT_SESSION_LIFETIME\",get_converter= ,get_converter=_make_timedelta get_converter=_make_timedelta) =_make_timedelta)\t _make_timedelta)\tsend_file_max_age_default )\tsend_file_max_age_default= \tsend_file_max_age_default=ConfigAttribute send_file_max_age_default=ConfigAttribute( =ConfigAttribute(\"SEND_FILE_MAX_AGE_DEFAULT\" ConfigAttribute(\"SEND_FILE_MAX_AGE_DEFAULT\", (\"SEND_FILE_MAX_AGE_DEFAULT\",get_converter \"SEND_FILE_MAX_AGE_DEFAULT\",get_converter= ,get_converter=_make_timedelta get_converter=_make_timedelta) =_make_timedelta)\t _make_timedelta)\tuse_x_sendfile )\tuse_x_sendfile= \tuse_x_sendfile=ConfigAttribute use_x_sendfile=ConfigAttribute( =ConfigAttribute(\"USE_X_SENDFILE\" ConfigAttribute(\"USE_X_SENDFILE\") (\"USE_X_SENDFILE\")\t \"USE_X_SENDFILE\")\tjson_encoder )\tjson_encoder= \tjson_encoder=json json_encoder=json. =json.JSONEncoder json.JSONEncoder\t .JSONEncoder\tjson_decoder JSONEncoder\tjson_decoder= \tjson_decoder=json json_decoder=json. =json.JSONDecoder json.JSONDecoder\t .JSONDecoder\tjinja_options JSONDecoder\tjinja_options= \tjinja_options={ jinja_options={\"extensions\" ={\"extensions\": {\"extensions\":[ \"extensions\":[\"jinja2.ext.autoescape\" :[\"jinja2.ext.autoescape\", [\"jinja2.ext.autoescape\",\"jinja2.ext.with_\" \"jinja2.ext.autoescape\",\"jinja2.ext.with_\"] ,\"jinja2.ext.with_\"]} \"jinja2.ext.with_\"]}\t ]}\tdefault_config }\tdefault_config= \tdefault_config=ImmutableDict default_config=ImmutableDict( =ImmutableDict({ ImmutableDict({\"ENV\" ({\"ENV\": {\"ENV\":None \"ENV\":None, :None,\"DEBUG\" None,\"DEBUG\": ,\"DEBUG\":None \"DEBUG\":None, :None,\"TESTING\" None,\"TESTING\": ,\"TESTING\":False \"TESTING\":False, :False,\"PROPAGATE_EXCEPTIONS\" False,\"PROPAGATE_EXCEPTIONS\": ,\"PROPAGATE_EXCEPTIONS\":None \"PROPAGATE_EXCEPTIONS\":None, :None,\"PRESERVE_CONTEXT_ON_EXCEPTION\" None,\"PRESERVE_CONTEXT_ON_EXCEPTION\": ,\"PRESERVE_CONTEXT_ON_EXCEPTION\":None \"PRESERVE_CONTEXT_ON_EXCEPTION\":None, :None,\"SECRET_KEY\" None,\"SECRET_KEY\": ,\"SECRET_KEY\":None \"SECRET_KEY\":None, :None,\"PERMANENT_SESSION_LIFETIME\" None,\"PERMANENT_SESSION_LIFETIME\": ,\"PERMANENT_SESSION_LIFETIME\":timedelta \"PERMANENT_SESSION_LIFETIME\":timedelta( :timedelta(days timedelta(days= (days=31 days=31) =31), 31),\"USE_X_SENDFILE\" ),\"USE_X_SENDFILE\": ,\"USE_X_SENDFILE\":False \"USE_X_SENDFILE\":False, :False,\"SERVER_NAME\" False,\"SERVER_NAME\": ,\"SERVER_NAME\":None \"SERVER_NAME\":None, :None,\"APPLICATION_ROOT\" None,\"APPLICATION_ROOT\": ,\"APPLICATION_ROOT\":\"/\" \"APPLICATION_ROOT\":\"/\", :\"/\",\"SESSION_COOKIE_NAME\" \"/\",\"SESSION_COOKIE_NAME\": ,\"SESSION_COOKIE_NAME\":\"session\" \"SESSION_COOKIE_NAME\":\"session\", :\"session\",\"SESSION_COOKIE_DOMAIN\" \"session\",\"SESSION_COOKIE_DOMAIN\": ,\"SESSION_COOKIE_DOMAIN\":None \"SESSION_COOKIE_DOMAIN\":None, :None,\"SESSION_COOKIE_PATH\" None,\"SESSION_COOKIE_PATH\": ,\"SESSION_COOKIE_PATH\":None \"SESSION_COOKIE_PATH\":None, :None,\"SESSION_COOKIE_HTTPONLY\" None,\"SESSION_COOKIE_HTTPONLY\": ,\"SESSION_COOKIE_HTTPONLY\":True \"SESSION_COOKIE_HTTPONLY\":True, :True,\"SESSION_COOKIE_SECURE\" True,\"SESSION_COOKIE_SECURE\": ,\"SESSION_COOKIE_SECURE\":False \"SESSION_COOKIE_SECURE\":False, :False,\"SESSION_COOKIE_SAMESITE\" False,\"SESSION_COOKIE_SAMESITE\": ,\"SESSION_COOKIE_SAMESITE\":None \"SESSION_COOKIE_SAMESITE\":None, :None,\"SESSION_REFRESH_EACH_REQUEST\" None,\"SESSION_REFRESH_EACH_REQUEST\": ,\"SESSION_REFRESH_EACH_REQUEST\":True \"SESSION_REFRESH_EACH_REQUEST\":True, :True,\"MAX_CONTENT_LENGTH\" True,\"MAX_CONTENT_LENGTH\": ,\"MAX_CONTENT_LENGTH\":None \"MAX_CONTENT_LENGTH\":None, :None,\"SEND_FILE_MAX_AGE_DEFAULT\" None,\"SEND_FILE_MAX_AGE_DEFAULT\": ,\"SEND_FILE_MAX_AGE_DEFAULT\":timedelta \"SEND_FILE_MAX_AGE_DEFAULT\":timedelta( :timedelta(hours timedelta(hours= (hours=12 hours=12) =12), 12),\"TRAP_BAD_REQUEST_ERRORS\" ),\"TRAP_BAD_REQUEST_ERRORS\": ,\"TRAP_BAD_REQUEST_ERRORS\":None \"TRAP_BAD_REQUEST_ERRORS\":None, :None,\"TRAP_HTTP_EXCEPTIONS\" None,\"TRAP_HTTP_EXCEPTIONS\": ,\"TRAP_HTTP_EXCEPTIONS\":False \"TRAP_HTTP_EXCEPTIONS\":False, :False,\"EXPLAIN_TEMPLATE_LOADING\" False,\"EXPLAIN_TEMPLATE_LOADING\": ,\"EXPLAIN_TEMPLATE_LOADING\":False \"EXPLAIN_TEMPLATE_LOADING\":False, :False,\"PREFERRED_URL_SCHEME\" False,\"PREFERRED_URL_SCHEME\": ,\"PREFERRED_URL_SCHEME\":\"http\" \"PREFERRED_URL_SCHEME\":\"http\", :\"http\",\"JSON_AS_ASCII\" \"http\",\"JSON_AS_ASCII\": ,\"JSON_AS_ASCII\":True \"JSON_AS_ASCII\":True, :True,\"JSON_SORT_KEYS\" True,\"JSON_SORT_KEYS\": ,\"JSON_SORT_KEYS\":True \"JSON_SORT_KEYS\":True, :True,\"JSONIFY_PRETTYPRINT_REGULAR\" True,\"JSONIFY_PRETTYPRINT_REGULAR\": ,\"JSONIFY_PRETTYPRINT_REGULAR\":False \"JSONIFY_PRETTYPRINT_REGULAR\":False, :False,\"JSONIFY_MIMETYPE\" False,\"JSONIFY_MIMETYPE\": ,\"JSONIFY_MIMETYPE\":\"application/json\" \"JSONIFY_MIMETYPE\":\"application/json\", :\"application/json\",\"TEMPLATES_AUTO_RELOAD\" \"application/json\",\"TEMPLATES_AUTO_RELOAD\": ,\"TEMPLATES_AUTO_RELOAD\":None \"TEMPLATES_AUTO_RELOAD\":None, :None,\"MAX_COOKIE_SIZE\" None,\"MAX_COOKIE_SIZE\": ,\"MAX_COOKIE_SIZE\":4093 \"MAX_COOKIE_SIZE\":4093, :4093,} 4093,}) ,})\t })\turl_rule_class )\turl_rule_class= \turl_rule_class=Rule url_rule_class=Rule\t =Rule\turl_map_class Rule\turl_map_class= \turl_map_class=Map url_map_class=Map\t =Map\ttest_client_class Map\ttest_client_class= \ttest_client_class=None test_client_class=None\t =None\ttest_cli_runner_class None\ttest_cli_runner_class= \ttest_cli_runner_class=None test_cli_runner_class=None\t =None\tsession_interface None\tsession_interface= \tsession_interface=SecureCookieSessionInterface session_interface=SecureCookieSessionInterface( =SecureCookieSessionInterface() SecureCookieSessionInterface()\t ()\timport_name )\timport_name= \timport_name=None import_name=None\t =None\ttemplate_folder None\ttemplate_folder= \ttemplate_folder=None template_folder=None\t =None\troot_path None\troot_path= \troot_path=None root_path=None\t =None\tdef None\tdef__init__ \tdef__init__( def__init__(self __init__(self, (self,import_name self,import_name, ,import_name,static_url_path import_name,static_url_path= ,static_url_path=None static_url_path=None, =None,static_folder None,static_folder= ,static_folder=\"static\" static_folder=\"static\", =\"static\",static_host \"static\",static_host= ,static_host=None static_host=None, =None,host_matching None,host_matching= ,host_matching=False host_matching=False, =False,subdomain_matching False,subdomain_matching= ,subdomain_matching=False subdomain_matching=False, =False,template_folder False,template_folder= ,template_folder=\"templates\" template_folder=\"templates\", =\"templates\",instance_path \"templates\",instance_path= ,instance_path=None instance_path=None, =None,instance_relative_config None,instance_relative_config= ,instance_relative_config=False instance_relative_config=False, =False,root_path False,root_path= ,root_path=None root_path=None, =None,) None,): ,):\t ):\t\t\t :\t\t\t_PackageBoundObject \t\t\t_PackageBoundObject. \t\t_PackageBoundObject.__init__ _PackageBoundObject.__init__( .__init__(self __init__(self, (self,import_name self,import_name, ,import_name,template_folder import_name,template_folder= ,template_folder=template_folder template_folder=template_folder, =template_folder,root_path template_folder,root_path= ,root_path=root_path root_path=root_path) =root_path)\t root_path)\tself )\tself. \tself.static_url_path self.static_url_path= .static_url_path=static_url_path static_url_path=static_url_path\t =static_url_path\tself static_url_path\tself. \tself.static_folder self.static_folder= .static_folder=static_folder static_folder=static_folder\t =static_folder\tif static_folder\tifinstance_path \tifinstance_pathis ifinstance_pathisNone instance_pathisNone: isNone:\t None:\t\t\t\t :\t\t\t\tinstance_path \t\t\t\tinstance_path= \t\t\tinstance_path=self instance_path=self. =self.auto_find_instance_path self.auto_find_instance_path( .auto_find_instance_path() auto_find_instance_path()\t ()\t\t )\t\telif \t\telifnot \telifnotos elifnotos. notos.path os.path. .path.isabs path.isabs( .isabs(instance_path isabs(instance_path) (instance_path): instance_path):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseValueError \t\t\traiseValueError( raiseValueError(\"If an instance path is provided it must be absolute.\" ValueError(\"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\" (\"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\") \"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\")\t \" A relative path was given instead.\")\t\t )\t\tself \t\tself. \tself.instance_path self.instance_path= .instance_path=instance_path instance_path=instance_path\t =instance_path\tself instance_path\tself. \tself.config self.config= .config=self config=self. =self.make_config self.make_config( .make_config(instance_relative_config make_config(instance_relative_config) (instance_relative_config)\t instance_relative_config)\tself )\tself. \tself.view_functions self.view_functions= .view_functions={ view_functions={} ={}\t {}\tself }\tself. \tself.error_handler_spec self.error_handler_spec= .error_handler_spec={ error_handler_spec={} ={}\t {}\tself }\tself. \tself.url_build_error_handlers self.url_build_error_handlers= .url_build_error_handlers=[ url_build_error_handlers=[] =[]\t []\tself ]\tself. \tself.before_request_funcs self.before_request_funcs= .before_request_funcs={ before_request_funcs={} ={}\t {}\tself }\tself. \tself.before_first_request_funcs self.before_first_request_funcs= .before_first_request_funcs=[ before_first_request_funcs=[] =[]\t []\tself ]\tself. \tself.after_request_funcs self.after_request_funcs= .after_request_funcs={ after_request_funcs={} ={}\t {}\tself }\tself. \tself.teardown_request_funcs self.teardown_request_funcs= .teardown_request_funcs={ teardown_request_funcs={} ={}\t {}\tself }\tself. \tself.teardown_appcontext_funcs self.teardown_appcontext_funcs= .teardown_appcontext_funcs=[ teardown_appcontext_funcs=[] =[]\t []\tself ]\tself. \tself.url_value_preprocessors self.url_value_preprocessors= .url_value_preprocessors={ url_value_preprocessors={} ={}\t {}\tself }\tself. \tself.url_default_functions self.url_default_functions= .url_default_functions={ url_default_functions={} ={}\t {}\tself }\tself. \tself.template_context_processors self.template_context_processors= .template_context_processors={ template_context_processors={None ={None: {None:[ None:[_default_template_ctx_processor :[_default_template_ctx_processor] [_default_template_ctx_processor]} _default_template_ctx_processor]}\t ]}\tself }\tself. \tself.shell_context_processors self.shell_context_processors= .shell_context_processors=[ shell_context_processors=[] =[]\t []\tself ]\tself. \tself.blueprints self.blueprints= .blueprints={ blueprints={} ={}\t {}\tself }\tself. \tself._blueprint_order self._blueprint_order= ._blueprint_order=[ _blueprint_order=[] =[]\t []\tself ]\tself. \tself.extensions self.extensions= .extensions={ extensions={} ={}\t {}\tself }\tself. \tself.url_map self.url_map= .url_map=self url_map=self. =self.url_map_class self.url_map_class( .url_map_class() url_map_class()\t ()\tself )\tself. \tself.url_map self.url_map. .url_map.host_matching url_map.host_matching= .host_matching=host_matching host_matching=host_matching\t =host_matching\tself host_matching\tself. \tself.subdomain_matching self.subdomain_matching= .subdomain_matching=subdomain_matching subdomain_matching=subdomain_matching\t =subdomain_matching\tself subdomain_matching\tself. \tself._got_first_request self._got_first_request= ._got_first_request=False _got_first_request=False\t =False\tself False\tself. \tself._before_request_lock self._before_request_lock= ._before_request_lock=Lock _before_request_lock=Lock( =Lock() Lock()\t ()\tif )\tifself \tifself. ifself.has_static_folder self.has_static_folder: .has_static_folder:\t has_static_folder:\t\t\t\t :\t\t\t\tassert \t\t\t\tassert( \t\t\tassert(bool assert(bool( (bool(static_host bool(static_host) (static_host)== static_host)==host_matching )==host_matching) ==host_matching), host_matching),\"Invalid static_host/host_matching combination\" ),\"Invalid static_host/host_matching combination\"\t ,\"Invalid static_host/host_matching combination\"\tself \"Invalid static_host/host_matching combination\"\tself. \tself.add_url_rule self.add_url_rule( .add_url_rule(self add_url_rule(self. (self.static_url_path self.static_url_path+ .static_url_path+\"/<path:filename>\" static_url_path+\"/<path:filename>\", +\"/<path:filename>\",endpoint \"/<path:filename>\",endpoint= ,endpoint=\"static\" endpoint=\"static\", =\"static\",host \"static\",host= ,host=static_host host=static_host, =static_host,view_func static_host,view_func= ,view_func=self view_func=self. =self.send_static_file self.send_static_file, .send_static_file,) send_static_file,)\t ,)\t\t )\t\tself \t\tself. \tself.cli self.cli. .cli.name cli.name= .name=self name=self. =self.name self.name\t .name\t\t name\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdefname \tdefname( defname(self name(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\tif \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\tifself \tifself. ifself.import_name self.import_name== .import_name==\"__main__\" import_name==\"__main__\": ==\"__main__\":\t \"__main__\":\t\t\t\t :\t\t\t\tfn \t\t\t\tfn= \t\t\tfn=getattr fn=getattr( =getattr(sys getattr(sys. (sys.modules sys.modules[ .modules[\"__main__\" modules[\"__main__\"] [\"__main__\"], \"__main__\"],\"__file__\" ],\"__file__\", ,\"__file__\",None \"__file__\",None) ,None)\t None)\tif )\tiffn \tiffnis iffnisNone fnisNone: isNone:\t None:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturn\"__main__\" \t\t\t\treturn\"__main__\"\t return\"__main__\"\t\t \"__main__\"\t\treturn \t\treturnos \treturnos. returnos.path os.path. .path.splitext path.splitext( .splitext(os splitext(os. (os.path os.path. .path.basename path.basename( .basename(fn basename(fn) (fn)) fn))[ ))[0 )[0] [0]\t 0]\t\t ]\t\treturn \t\treturnself \treturnself. returnself.import_name self.import_name\t .import_name\t\t import_name\t\t@ \t\t@property \t@property\t @property\tdef property\tdefpropagate_exceptions \tdefpropagate_exceptions( defpropagate_exceptions(self propagate_exceptions(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"PROPAGATE_EXCEPTIONS\" config[\"PROPAGATE_EXCEPTIONS\"] [\"PROPAGATE_EXCEPTIONS\"]\t \"PROPAGATE_EXCEPTIONS\"]\tif ]\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnrv \t\t\treturnrv\t returnrv\t\t rv\t\treturn \t\treturnself \treturnself. returnself.testing self.testingor .testingorself testingorself. orself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@property \t@property\t @property\tdef property\tdefpreserve_context_on_exception \tdefpreserve_context_on_exception( defpreserve_context_on_exception(self preserve_context_on_exception(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"PRESERVE_CONTEXT_ON_EXCEPTION\" config[\"PRESERVE_CONTEXT_ON_EXCEPTION\"] [\"PRESERVE_CONTEXT_ON_EXCEPTION\"]\t \"PRESERVE_CONTEXT_ON_EXCEPTION\"]\tif ]\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnrv \t\t\treturnrv\t returnrv\t\t rv\t\treturn \t\treturnself \treturnself. returnself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdeflogger \tdeflogger( deflogger(self logger(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\treturn \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\treturncreate_logger \treturncreate_logger( returncreate_logger(self create_logger(self) (self)\t self)\t\t )\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdefjinja_env \tdefjinja_env( defjinja_env(self jinja_env(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\" \t\t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\t \t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\treturn \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\treturnself \treturnself. returnself.create_jinja_environment self.create_jinja_environment( .create_jinja_environment() create_jinja_environment()\t ()\t\t )\t\t@ \t\t@property \t@property\t @property\tdef property\tdefgot_first_request \tdefgot_first_request( defgot_first_request(self got_first_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\treturn \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\treturnself \treturnself. returnself._got_first_request self._got_first_request\t ._got_first_request\t\t _got_first_request\t\tdef \t\tdefmake_config \tdefmake_config( defmake_config(self make_config(self, (self,instance_relative self,instance_relative= ,instance_relative=False instance_relative=False) =False): False):\t ):\t\t\t :\t\t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\troot_path \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\troot_path= \troot_path=self root_path=self. =self.root_path self.root_path\t .root_path\tif root_path\tifinstance_relative \tifinstance_relative: ifinstance_relative:\t instance_relative:\t\t\t\t :\t\t\t\troot_path \t\t\t\troot_path= \t\t\troot_path=self root_path=self. =self.instance_path self.instance_path\t .instance_path\t\t instance_path\t\tdefaults \t\tdefaults= \tdefaults=dict defaults=dict( =dict(self dict(self. (self.default_config self.default_config) .default_config)\t default_config)\tdefaults )\tdefaults[ \tdefaults[\"ENV\" defaults[\"ENV\"] [\"ENV\"]= \"ENV\"]=get_env ]=get_env( =get_env() get_env()\t ()\tdefaults )\tdefaults[ \tdefaults[\"DEBUG\" defaults[\"DEBUG\"] [\"DEBUG\"]= \"DEBUG\"]=get_debug_flag ]=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\treturn )\treturnself \treturnself. returnself.config_class self.config_class( .config_class(root_path config_class(root_path, (root_path,defaults root_path,defaults) ,defaults)\t defaults)\t\t )\t\tdef \t\tdefauto_find_instance_path \tdefauto_find_instance_path( defauto_find_instance_path(self auto_find_instance_path(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\tprefix \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\tprefix, \tprefix,package_path prefix,package_path= ,package_path=find_package package_path=find_package( =find_package(self find_package(self. (self.import_name self.import_name) .import_name)\t import_name)\tif )\tifprefix \tifprefixis ifprefixisNone prefixisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnos \t\t\treturnos. returnos.path os.path. .path.join path.join( .join(package_path join(package_path, (package_path,\"instance\" package_path,\"instance\") ,\"instance\")\t \"instance\")\t\t )\t\treturn \t\treturnos \treturnos. returnos.path os.path. .path.join path.join( .join(prefix join(prefix, (prefix,\"var\" prefix,\"var\", ,\"var\",self \"var\",self. ,self.name self.name+ .name+\"-instance\" name+\"-instance\") +\"-instance\")\t \"-instance\")\t\t )\t\tdef \t\tdefopen_instance_resource \tdefopen_instance_resource( defopen_instance_resource(self open_instance_resource(self, (self,resource self,resource, ,resource,mode resource,mode= ,mode=\"rb\" mode=\"rb\") =\"rb\"): \"rb\"):\t ):\t\t\t :\t\t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\" \t\t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\t \t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\treturn \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\treturnopen \treturnopen( returnopen(os open(os. (os.path os.path. .path.join path.join( .join(self join(self. (self.instance_path self.instance_path, .instance_path,resource instance_path,resource) ,resource), resource),mode ),mode) ,mode)\t mode)\t\t )\t\t@ \t\t@property \t@property\t @property\tdef property\tdeftemplates_auto_reload \tdeftemplates_auto_reload( deftemplates_auto_reload(self templates_auto_reload(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\" \t\t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\t \t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\trv \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"TEMPLATES_AUTO_RELOAD\" config[\"TEMPLATES_AUTO_RELOAD\"] [\"TEMPLATES_AUTO_RELOAD\"]\t \"TEMPLATES_AUTO_RELOAD\"]\treturn ]\treturnrv \treturnrvif returnrvifrv rvifrvis ifrvisnot rvisnotNone isnotNoneelse notNoneelseself Noneelseself. elseself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@templates_auto_reload \t@templates_auto_reload. @templates_auto_reload.setter templates_auto_reload.setter\t .setter\tdef setter\tdeftemplates_auto_reload \tdeftemplates_auto_reload( deftemplates_auto_reload(self templates_auto_reload(self, (self,value self,value) ,value): value):\t ):\t\t\t :\t\t\tself \t\t\tself. \t\tself.config self.config[ .config[\"TEMPLATES_AUTO_RELOAD\" config[\"TEMPLATES_AUTO_RELOAD\"] [\"TEMPLATES_AUTO_RELOAD\"]= \"TEMPLATES_AUTO_RELOAD\"]=value ]=value\t =value\t\t value\t\tdef \t\tdefcreate_jinja_environment \tdefcreate_jinja_environment( defcreate_jinja_environment(self create_jinja_environment(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\" \t\t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\t \t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\toptions \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\toptions= \toptions=dict options=dict( =dict(self dict(self. (self.jinja_options self.jinja_options) .jinja_options)\t jinja_options)\tif )\tif\"autoescape\" \tif\"autoescape\"not if\"autoescape\"notin \"autoescape\"notinoptions notinoptions: inoptions:\t options:\t\t\t\t :\t\t\t\toptions \t\t\t\toptions[ \t\t\toptions[\"autoescape\" options[\"autoescape\"] [\"autoescape\"]= \"autoescape\"]=self ]=self. =self.select_jinja_autoescape self.select_jinja_autoescape\t .select_jinja_autoescape\t\t select_jinja_autoescape\t\tif \t\tif\"auto_reload\" \tif\"auto_reload\"not if\"auto_reload\"notin \"auto_reload\"notinoptions notinoptions: inoptions:\t options:\t\t\t\t :\t\t\t\toptions \t\t\t\toptions[ \t\t\toptions[\"auto_reload\" options[\"auto_reload\"] [\"auto_reload\"]= \"auto_reload\"]=self ]=self. =self.templates_auto_reload self.templates_auto_reload\t .templates_auto_reload\t\t templates_auto_reload\t\trv \t\trv= \trv=self rv=self. =self.jinja_environment self.jinja_environment( .jinja_environment(self jinja_environment(self, (self,** self,**options ,**options) **options)\t options)\trv )\trv. \trv.globals rv.globals. .globals.update globals.update( .update(url_for update(url_for= (url_for=url_for url_for=url_for, =url_for,get_flashed_messages url_for,get_flashed_messages= ,get_flashed_messages=get_flashed_messages get_flashed_messages=get_flashed_messages, =get_flashed_messages,config get_flashed_messages,config= ,config=self config=self. =self.config self.config, .config,request config,request= ,request=request request=request, =request,session request,session= ,session=session session=session, =session,g session,g= ,g=g g=g, =g,) g,)\t ,)\trv )\trv. \trv.filters rv.filters[ .filters[\"tojson\" filters[\"tojson\"] [\"tojson\"]= \"tojson\"]=json ]=json. =json.tojson_filter json.tojson_filter\t .tojson_filter\treturn tojson_filter\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefcreate_global_jinja_loader \tdefcreate_global_jinja_loader( defcreate_global_jinja_loader(self create_global_jinja_loader(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\treturn \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\treturnDispatchingJinjaLoader \treturnDispatchingJinjaLoader( returnDispatchingJinjaLoader(self DispatchingJinjaLoader(self) (self)\t self)\t\t )\t\tdef \t\tdefselect_jinja_autoescape \tdefselect_jinja_autoescape( defselect_jinja_autoescape(self select_jinja_autoescape(self, (self,filename self,filename) ,filename): filename):\t ):\t\t\t :\t\t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\" \t\t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\t \t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\tif \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\tiffilename \tiffilenameis iffilenameisNone filenameisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\treturn \t\treturnfilename \treturnfilename. returnfilename.endswith filename.endswith( .endswith(( endswith((\".html\" ((\".html\", (\".html\",\".htm\" \".html\",\".htm\", ,\".htm\",\".xml\" \".htm\",\".xml\", ,\".xml\",\".xhtml\" \".xml\",\".xhtml\") ,\".xhtml\")) \".xhtml\"))\t ))\t\t )\t\tdef \t\tdefupdate_template_context \tdefupdate_template_context( defupdate_template_context(self update_template_context(self, (self,context self,context) ,context): context):\t ):\t\t\t :\t\t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\" \t\t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\t \t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\tfuncs \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\tfuncs= \tfuncs=self funcs=self. =self.template_context_processors self.template_context_processors[ .template_context_processors[None template_context_processors[None] [None]\t None]\treqctx ]\treqctx= \treqctx=_request_ctx_stack reqctx=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top\t .top\tif top\tifreqctx \tifreqctxis ifreqctxisnot reqctxisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tbp \t\t\t\tbp= \t\t\tbp=reqctx bp=reqctx. =reqctx.request reqctx.request. .request.blueprint request.blueprint\t .blueprint\tif blueprint\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.template_context_processors self.template_context_processors: .template_context_processors:\t template_context_processors:\t\t\t\t\t :\t\t\t\t\tfuncs \t\t\t\t\tfuncs= \t\t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.template_context_processors self.template_context_processors[ .template_context_processors[bp template_context_processors[bp] [bp]) bp])\t ])\t\t )\t\t\t \t\t\torig_ctx \t\torig_ctx= \torig_ctx=context orig_ctx=context. =context.copy context.copy( .copy() copy()\t ()\tfor )\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tcontext \t\t\t\tcontext. \t\t\tcontext.update context.update( .update(func update(func( (func() func()) ())\t ))\t\t )\t\tcontext \t\tcontext. \tcontext.update context.update( .update(orig_ctx update(orig_ctx) (orig_ctx)\t orig_ctx)\t\t )\t\tdef \t\tdefmake_shell_context \tdefmake_shell_context( defmake_shell_context(self make_shell_context(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\trv \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\trv= \trv={ rv={\"app\" ={\"app\": {\"app\":self \"app\":self, :self,\"g\" self,\"g\": ,\"g\":g \"g\":g} :g}\t g}\tfor }\tforprocessor \tforprocessorin forprocessorinself processorinself. inself.shell_context_processors self.shell_context_processors: .shell_context_processors:\t shell_context_processors:\t\t\t\t :\t\t\t\trv \t\t\t\trv. \t\t\trv.update rv.update( .update(processor update(processor( (processor() processor()) ())\t ))\t\t )\t\treturn \t\treturnrv \treturnrv\t returnrv\t\t rv\t\tenv \t\tenv= \tenv=ConfigAttribute env=ConfigAttribute( =ConfigAttribute(\"ENV\" ConfigAttribute(\"ENV\") (\"ENV\")\t \"ENV\")\t@ )\t@property \t@property\t @property\tdef property\tdefdebug \tdefdebug( defdebug(self debug(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\" \t\t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\t \t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\treturn \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\treturnself \treturnself. returnself.config self.config[ .config[\"DEBUG\" config[\"DEBUG\"] [\"DEBUG\"]\t \"DEBUG\"]\t\t ]\t\t@ \t\t@debug \t@debug. @debug.setter debug.setter\t .setter\tdef setter\tdefdebug \tdefdebug( defdebug(self debug(self, (self,value self,value) ,value): value):\t ):\t\t\t :\t\t\tself \t\t\tself. \t\tself.config self.config[ .config[\"DEBUG\" config[\"DEBUG\"] [\"DEBUG\"]= \"DEBUG\"]=value ]=value\t =value\tself value\tself. \tself.jinja_env self.jinja_env. .jinja_env.auto_reload jinja_env.auto_reload= .auto_reload=self auto_reload=self. =self.templates_auto_reload self.templates_auto_reload\t .templates_auto_reload\t\t templates_auto_reload\t\tdef \t\tdefrun \tdefrun( defrun(self run(self, (self,host self,host= ,host=None host=None, =None,port None,port= ,port=None port=None, =None,debug None,debug= ,debug=None debug=None, =None,load_dotenv None,load_dotenv= ,load_dotenv=True load_dotenv=True, =True,** True,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\" \t\t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\t \t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\tif \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\tifos \tifos. ifos.environ os.environ. .environ.get environ.get( .get(\"FLASK_RUN_FROM_CLI\" get(\"FLASK_RUN_FROM_CLI\") (\"FLASK_RUN_FROM_CLI\")== \"FLASK_RUN_FROM_CLI\")==\"true\" )==\"true\": ==\"true\":\t \"true\":\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.debughelpers from.debughelpersimport .debughelpersimportexplain_ignored_app_run debughelpersimportexplain_ignored_app_run\t importexplain_ignored_app_run\texplain_ignored_app_run explain_ignored_app_run\texplain_ignored_app_run( \texplain_ignored_app_run() explain_ignored_app_run()\t ()\treturn )\treturn\t \treturn\t\t return\t\tif \t\tifget_load_dotenv \tifget_load_dotenv( ifget_load_dotenv(load_dotenv get_load_dotenv(load_dotenv) (load_dotenv): load_dotenv):\t ):\t\t\t\t :\t\t\t\tcli \t\t\t\tcli. \t\t\tcli.load_dotenv cli.load_dotenv( .load_dotenv() load_dotenv()\t ()\tif )\tif\"FLASK_ENV\" \tif\"FLASK_ENV\"in if\"FLASK_ENV\"inos \"FLASK_ENV\"inos. inos.environ os.environ: .environ:\t environ:\t\t\t\t\t :\t\t\t\t\tself \t\t\t\t\tself. \t\t\t\tself.env self.env= .env=get_env env=get_env( =get_env() get_env()\t ()\tself )\tself. \tself.debug self.debug= .debug=get_debug_flag debug=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\t\t )\t\telif \t\telif\"FLASK_DEBUG\" \telif\"FLASK_DEBUG\"in elif\"FLASK_DEBUG\"inos \"FLASK_DEBUG\"inos. inos.environ os.environ: .environ:\t environ:\t\t\t\t\t :\t\t\t\t\tself \t\t\t\t\tself. \t\t\t\tself.debug self.debug= .debug=get_debug_flag debug=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\t\t )\t\t\t \t\t\tif \t\tifdebug \tifdebugis ifdebugisnot debugisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.debug self.debug= .debug=bool debug=bool( =bool(debug bool(debug) (debug)\t debug)\t\t )\t\t_host \t\t_host= \t_host=\"127.0.0.1\" _host=\"127.0.0.1\"\t =\"127.0.0.1\"\t_port \"127.0.0.1\"\t_port= \t_port=5000 _port=5000\t =5000\tserver_name 5000\tserver_name= \tserver_name=self server_name=self. =self.config self.config. .config.get config.get( .get(\"SERVER_NAME\" get(\"SERVER_NAME\") (\"SERVER_NAME\")\t \"SERVER_NAME\")\tsn_host )\tsn_host, \tsn_host,sn_port sn_host,sn_port= ,sn_port=None sn_port=None, =None,None None,None\t ,None\tif None\tifserver_name \tifserver_name: ifserver_name:\t server_name:\t\t\t\t :\t\t\t\tsn_host \t\t\t\tsn_host, \t\t\tsn_host,_ sn_host,_, ,_,sn_port _,sn_port= ,sn_port=server_name sn_port=server_name. =server_name.partition server_name.partition( .partition(\":\" partition(\":\") (\":\")\t \":\")\t\t )\t\thost \t\thost= \thost=host host=hostor =hostorsn_host hostorsn_hostor orsn_hostor_host sn_hostor_host\t or_host\tport _host\tport= \tport=int port=int( =int(next int(next( (next(( next((p ((pfor (pforp pforpin forpin( pin(port in(port, (port,sn_port port,sn_port) ,sn_port)if sn_port)ifp )ifpis ifpisnot pisnotNone isnotNone) notNone), None),_port ),_port) ,_port)) _port))\t ))\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"use_reloader\" setdefault(\"use_reloader\", (\"use_reloader\",self \"use_reloader\",self. ,self.debug self.debug) .debug)\t debug)\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"use_debugger\" setdefault(\"use_debugger\", (\"use_debugger\",self \"use_debugger\",self. ,self.debug self.debug) .debug)\t debug)\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"threaded\" setdefault(\"threaded\", (\"threaded\",True \"threaded\",True) ,True)\t True)\tcli )\tcli. \tcli.show_server_banner cli.show_server_banner( .show_server_banner(self show_server_banner(self. (self.env self.env, .env,self env,self. ,self.debug self.debug, .debug,self debug,self. ,self.name self.name, .name,False name,False) ,False)\t False)\tfrom )\tfromwerkzeug \tfromwerkzeug. fromwerkzeug.serving werkzeug.servingimport .servingimportrun_simple servingimportrun_simple\t importrun_simple\ttry run_simple\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\trun_simple \t\t\t\trun_simple( \t\t\trun_simple(host run_simple(host, (host,port host,port, ,port,self port,self, ,self,** self,**options ,**options) **options)\t options)\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself._got_first_request self._got_first_request= ._got_first_request=False _got_first_request=False\t =False\t\t False\t\t\t \t\t\tdef \t\tdeftest_client \tdeftest_client( deftest_client(self test_client(self, (self,use_cookies self,use_cookies= ,use_cookies=True use_cookies=True, =True,** True,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\" \t\t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\t \t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\tcls \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\tcls= \tcls=self cls=self. =self.test_client_class self.test_client_class\t .test_client_class\tif test_client_class\tifcls \tifclsis ifclsisNone clsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.testing from.testingimport .testingimportFlaskClient testingimportFlaskClientas importFlaskClientascls FlaskClientascls\t ascls\t\t cls\t\treturn \t\treturncls \treturncls( returncls(self cls(self, (self,self self,self. ,self.response_class self.response_class, .response_class,use_cookies response_class,use_cookies= ,use_cookies=use_cookies use_cookies=use_cookies, =use_cookies,** use_cookies,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\tdef \t\tdeftest_cli_runner \tdeftest_cli_runner( deftest_cli_runner(self test_cli_runner(self, (self,** self,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\" \t\t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\t \t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\tcls \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\tcls= \tcls=self cls=self. =self.test_cli_runner_class self.test_cli_runner_class\t .test_cli_runner_class\tif test_cli_runner_class\tifcls \tifclsis ifclsisNone clsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.testing from.testingimport .testingimportFlaskCliRunner testingimportFlaskCliRunneras importFlaskCliRunnerascls FlaskCliRunnerascls\t ascls\t\t cls\t\treturn \t\treturncls \treturncls( returncls(self cls(self, (self,** self,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\tdef \t\tdefopen_session \tdefopen_session( defopen_session(self open_session(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\" \t\t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\t \t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\twarnings \"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"open_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.' ('\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.') '\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.')) ' \"session_interface.open_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.open_session session_interface.open_session( .open_session(self open_session(self, (self,request self,request) ,request)\t request)\t\t )\t\tdef \t\tdefsave_session \tdefsave_session( defsave_session(self save_session(self, (self,session self,session, ,session,response session,response) ,response): response):\t ):\t\t\t :\t\t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\" \t\t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\t \t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\twarnings \"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"save_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.' ('\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.') '\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.')) ' \"session_interface.save_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.save_session session_interface.save_session( .save_session(self save_session(self, (self,session self,session, ,session,response session,response) ,response)\t response)\t\t )\t\tdef \t\tdefmake_null_session \tdefmake_null_session( defmake_null_session(self make_null_session(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\twarnings \"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"make_null_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.' ('\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.') '\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.')) ' \"session_interface.make_null_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.make_null_session session_interface.make_null_session( .make_null_session(self make_null_session(self) (self)\t self)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefregister_blueprint \tdefregister_blueprint( defregister_blueprint(self register_blueprint(self, (self,blueprint self,blueprint, ,blueprint,** blueprint,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfirst_registration \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfirst_registration= \tfirst_registration=False first_registration=False\t =False\tif False\tifblueprint \tifblueprint. ifblueprint.name blueprint.namein .nameinself nameinself. inself.blueprints self.blueprints: .blueprints:\t blueprints:\t\t\t\t :\t\t\t\tassert \t\t\t\tassertself \t\t\tassertself. assertself.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name]is name]isblueprint ]isblueprint, isblueprint,( blueprint,(\"A name collision occurred between blueprints %r and %r. Both\" ,(\"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the' (\"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\" \"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\"% ' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\"%( \" fly need unique names.\"%(blueprint %(blueprint, (blueprint,self blueprint,self. ,self.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name], name],blueprint ],blueprint. ,blueprint.name blueprint.name) .name)) name))\t ))\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name]= name]=blueprint ]=blueprint\t =blueprint\tself blueprint\tself. \tself._blueprint_order self._blueprint_order. ._blueprint_order.append _blueprint_order.append( .append(blueprint append(blueprint) (blueprint)\t blueprint)\tfirst_registration )\tfirst_registration= \tfirst_registration=True first_registration=True\t =True\t\t True\t\tblueprint \t\tblueprint. \tblueprint.register blueprint.register( .register(self register(self, (self,options self,options, ,options,first_registration options,first_registration) ,first_registration)\t first_registration)\t\t )\t\tdef \t\tdefiter_blueprints \tdefiter_blueprints( defiter_blueprints(self iter_blueprints(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\treturn \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\treturniter \treturniter( returniter(self iter(self. (self._blueprint_order self._blueprint_order) ._blueprint_order)\t _blueprint_order)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_url_rule \tdefadd_url_rule( defadd_url_rule(self add_url_rule(self, (self,rule self,rule, ,rule,endpoint rule,endpoint= ,endpoint=None endpoint=None, =None,view_func None,view_func= ,view_func=None view_func=None, =None,provide_automatic_options None,provide_automatic_options= ,provide_automatic_options=None provide_automatic_options=None, =None,** None,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t\t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\t \t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tif \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tifendpoint \tifendpointis ifendpointisNone endpointisNone: isNone:\t None:\t\t\t\t :\t\t\t\tendpoint \t\t\t\tendpoint= \t\t\tendpoint=_endpoint_from_view_func endpoint=_endpoint_from_view_func( =_endpoint_from_view_func(view_func _endpoint_from_view_func(view_func) (view_func)\t view_func)\t\t )\t\toptions \t\toptions[ \toptions[\"endpoint\" options[\"endpoint\"] [\"endpoint\"]= \"endpoint\"]=endpoint ]=endpoint\t =endpoint\tmethods endpoint\tmethods= \tmethods=options methods=options. =options.pop options.pop( .pop(\"methods\" pop(\"methods\", (\"methods\",None \"methods\",None) ,None)\t None)\tif )\tifmethods \tifmethodsis ifmethodsisNone methodsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tmethods \t\t\t\tmethods= \t\t\tmethods=getattr methods=getattr( =getattr(view_func getattr(view_func, (view_func,\"methods\" view_func,\"methods\", ,\"methods\",None \"methods\",None) ,None)or None)or( )or(\"GET\" or(\"GET\", (\"GET\",) \"GET\",)\t ,)\t\t )\t\tif \t\tifisinstance \tifisinstance( ifisinstance(methods isinstance(methods, (methods,string_types methods,string_types) ,string_types): string_types):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseTypeError \t\t\traiseTypeError( raiseTypeError(\"Allowed methods have to be iterables of strings, \" TypeError(\"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])' (\"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])') \"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])')\t 'for example: @app.route(..., methods=[\"POST\"])')\t\t )\t\tmethods \t\tmethods= \tmethods=set methods=set( =set(item set(item. (item.upper item.upper( .upper() upper()for ()foritem )foritemin foriteminmethods iteminmethods) inmethods)\t methods)\trequired_methods )\trequired_methods= \trequired_methods=set required_methods=set( =set(getattr set(getattr( (getattr(view_func getattr(view_func, (view_func,\"required_methods\" view_func,\"required_methods\", ,\"required_methods\",( \"required_methods\",() ,()) ())) )))\t ))\tif )\tifprovide_automatic_options \tifprovide_automatic_optionsis ifprovide_automatic_optionsisNone provide_automatic_optionsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tprovide_automatic_options \t\t\t\tprovide_automatic_options= \t\t\tprovide_automatic_options=getattr provide_automatic_options=getattr( =getattr(view_func getattr(view_func, (view_func,\"provide_automatic_options\" view_func,\"provide_automatic_options\", ,\"provide_automatic_options\",None \"provide_automatic_options\",None) ,None)\t None)\t\t )\t\tif \t\tifprovide_automatic_options \tifprovide_automatic_optionsis ifprovide_automatic_optionsisNone provide_automatic_optionsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tif \t\t\t\tif\"OPTIONS\" \t\t\tif\"OPTIONS\"not if\"OPTIONS\"notin \"OPTIONS\"notinmethods notinmethods: inmethods:\t methods:\t\t\t\t\t :\t\t\t\t\tprovide_automatic_options \t\t\t\t\tprovide_automatic_options= \t\t\t\tprovide_automatic_options=True provide_automatic_options=True\t =True\trequired_methods True\trequired_methods. \trequired_methods.add required_methods.add( .add(\"OPTIONS\" add(\"OPTIONS\") (\"OPTIONS\")\t \"OPTIONS\")\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\tprovide_automatic_options \t\t\t\t\tprovide_automatic_options= \t\t\t\tprovide_automatic_options=False provide_automatic_options=False\t =False\t\t False\t\t\t \t\t\tmethods \t\tmethods|= \tmethods|=required_methods methods|=required_methods\t |=required_methods\trule required_methods\trule= \trule=self rule=self. =self.url_rule_class self.url_rule_class( .url_rule_class(rule url_rule_class(rule, (rule,methods rule,methods= ,methods=methods methods=methods, =methods,** methods,**options ,**options) **options)\t options)\trule )\trule. \trule.provide_automatic_options rule.provide_automatic_options= .provide_automatic_options=provide_automatic_options provide_automatic_options=provide_automatic_options\t =provide_automatic_options\tself provide_automatic_options\tself. \tself.url_map self.url_map. .url_map.add url_map.add( .add(rule add(rule) (rule)\t rule)\tif )\tifview_func \tifview_funcis ifview_funcisnot view_funcisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\told_func \t\t\t\told_func= \t\t\told_func=self old_func=self. =self.view_functions self.view_functions. .view_functions.get view_functions.get( .get(endpoint get(endpoint) (endpoint)\t endpoint)\tif )\tifold_func \tifold_funcis ifold_funcisnot old_funcisnotNone isnotNoneand notNoneandold_func Noneandold_func!= andold_func!=view_func old_func!=view_func: !=view_func:\t view_func:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseAssertionError \t\t\t\traiseAssertionError( raiseAssertionError(\"View function mapping is overwriting an \" AssertionError(\"View function mapping is overwriting an \"\"existing endpoint function: %s\" (\"View function mapping is overwriting an \"\"existing endpoint function: %s\"% \"View function mapping is overwriting an \"\"existing endpoint function: %s\"%endpoint \"existing endpoint function: %s\"%endpoint) %endpoint)\t endpoint)\t\t )\t\tself \t\tself. \tself.view_functions self.view_functions[ .view_functions[endpoint view_functions[endpoint] [endpoint]= endpoint]=view_func ]=view_func\t =view_func\t\t view_func\t\t\t \t\t\tdef \t\tdefroute \tdefroute( defroute(self route(self, (self,rule self,rule, ,rule,** rule,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tdef \"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tendpoint \t\t\t\tendpoint= \t\t\tendpoint=options endpoint=options. =options.pop options.pop( .pop(\"endpoint\" pop(\"endpoint\", (\"endpoint\",None \"endpoint\",None) ,None)\t None)\tself )\tself. \tself.add_url_rule self.add_url_rule( .add_url_rule(rule add_url_rule(rule, (rule,endpoint rule,endpoint, ,endpoint,f endpoint,f, ,f,** f,**options ,**options) **options)\t options)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefendpoint \tdefendpoint( defendpoint(self endpoint(self, (self,endpoint self,endpoint) ,endpoint): endpoint):\t ):\t\t\t :\t\t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\" \t\t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\t \t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\tdef \"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.view_functions self.view_functions[ .view_functions[endpoint view_functions[endpoint] [endpoint]= endpoint]=f ]=f\t =f\treturn f\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@staticmethod \t@staticmethod\t @staticmethod\tdef staticmethod\tdef_get_exc_class_and_code \tdef_get_exc_class_and_code( def_get_exc_class_and_code(exc_class_or_code _get_exc_class_and_code(exc_class_or_code) (exc_class_or_code): exc_class_or_code):\t ):\t\t\t :\t\t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\" \t\t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\t \t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\tif \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\tifisinstance \tifisinstance( ifisinstance(exc_class_or_code isinstance(exc_class_or_code, (exc_class_or_code,integer_types exc_class_or_code,integer_types) ,integer_types): integer_types):\t ):\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class= \t\t\texc_class=default_exceptions exc_class=default_exceptions[ =default_exceptions[exc_class_or_code default_exceptions[exc_class_or_code] [exc_class_or_code]\t exc_class_or_code]\t\t ]\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class= \t\t\texc_class=exc_class_or_code exc_class=exc_class_or_code\t =exc_class_or_code\t\t exc_class_or_code\t\tassert \t\tassertissubclass \tassertissubclass( assertissubclass(exc_class issubclass(exc_class, (exc_class,Exception exc_class,Exception) ,Exception)\t Exception)\tif )\tifissubclass \tifissubclass( ifissubclass(exc_class issubclass(exc_class, (exc_class,HTTPException exc_class,HTTPException) ,HTTPException): HTTPException):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnexc_class \t\t\treturnexc_class, returnexc_class,exc_class exc_class,exc_class. ,exc_class.code exc_class.code\t .code\t\t code\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnexc_class \t\t\treturnexc_class, returnexc_class,None exc_class,None\t ,None\t\t None\t\t\t \t\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeferrorhandler \tdeferrorhandler( deferrorhandler(self errorhandler(self, (self,code_or_exception self,code_or_exception) ,code_or_exception): code_or_exception):\t ):\t\t\t :\t\t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\" \t\t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\t \t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\tdef \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself._register_error_handler self._register_error_handler( ._register_error_handler(None _register_error_handler(None, (None,code_or_exception None,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefregister_error_handler \tdefregister_error_handler( defregister_error_handler(self register_error_handler(self, (self,code_or_exception self,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself. \tself._register_error_handler self._register_error_handler( ._register_error_handler(None _register_error_handler(None, (None,code_or_exception None,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f)\t f)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdef_register_error_handler \tdef_register_error_handler( def_register_error_handler(self _register_error_handler(self, (self,key self,key, ,key,code_or_exception key,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\" \t\t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\t \t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\tif \"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\tifisinstance \tifisinstance( ifisinstance(code_or_exception isinstance(code_or_exception, (code_or_exception,HTTPException code_or_exception,HTTPException) ,HTTPException): HTTPException):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseValueError \t\t\traiseValueError( raiseValueError(\"Tried to register a handler for an exception instance {0!r}.\" ValueError(\"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\" (\"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\"\" HTTP error codes.\" \"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\"\" HTTP error codes.\". \" Handlers can only be registered for exception classes or\"\" HTTP error codes.\".format \" HTTP error codes.\".format( .format(code_or_exception format(code_or_exception) (code_or_exception)) code_or_exception))\t ))\t\t )\t\ttry \t\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class, \t\t\texc_class,code exc_class,code= ,code=self code=self. =self._get_exc_class_and_code self._get_exc_class_and_code( ._get_exc_class_and_code(code_or_exception _get_exc_class_and_code(code_or_exception) (code_or_exception)\t code_or_exception)\t\t )\t\texcept \t\texceptKeyError \texceptKeyError: exceptKeyError:\t KeyError:\t\t\t\t :\t\t\t\traise \t\t\t\traiseKeyError \t\t\traiseKeyError( raiseKeyError(\"'{0}' is not a recognized HTTP error code. Use a subclass of\" KeyError(\"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\" (\"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\". \"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\".format \" HTTPException with that code instead.\".format( .format(code_or_exception format(code_or_exception) (code_or_exception)) code_or_exception))\t ))\t\t )\t\thandlers \t\thandlers= \thandlers=self handlers=self. =self.error_handler_spec self.error_handler_spec. .error_handler_spec.setdefault error_handler_spec.setdefault( .setdefault(key setdefault(key, (key,{ key,{} ,{}) {}). }).setdefault ).setdefault( .setdefault(code setdefault(code, (code,{ code,{} ,{}) {})\t })\thandlers )\thandlers[ \thandlers[exc_class handlers[exc_class] [exc_class]= exc_class]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_filter \tdeftemplate_filter( deftemplate_filter(self template_filter(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_filter self.add_template_filter( .add_template_filter(f add_template_filter(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_filter \tdefadd_template_filter( defadd_template_filter(self add_template_filter(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.filters jinja_env.filters[ .filters[name filters[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_test \tdeftemplate_test( deftemplate_test(self template_test(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_test self.add_template_test( .add_template_test(f add_template_test(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_test \tdefadd_template_test( defadd_template_test(self add_template_test(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.tests jinja_env.tests[ .tests[name tests[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_global \tdeftemplate_global( deftemplate_global(self template_global(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_global self.add_template_global( .add_template_global(f add_template_global(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_global \tdefadd_template_global( defadd_template_global(self add_template_global(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.globals jinja_env.globals[ .globals[name globals[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefbefore_request \tdefbefore_request( defbefore_request(self before_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\" \t\t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\t \t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\tself \"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\tself. \tself.before_request_funcs self.before_request_funcs. .before_request_funcs.setdefault before_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefbefore_first_request \tdefbefore_first_request( defbefore_first_request(self before_first_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself. \tself.before_first_request_funcs self.before_first_request_funcs. .before_first_request_funcs.append before_first_request_funcs.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefafter_request \tdefafter_request( defafter_request(self after_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\" \t\t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\t \t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\tself \"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\tself. \tself.after_request_funcs self.after_request_funcs. .after_request_funcs.setdefault after_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefteardown_request \tdefteardown_request( defteardown_request(self teardown_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\" \t\t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\t \t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\tself \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\tself. \tself.teardown_request_funcs self.teardown_request_funcs. .teardown_request_funcs.setdefault teardown_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefteardown_appcontext \tdefteardown_appcontext( defteardown_appcontext(self teardown_appcontext(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\tself \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\tself. \tself.teardown_appcontext_funcs self.teardown_appcontext_funcs. .teardown_appcontext_funcs.append teardown_appcontext_funcs.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefcontext_processor \tdefcontext_processor( defcontext_processor(self context_processor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a template context processor function.\"\"\" \t\t\t\"\"\"Registers a template context processor function.\"\"\"\t \t\t\"\"\"Registers a template context processor function.\"\"\"\tself \"\"\"Registers a template context processor function.\"\"\"\tself. \tself.template_context_processors self.template_context_processors[ .template_context_processors[None template_context_processors[None] [None]. None].append ].append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefshell_context_processor \tdefshell_context_processor( defshell_context_processor(self shell_context_processor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\tself \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\tself. \tself.shell_context_processors self.shell_context_processors. .shell_context_processors.append shell_context_processors.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefurl_value_preprocessor \tdefurl_value_preprocessor( defurl_value_preprocessor(self url_value_preprocessor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\" \t\t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\t \t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\tself \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\tself. \tself.url_value_preprocessors self.url_value_preprocessors. .url_value_preprocessors.setdefault url_value_preprocessors.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefurl_defaults \tdefurl_defaults( defurl_defaults(self url_defaults(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\" \t\t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\t \t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\tself \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\tself. \tself.url_default_functions self.url_default_functions. .url_default_functions.setdefault url_default_functions.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\tdef \t\tdef_find_error_handler \tdef_find_error_handler( def_find_error_handler(self _find_error_handler(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\" \t\t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\t \t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\texc_class \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\texc_class, \texc_class,code exc_class,code= ,code=self code=self. =self._get_exc_class_and_code self._get_exc_class_and_code( ._get_exc_class_and_code(type _get_exc_class_and_code(type( (type(e type(e) (e)) e))\t ))\tfor )\tforname \tforname, forname,c name,cin ,cin( cin(( in((request ((request. (request.blueprint request.blueprint, .blueprint,code blueprint,code) ,code), code),( ),(None ,(None, (None,code None,code) ,code), code),( ),(request ,(request. (request.blueprint request.blueprint, .blueprint,None blueprint,None) ,None), None),( ),(None ,(None, (None,None None,None) ,None), None),) ),): ,):\t ):\t\t\t\t :\t\t\t\thandler_map \t\t\t\thandler_map= \t\t\thandler_map=self handler_map=self. =self.error_handler_spec self.error_handler_spec. .error_handler_spec.setdefault error_handler_spec.setdefault( .setdefault(name setdefault(name, (name,{ name,{} ,{}) {}). }).get ).get( .get(c get(c) (c)\t c)\tif )\tifnot \tifnothandler_map ifnothandler_map: nothandler_map:\t handler_map:\t\t\t\t\t :\t\t\t\t\tcontinue \t\t\t\t\tcontinue\t \t\t\t\tcontinue\t\t continue\t\tfor \t\tforcls \tforclsin forclsinexc_class clsinexc_class. inexc_class.__mro__ exc_class.__mro__: .__mro__:\t __mro__:\t\t\t\t\t :\t\t\t\t\thandler \t\t\t\t\thandler= \t\t\t\thandler=handler_map handler=handler_map. =handler_map.get handler_map.get( .get(cls get(cls) (cls)\t cls)\tif )\tifhandler \tifhandleris ifhandlerisnot handlerisnotNone isnotNone: notNone:\t None:\t\t\t\t\t\t :\t\t\t\t\t\treturn \t\t\t\t\t\treturnhandler \t\t\t\t\treturnhandler\t returnhandler\t\t handler\t\t\t \t\t\t\t \t\t\t\t \t\t\tdef \t\tdefhandle_http_exception \tdefhandle_http_exception( defhandle_http_exception(self handle_http_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\tif \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\tife \tife. ife.code e.codeis .codeisNone codeisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\tif \t\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,RoutingException e,RoutingException) ,RoutingException): RoutingException):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\thandler \t\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(e _find_error_handler(e) (e)\t e)\tif )\tifhandler \tifhandleris ifhandlerisNone handlerisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\treturn \t\treturnhandler \treturnhandler( returnhandler(e handler(e) (e)\t e)\t\t )\t\tdef \t\tdeftrap_http_exception \tdeftrap_http_exception( deftrap_http_exception(self trap_http_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\tif \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\tifself \tifself. ifself.config self.config[ .config[\"TRAP_HTTP_EXCEPTIONS\" config[\"TRAP_HTTP_EXCEPTIONS\"] [\"TRAP_HTTP_EXCEPTIONS\"]: \"TRAP_HTTP_EXCEPTIONS\"]:\t ]:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\ttrap_bad_request \t\ttrap_bad_request= \ttrap_bad_request=self trap_bad_request=self. =self.config self.config[ .config[\"TRAP_BAD_REQUEST_ERRORS\" config[\"TRAP_BAD_REQUEST_ERRORS\"] [\"TRAP_BAD_REQUEST_ERRORS\"]\t \"TRAP_BAD_REQUEST_ERRORS\"]\tif ]\tif( \tif(trap_bad_request if(trap_bad_requestis (trap_bad_requestisNone trap_bad_requestisNoneand isNoneandself Noneandself. andself.debug self.debugand .debugandisinstance debugandisinstance( andisinstance(e isinstance(e, (e,BadRequestKeyError e,BadRequestKeyError) ,BadRequestKeyError)) BadRequestKeyError)): )):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\tif \t\tiftrap_bad_request \tiftrap_bad_request: iftrap_bad_request:\t trap_bad_request:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnisinstance \t\t\treturnisinstance( returnisinstance(e isinstance(e, (e,BadRequest e,BadRequest) ,BadRequest)\t BadRequest)\t\t )\t\treturn \t\treturnFalse \treturnFalse\t returnFalse\t\t False\t\tdef \t\tdefhandle_user_exception \tdefhandle_user_exception( defhandle_user_exception(self handle_user_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\texc_type \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tassert )\tassertexc_value \tassertexc_valueis assertexc_valueise exc_valueise\t ise\tif e\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,BadRequestKeyError e,BadRequestKeyError) ,BadRequestKeyError): BadRequestKeyError):\t ):\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself.debug self.debugor .debugorself debugorself. orself.config self.config[ .config[\"TRAP_BAD_REQUEST_ERRORS\" config[\"TRAP_BAD_REQUEST_ERRORS\"] [\"TRAP_BAD_REQUEST_ERRORS\"]: \"TRAP_BAD_REQUEST_ERRORS\"]:\t ]:\t\t\t\t\t :\t\t\t\t\te \t\t\t\t\te. \t\t\t\te.show_exception e.show_exception= .show_exception=True show_exception=True\t =True\tif True\tife \tife. ife.args e.args[ .args[0 args[0] [0]not 0]notin ]notine notine. ine.get_description e.get_description( .get_description() get_description(): ():\t ):\t\t\t\t\t\t :\t\t\t\t\t\te \t\t\t\t\t\te. \t\t\t\t\te.description e.description= .description=\"KeyError: '{}'\" description=\"KeyError: '{}'\". =\"KeyError: '{}'\".format \"KeyError: '{}'\".format( .format(* format(*e (*e. *e.args e.args) .args)\t args)\t\t )\t\t\t \t\t\telif \t\telifnot \telifnothasattr elifnothasattr( nothasattr(BadRequestKeyError hasattr(BadRequestKeyError, (BadRequestKeyError,\"show_exception\" BadRequestKeyError,\"show_exception\") ,\"show_exception\"): \"show_exception\"):\t ):\t\t\t\t\t :\t\t\t\t\te \t\t\t\t\te. \t\t\t\te.args e.args= .args=( args=() =()\t ()\t\t )\t\t\t \t\t\tif \t\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,HTTPException e,HTTPException) ,HTTPException)and HTTPException)andnot )andnotself andnotself. notself.trap_http_exception self.trap_http_exception( .trap_http_exception(e trap_http_exception(e) (e): e):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.handle_http_exception self.handle_http_exception( .handle_http_exception(e handle_http_exception(e) (e)\t e)\t\t )\t\thandler \t\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(e _find_error_handler(e) (e)\t e)\tif )\tifhandler \tifhandleris ifhandlerisNone handlerisNone: isNone:\t None:\t\t\t\t :\t\t\t\treraise \t\t\t\treraise( \t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\treturn \t\treturnhandler \treturnhandler( returnhandler(e handler(e) (e)\t e)\t\t )\t\tdef \t\tdefhandle_exception \tdefhandle_exception( defhandle_exception(self handle_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\texc_type \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tgot_request_exception )\tgot_request_exception. \tgot_request_exception.send got_request_exception.send( .send(self send(self, (self,exception self,exception= ,exception=e exception=e) =e)\t e)\tif )\tifself \tifself. ifself.propagate_exceptions self.propagate_exceptions: .propagate_exceptions:\t propagate_exceptions:\t\t\t\t :\t\t\t\tif \t\t\t\tifexc_value \t\t\tifexc_valueis ifexc_valueise exc_valueise: ise:\t e:\t\t\t\t\t :\t\t\t\t\treraise \t\t\t\t\treraise( \t\t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traisee \t\t\t\traisee\t raisee\t\t e\t\t\t \t\t\tself \t\tself. \tself.log_exception self.log_exception( .log_exception(( log_exception((exc_type ((exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)) tb))\t ))\tserver_error )\tserver_error= \tserver_error=InternalServerError server_error=InternalServerError( =InternalServerError() InternalServerError()\t ()\tserver_error )\tserver_error. \tserver_error.original_exception server_error.original_exception= .original_exception=e original_exception=e\t =e\thandler e\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(server_error _find_error_handler(server_error) (server_error)\t server_error)\tif )\tifhandler \tifhandleris ifhandlerisnot handlerisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tserver_error \t\t\t\tserver_error= \t\t\tserver_error=handler server_error=handler( =handler(server_error handler(server_error) (server_error)\t server_error)\t\t )\t\treturn \t\treturnself \treturnself. returnself.finalize_request self.finalize_request( .finalize_request(server_error finalize_request(server_error, (server_error,from_error_handler server_error,from_error_handler= ,from_error_handler=True from_error_handler=True) =True)\t True)\t\t )\t\tdef \t\tdeflog_exception \tdeflog_exception( deflog_exception(self log_exception(self, (self,exc_info self,exc_info) ,exc_info): exc_info):\t ):\t\t\t :\t\t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself. \tself.logger self.logger. .logger.error logger.error( .error(\"Exception on %s [%s]\" error(\"Exception on %s [%s]\"% (\"Exception on %s [%s]\"%( \"Exception on %s [%s]\"%(request %(request. (request.path request.path, .path,request path,request. ,request.method request.method) .method), method),exc_info ),exc_info= ,exc_info=exc_info exc_info=exc_info) =exc_info)\t exc_info)\t\t )\t\tdef \t\tdefraise_routing_exception \tdefraise_routing_exception( defraise_routing_exception(self raise_routing_exception(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\tif \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\tif( \tif(not if(notself (notself. notself.debug self.debugor .debugornot debugornotisinstance ornotisinstance( notisinstance(request isinstance(request. (request.routing_exception request.routing_exception, .routing_exception,RequestRedirect routing_exception,RequestRedirect) ,RequestRedirect)or RequestRedirect)orrequest )orrequest. orrequest.method request.methodin .methodin( methodin(\"GET\" in(\"GET\", (\"GET\",\"HEAD\" \"GET\",\"HEAD\", ,\"HEAD\",\"OPTIONS\" \"HEAD\",\"OPTIONS\") ,\"OPTIONS\")) \"OPTIONS\")): )):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiserequest \t\t\traiserequest. raiserequest.routing_exception request.routing_exception\t .routing_exception\t\t routing_exception\t\tfrom \t\tfrom. \tfrom.debughelpers from.debughelpersimport .debughelpersimportFormDataRoutingRedirect debughelpersimportFormDataRoutingRedirect\t importFormDataRoutingRedirect\traise FormDataRoutingRedirect\traiseFormDataRoutingRedirect \traiseFormDataRoutingRedirect( raiseFormDataRoutingRedirect(request FormDataRoutingRedirect(request) (request)\t request)\t\t )\t\tdef \t\tdefdispatch_request \tdefdispatch_request( defdispatch_request(self dispatch_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\" \t\t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\t \t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\treq \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\treq= \treq=_request_ctx_stack req=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request\t .request\tif request\tifreq \tifreq. ifreq.routing_exception req.routing_exceptionis .routing_exceptionisnot routing_exceptionisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.raise_routing_exception self.raise_routing_exception( .raise_routing_exception(req raise_routing_exception(req) (req)\t req)\t\t )\t\trule \t\trule= \trule=req rule=req. =req.url_rule req.url_rule\t .url_rule\tif url_rule\tif( \tif(getattr if(getattr( (getattr(rule getattr(rule, (rule,\"provide_automatic_options\" rule,\"provide_automatic_options\", ,\"provide_automatic_options\",False \"provide_automatic_options\",False) ,False)and False)andreq )andreq. andreq.method req.method== .method==\"OPTIONS\" method==\"OPTIONS\") ==\"OPTIONS\"): \"OPTIONS\"):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.make_default_options_response self.make_default_options_response( .make_default_options_response() make_default_options_response()\t ()\t\t )\t\treturn \t\treturnself \treturnself. returnself.view_functions self.view_functions[ .view_functions[rule view_functions[rule. [rule.endpoint rule.endpoint] .endpoint]( endpoint](** ](**req (**req. **req.view_args req.view_args) .view_args)\t view_args)\t\t )\t\tdef \t\tdeffull_dispatch_request \tdeffull_dispatch_request( deffull_dispatch_request(self full_dispatch_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself. \tself.try_trigger_before_first_request_functions self.try_trigger_before_first_request_functions( .try_trigger_before_first_request_functions() try_trigger_before_first_request_functions()\t ()\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\trequest_started \t\t\t\trequest_started. \t\t\trequest_started.send request_started.send( .send(self send(self) (self)\t self)\trv )\trv= \trv=self rv=self. =self.preprocess_request self.preprocess_request( .preprocess_request() preprocess_request()\t ()\tif )\tifrv \tifrvis ifrvisNone rvisNone: isNone:\t None:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=self rv=self. =self.dispatch_request self.dispatch_request( .dispatch_request() dispatch_request()\t ()\t\t )\t\t\t \t\t\texcept \t\texceptException \texceptExceptionas exceptExceptionase Exceptionase: ase:\t e:\t\t\t\t :\t\t\t\trv \t\t\t\trv= \t\t\trv=self rv=self. =self.handle_user_exception self.handle_user_exception( .handle_user_exception(e handle_user_exception(e) (e)\t e)\t\t )\t\treturn \t\treturnself \treturnself. returnself.finalize_request self.finalize_request( .finalize_request(rv finalize_request(rv) (rv)\t rv)\t\t )\t\tdef \t\tdeffinalize_request \tdeffinalize_request( deffinalize_request(self finalize_request(self, (self,rv self,rv, ,rv,from_error_handler rv,from_error_handler= ,from_error_handler=False from_error_handler=False) =False): False):\t ):\t\t\t :\t\t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\tresponse \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\tresponse= \tresponse=self response=self. =self.make_response self.make_response( .make_response(rv make_response(rv) (rv)\t rv)\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\tresponse \t\t\t\tresponse= \t\t\tresponse=self response=self. =self.process_response self.process_response( .process_response(response process_response(response) (response)\t response)\trequest_finished )\trequest_finished. \trequest_finished.send request_finished.send( .send(self send(self, (self,response self,response= ,response=response response=response) =response)\t response)\t\t )\t\texcept \t\texceptException \texceptException: exceptException:\t Exception:\t\t\t\t :\t\t\t\tif \t\t\t\tifnot \t\t\tifnotfrom_error_handler ifnotfrom_error_handler: notfrom_error_handler:\t from_error_handler:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traise\t \t\t\t\traise\t\t raise\t\tself \t\tself. \tself.logger self.logger. .logger.exception logger.exception( .exception(\"Request finalizing failed with an error while handling an error\" exception(\"Request finalizing failed with an error while handling an error\") (\"Request finalizing failed with an error while handling an error\")\t \"Request finalizing failed with an error while handling an error\")\t\t )\t\treturn \t\treturnresponse \treturnresponse\t returnresponse\t\t response\t\tdef \t\tdeftry_trigger_before_first_request_functions \tdeftry_trigger_before_first_request_functions( deftry_trigger_before_first_request_functions(self try_trigger_before_first_request_functions(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\tif \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\tifself \tifself. ifself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t :\t\t\t\treturn \t\t\t\treturn\t \t\t\treturn\t\t return\t\twith \t\twithself \twithself. withself._before_request_lock self._before_request_lock: ._before_request_lock:\t _before_request_lock:\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturn\t \t\t\t\treturn\t\t return\t\tfor \t\tforfunc \tforfuncin forfuncinself funcinself. inself.before_first_request_funcs self.before_first_request_funcs: .before_first_request_funcs:\t before_first_request_funcs:\t\t\t\t\t :\t\t\t\t\tfunc \t\t\t\t\tfunc( \t\t\t\tfunc() func()\t ()\t\t )\t\tself \t\tself. \tself._got_first_request self._got_first_request= ._got_first_request=True _got_first_request=True\t =True\t\t True\t\t\t \t\t\tdef \t\tdefmake_default_options_response \tdefmake_default_options_response( defmake_default_options_response(self make_default_options_response(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\tadapter \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\tadapter= \tadapter=_request_ctx_stack adapter=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.url_adapter top.url_adapter\t .url_adapter\tmethods url_adapter\tmethods= \tmethods=adapter methods=adapter. =adapter.allowed_methods adapter.allowed_methods( .allowed_methods() allowed_methods()\t ()\trv )\trv= \trv=self rv=self. =self.response_class self.response_class( .response_class() response_class()\t ()\trv )\trv. \trv.allow rv.allow. .allow.update allow.update( .update(methods update(methods) (methods)\t methods)\treturn )\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefshould_ignore_error \tdefshould_ignore_error( defshould_ignore_error(self should_ignore_error(self, (self,error self,error) ,error): error):\t ):\t\t\t :\t\t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\" \t\t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\t \t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\treturn \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\treturnFalse \treturnFalse\t returnFalse\t\t False\t\tdef \t\tdefmake_response \tdefmake_response( defmake_response(self make_response(self, (self,rv self,rv) ,rv): rv):\t ):\t\t\t :\t\t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\" \t\t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\t \t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\tstatus \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\tstatus= \tstatus=headers status=headers= =headers=None headers=None\t =None\tif None\tifisinstance \tifisinstance( ifisinstance(rv isinstance(rv, (rv,tuple rv,tuple) ,tuple): tuple):\t ):\t\t\t\t :\t\t\t\tlen_rv \t\t\t\tlen_rv= \t\t\tlen_rv=len len_rv=len( =len(rv len(rv) (rv)\t rv)\tif )\tiflen_rv \tiflen_rv== iflen_rv==3 len_rv==3: ==3:\t 3:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv, \t\t\t\trv,status rv,status, ,status,headers status,headers= ,headers=rv headers=rv\t =rv\t\t rv\t\telif \t\teliflen_rv \teliflen_rv== eliflen_rv==2 len_rv==2: ==2:\t 2:\t\t\t\t\t :\t\t\t\t\tif \t\t\t\t\tifisinstance \t\t\t\tifisinstance( ifisinstance(rv isinstance(rv[ (rv[1 rv[1] [1], 1],( ],(Headers ,(Headers, (Headers,dict Headers,dict, ,dict,tuple dict,tuple, ,tuple,list tuple,list) ,list)) list)): )):\t ):\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv, \t\t\t\t\trv,headers rv,headers= ,headers=rv headers=rv\t =rv\t\t rv\t\telse \t\telse: \telse:\t else:\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv, \t\t\t\t\trv,status rv,status= ,status=rv status=rv\t =rv\t\t rv\t\t\t \t\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseTypeError \t\t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid response tuple.\" TypeError(\"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\" (\"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\" \"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\") \" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\")\t \" (body, status), or (body, headers).\")\t\t )\t\t\t \t\t\tif \t\tifrv \tifrvis ifrvisNone rvisNone: isNone:\t None:\t\t\t\t :\t\t\t\traise \t\t\t\traiseTypeError \t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid response. The\" TypeError(\"The view function did not return a valid response. The\"\" function either returned None or ended without a return\" (\"The view function did not return a valid response. The\"\" function either returned None or ended without a return\"\" statement.\" \"The view function did not return a valid response. The\"\" function either returned None or ended without a return\"\" statement.\") \" function either returned None or ended without a return\"\" statement.\")\t \" statement.\")\t\t )\t\tif \t\tifnot \tifnotisinstance ifnotisinstance( notisinstance(rv isinstance(rv, (rv,self rv,self. ,self.response_class self.response_class) .response_class): response_class):\t ):\t\t\t\t :\t\t\t\tif \t\t\t\tifisinstance \t\t\tifisinstance( ifisinstance(rv isinstance(rv, (rv,( rv,(text_type ,(text_type, (text_type,bytes text_type,bytes, ,bytes,bytearray bytes,bytearray) ,bytearray)) bytearray)): )):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=self rv=self. =self.response_class self.response_class( .response_class(rv response_class(rv, (rv,status rv,status= ,status=status status=status, =status,headers status,headers= ,headers=headers headers=headers) =headers)\t headers)\tstatus )\tstatus= \tstatus=headers status=headers= =headers=None headers=None\t =None\t\t None\t\telif \t\telifisinstance \telifisinstance( elifisinstance(rv isinstance(rv, (rv,dict rv,dict) ,dict): dict):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=jsonify rv=jsonify( =jsonify(rv jsonify(rv) (rv)\t rv)\t\t )\t\telif \t\telifisinstance \telifisinstance( elifisinstance(rv isinstance(rv, (rv,BaseResponse rv,BaseResponse) ,BaseResponse)or BaseResponse)orcallable )orcallable( orcallable(rv callable(rv) (rv): rv):\t ):\t\t\t\t\t :\t\t\t\t\ttry \t\t\t\t\ttry: \t\t\t\ttry:\t try:\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv= \t\t\t\t\trv=self rv=self. =self.response_class self.response_class. .response_class.force_type response_class.force_type( .force_type(rv force_type(rv, (rv,request rv,request. ,request.environ request.environ) .environ)\t environ)\t\t )\t\texcept \t\texceptTypeError \texceptTypeErroras exceptTypeErrorase TypeErrorase: ase:\t e:\t\t\t\t\t\t :\t\t\t\t\t\tnew_error \t\t\t\t\t\tnew_error= \t\t\t\t\tnew_error=TypeError new_error=TypeError( =TypeError(\"{e}\\nThe view function did not return a valid\" TypeError(\"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\" (\"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\" \"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\" \" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\". \" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\".format \" {rv.__class__.__name__}.\".format( .format(e format(e= (e=e e=e, =e,rv e,rv= ,rv=rv rv=rv) =rv)) rv))\t ))\treraise )\treraise( \treraise(TypeError reraise(TypeError, (TypeError,new_error TypeError,new_error, ,new_error,sys new_error,sys. ,sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[2 )[2] [2]) 2])\t ])\t\t )\t\t\t \t\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseTypeError \t\t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid\" TypeError(\"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\" (\"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\" \"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\" \" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\". \" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\".format \" {rv.__class__.__name__}.\".format( .format(rv format(rv= (rv=rv rv=rv) =rv)) rv))\t ))\t\t )\t\t\t \t\t\tif \t\tifstatus \tifstatusis ifstatusisnot statusisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tif \t\t\t\tifisinstance \t\t\tifisinstance( ifisinstance(status isinstance(status, (status,( status,(text_type ,(text_type, (text_type,bytes text_type,bytes, ,bytes,bytearray bytes,bytearray) ,bytearray)) bytearray)): )):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv. \t\t\t\trv.status rv.status= .status=status status=status\t =status\t\t status\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv. \t\t\t\trv.status_code rv.status_code= .status_code=status status_code=status\t =status\t\t status\t\t\t \t\t\tif \t\tifheaders \tifheaders: ifheaders:\t headers:\t\t\t\t :\t\t\t\trv \t\t\t\trv. \t\t\trv.headers rv.headers. .headers.extend headers.extend( .extend(headers extend(headers) (headers)\t headers)\t\t )\t\treturn \t\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefcreate_url_adapter \tdefcreate_url_adapter( defcreate_url_adapter(self create_url_adapter(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\" \t\t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\t \t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\tif \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\tifrequest \tifrequestis ifrequestisnot requestisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tsubdomain \t\t\t\tsubdomain= \t\t\tsubdomain=( subdomain=(( =((self ((self. (self.url_map self.url_map. .url_map.default_subdomain url_map.default_subdomainor .default_subdomainorNone default_subdomainorNone) orNone)if None)ifnot )ifnotself ifnotself. notself.subdomain_matching self.subdomain_matchingelse .subdomain_matchingelseNone subdomain_matchingelseNone) elseNone)\t None)\treturn )\treturnself \treturnself. returnself.url_map self.url_map. .url_map.bind_to_environ url_map.bind_to_environ( .bind_to_environ(request bind_to_environ(request. (request.environ request.environ, .environ,server_name environ,server_name= ,server_name=self server_name=self. =self.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"], \"SERVER_NAME\"],subdomain ],subdomain= ,subdomain=subdomain subdomain=subdomain, =subdomain,) subdomain,)\t ,)\t\t )\t\tif \t\tifself \tifself. ifself.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"]is \"SERVER_NAME\"]isnot ]isnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.url_map self.url_map. .url_map.bind url_map.bind( .bind(self bind(self. (self.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"], \"SERVER_NAME\"],script_name ],script_name= ,script_name=self script_name=self. =self.config self.config[ .config[\"APPLICATION_ROOT\" config[\"APPLICATION_ROOT\"] [\"APPLICATION_ROOT\"], \"APPLICATION_ROOT\"],url_scheme ],url_scheme= ,url_scheme=self url_scheme=self. =self.config self.config[ .config[\"PREFERRED_URL_SCHEME\" config[\"PREFERRED_URL_SCHEME\"] [\"PREFERRED_URL_SCHEME\"], \"PREFERRED_URL_SCHEME\"],) ],)\t ,)\t\t )\t\t\t \t\t\tdef \t\tdefinject_url_defaults \tdefinject_url_defaults( definject_url_defaults(self inject_url_defaults(self, (self,endpoint self,endpoint, ,endpoint,values endpoint,values) ,values): values):\t ):\t\t\t :\t\t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfuncs \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfuncs= \tfuncs=self funcs=self. =self.url_default_functions self.url_default_functions. .url_default_functions.get url_default_functions.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tif\".\" \tif\".\"in if\".\"inendpoint \".\"inendpoint: inendpoint:\t endpoint:\t\t\t\t :\t\t\t\tbp \t\t\t\tbp= \t\t\tbp=endpoint bp=endpoint. =endpoint.rsplit endpoint.rsplit( .rsplit(\".\" rsplit(\".\", (\".\",1 \".\",1) ,1)[ 1)[0 )[0] [0]\t 0]\tfuncs ]\tfuncs= \tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.url_default_functions self.url_default_functions. .url_default_functions.get url_default_functions.get( .get(bp get(bp, (bp,( bp,() ,()) ())) )))\t ))\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(endpoint func(endpoint, (endpoint,values endpoint,values) ,values)\t values)\t\t )\t\t\t \t\t\tdef \t\tdefhandle_url_build_error \tdefhandle_url_build_error( defhandle_url_build_error(self handle_url_build_error(self, (self,error self,error, ,error,endpoint error,endpoint, ,endpoint,values endpoint,values) ,values): values):\t ):\t\t\t :\t\t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\" \t\t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\t \t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\texc_type \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tfor )\tforhandler \tforhandlerin forhandlerinself handlerinself. inself.url_build_error_handlers self.url_build_error_handlers: .url_build_error_handlers:\t url_build_error_handlers:\t\t\t\t :\t\t\t\ttry \t\t\t\ttry: \t\t\ttry:\t try:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=handler rv=handler( =handler(error handler(error, (error,endpoint error,endpoint, ,endpoint,values endpoint,values) ,values)\t values)\tif )\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t\t\t :\t\t\t\t\t\treturn \t\t\t\t\t\treturnrv \t\t\t\t\treturnrv\t returnrv\t\t rv\t\t\t \t\t\texcept \t\texceptBuildError \texceptBuildErroras exceptBuildErrorase BuildErrorase: ase:\t e:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=e error=e\t =e\t\t e\t\t\t \t\t\tif \t\tiferror \tiferroris iferrorisexc_value errorisexc_value: isexc_value:\t exc_value:\t\t\t\t :\t\t\t\treraise \t\t\t\treraise( \t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\traise \t\traiseerror \traiseerror\t raiseerror\t\t error\t\tdef \t\tdefpreprocess_request \tdefpreprocess_request( defpreprocess_request(self preprocess_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\" \t\t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\t \t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\tbp \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\tbp= \tbp=_request_ctx_stack bp=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request. .request.blueprint request.blueprint\t .blueprint\tfuncs blueprint\tfuncs= \tfuncs=self funcs=self. =self.url_value_preprocessors self.url_value_preprocessors. .url_value_preprocessors.get url_value_preprocessors.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.url_value_preprocessors self.url_value_preprocessors: .url_value_preprocessors:\t url_value_preprocessors:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.url_value_preprocessors self.url_value_preprocessors[ .url_value_preprocessors[bp url_value_preprocessors[bp] [bp]) bp])\t ])\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(request func(request. (request.endpoint request.endpoint, .endpoint,request endpoint,request. ,request.view_args request.view_args) .view_args)\t view_args)\t\t )\t\tfuncs \t\tfuncs= \tfuncs=self funcs=self. =self.before_request_funcs self.before_request_funcs. .before_request_funcs.get before_request_funcs.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.before_request_funcs self.before_request_funcs: .before_request_funcs:\t before_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.before_request_funcs self.before_request_funcs[ .before_request_funcs[bp before_request_funcs[bp] [bp]) bp])\t ])\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\trv \t\t\t\trv= \t\t\trv=func rv=func( =func() func()\t ()\tif )\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturnrv \t\t\t\treturnrv\t returnrv\t\t rv\t\t\t \t\t\t\t \t\t\tdef \t\tdefprocess_response \tdefprocess_response( defprocess_response(self process_response(self, (self,response self,response) ,response): response):\t ):\t\t\t :\t\t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\" \t\t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\t \t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\tctx \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\tctx= \tctx=_request_ctx_stack ctx=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top\t .top\tbp top\tbp= \tbp=ctx bp=ctx. =ctx.request ctx.request. .request.blueprint request.blueprint\t .blueprint\tfuncs blueprint\tfuncs= \tfuncs=ctx funcs=ctx. =ctx._after_request_functions ctx._after_request_functions\t ._after_request_functions\tif _after_request_functions\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.after_request_funcs self.after_request_funcs: .after_request_funcs:\t after_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.after_request_funcs self.after_request_funcs[ .after_request_funcs[bp after_request_funcs[bp] [bp]) bp])) ]))\t ))\t\t )\t\tif \t\tifNone \tifNonein ifNoneinself Noneinself. inself.after_request_funcs self.after_request_funcs: .after_request_funcs:\t after_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.after_request_funcs self.after_request_funcs[ .after_request_funcs[None after_request_funcs[None] [None]) None])) ]))\t ))\t\t )\t\tfor \t\tforhandler \tforhandlerin forhandlerinfuncs handlerinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tresponse \t\t\t\tresponse= \t\t\tresponse=handler response=handler( =handler(response handler(response) (response)\t response)\t\t )\t\tif \t\tifnot \tifnotself ifnotself. notself.session_interface self.session_interface. .session_interface.is_null_session session_interface.is_null_session( .is_null_session(ctx is_null_session(ctx. (ctx.session ctx.session) .session): session):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.session_interface self.session_interface. .session_interface.save_session session_interface.save_session( .save_session(self save_session(self, (self,ctx self,ctx. ,ctx.session ctx.session, .session,response session,response) ,response)\t response)\t\t )\t\treturn \t\treturnresponse \treturnresponse\t returnresponse\t\t response\t\tdef \t\tdefdo_teardown_request \tdefdo_teardown_request( defdo_teardown_request(self do_teardown_request(self, (self,exc self,exc= ,exc=_sentinel exc=_sentinel) =_sentinel): _sentinel):\t ):\t\t\t :\t\t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\" \t\t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\t \t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\tif \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\tifexc \tifexcis ifexcis_sentinel excis_sentinel: is_sentinel:\t _sentinel:\t\t\t\t :\t\t\t\texc \t\t\t\texc= \t\t\texc=sys exc=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\t\t ]\t\tfuncs \t\tfuncs= \tfuncs=reversed funcs=reversed( =reversed(self reversed(self. (self.teardown_request_funcs self.teardown_request_funcs. .teardown_request_funcs.get teardown_request_funcs.get( .get(None get(None, (None,( None,() ,()) ())) )))\t ))\tbp )\tbp= \tbp=_request_ctx_stack bp=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request. .request.blueprint request.blueprint\t .blueprint\tif blueprint\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.teardown_request_funcs self.teardown_request_funcs: .teardown_request_funcs:\t teardown_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.teardown_request_funcs self.teardown_request_funcs[ .teardown_request_funcs[bp teardown_request_funcs[bp] [bp]) bp])) ]))\t ))\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(exc func(exc) (exc)\t exc)\t\t )\t\trequest_tearing_down \t\trequest_tearing_down. \trequest_tearing_down.send request_tearing_down.send( .send(self send(self, (self,exc self,exc= ,exc=exc exc=exc) =exc)\t exc)\t\t )\t\tdef \t\tdefdo_teardown_appcontext \tdefdo_teardown_appcontext( defdo_teardown_appcontext(self do_teardown_appcontext(self, (self,exc self,exc= ,exc=_sentinel exc=_sentinel) =_sentinel): _sentinel):\t ):\t\t\t :\t\t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\tif \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\tifexc \tifexcis ifexcis_sentinel excis_sentinel: is_sentinel:\t _sentinel:\t\t\t\t :\t\t\t\texc \t\t\t\texc= \t\t\texc=sys exc=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\t\t ]\t\tfor \t\tforfunc \tforfuncin forfuncinreversed funcinreversed( inreversed(self reversed(self. (self.teardown_appcontext_funcs self.teardown_appcontext_funcs) .teardown_appcontext_funcs): teardown_appcontext_funcs):\t ):\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(exc func(exc) (exc)\t exc)\t\t )\t\tappcontext_tearing_down \t\tappcontext_tearing_down. \tappcontext_tearing_down.send appcontext_tearing_down.send( .send(self send(self, (self,exc self,exc= ,exc=exc exc=exc) =exc)\t exc)\t\t )\t\tdef \t\tdefapp_context \tdefapp_context( defapp_context(self app_context(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\treturn \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\treturnAppContext \treturnAppContext( returnAppContext(self AppContext(self) (self)\t self)\t\t )\t\tdef \t\tdefrequest_context \tdefrequest_context( defrequest_context(self request_context(self, (self,environ self,environ) ,environ): environ):\t ):\t\t\t :\t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\" \t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\t \t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\treturn \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\treturnRequestContext \treturnRequestContext( returnRequestContext(self RequestContext(self, (self,environ self,environ) ,environ)\t environ)\t\t )\t\tdef \t\tdeftest_request_context \tdeftest_request_context( deftest_request_context(self test_request_context(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\" \t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\t \t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\tfrom \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\tfrom. \tfrom.testing from.testingimport .testingimportEnvironBuilder testingimportEnvironBuilder\t importEnvironBuilder\tbuilder EnvironBuilder\tbuilder= \tbuilder=EnvironBuilder builder=EnvironBuilder( =EnvironBuilder(self EnvironBuilder(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs)\t kwargs)\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.request_context self.request_context( .request_context(builder request_context(builder. (builder.get_environ builder.get_environ( .get_environ() get_environ()) ())\t ))\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tbuilder \t\t\t\tbuilder. \t\t\tbuilder.close builder.close( .close() close()\t ()\t\t )\t\t\t \t\t\tdef \t\tdefwsgi_app \tdefwsgi_app( defwsgi_app(self wsgi_app(self, (self,environ self,environ, ,environ,start_response environ,start_response) ,start_response): start_response):\t ):\t\t\t :\t\t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\" \t\t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\t \t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\tctx \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\tctx= \tctx=self ctx=self. =self.request_context self.request_context( .request_context(environ request_context(environ) (environ)\t environ)\terror )\terror= \terror=None error=None\t =None\ttry None\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\ttry \t\t\t\ttry: \t\t\ttry:\t try:\t\t\t\t\t :\t\t\t\t\tctx \t\t\t\t\tctx. \t\t\t\tctx.push ctx.push( .push() push()\t ()\tresponse )\tresponse= \tresponse=self response=self. =self.full_dispatch_request self.full_dispatch_request( .full_dispatch_request() full_dispatch_request()\t ()\t\t )\t\texcept \t\texceptException \texceptExceptionas exceptExceptionase Exceptionase: ase:\t e:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=e error=e\t =e\tresponse e\tresponse= \tresponse=self response=self. =self.handle_exception self.handle_exception( .handle_exception(e handle_exception(e) (e)\t e)\t\t )\t\texcept \t\texcept: \texcept:\t except:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=sys error=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\traise ]\traise\t \traise\t\t raise\t\treturn \t\treturnresponse \treturnresponse( returnresponse(environ response(environ, (environ,start_response environ,start_response) ,start_response)\t start_response)\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself.should_ignore_error self.should_ignore_error( .should_ignore_error(error should_ignore_error(error) (error): error):\t ):\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=None error=None\t =None\t\t None\t\tctx \t\tctx. \tctx.auto_pop ctx.auto_pop( .auto_pop(error auto_pop(error) (error)\t error)\t\t )\t\t\t \t\t\tdef \t\tdef__call__ \tdef__call__( def__call__(self __call__(self, (self,environ self,environ, ,environ,start_response environ,start_response) ,start_response): start_response):\t ):\t\t\t :\t\t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\" \t\t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\t \t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\treturn \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\treturnself \treturnself. returnself.wsgi_app self.wsgi_app( .wsgi_app(environ wsgi_app(environ, (environ,start_response environ,start_response) ,start_response)\t start_response)\t\t )\t\tdef \t\tdef__repr__ \tdef__repr__( def__repr__(self __repr__(self) (self): self):\t ):\t\t\t :\t\t\treturn \t\t\treturn\"<%s %r>\" \t\treturn\"<%s %r>\"% return\"<%s %r>\"%( \"<%s %r>\"%(self %(self. (self.__class__ self.__class__. .__class__.__name__ __class__.__name__, .__name__,self __name__,self. ,self.name self.name) .name)\n name)\n\n )\n\n\n \n\n\n< \n\n<EOF \n<EOF>","type":"boolean","boost":4.0}}},{"match":{"src":{"query":"NSNK SNKW NKWN KWNK WNKW NKWN KWNK WNKW NKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNK. NK.K K.KW .KWN KWNK WNK. NK.K K.KW .KWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNW WNWO NWOW WOW( OW() W()N ()NK )NKW NKW( KW(W W(W) (W): W):N ):NI :NIK NIKK IKKW KKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(W W(WO (WOW WOW) OW)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW): W):N ):NI :NIK NIKW IKW. KW.W W.WK .WKW WKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW( KW(S W(SS (SSS SSSS SSSS SSSS SSSS SSS) SS)N S)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S, (S,W S,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOW( OW(S W(S, (S,W S,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW. OW.W W.WN .WNW WNWO NWOW WOW. OW.W W.WN .WNW WNWO NWO{ WO{S O{S: {S:[ S:[S :[S, [S,S S,S] ,S]} S]}N ]}NW }NWO NWOW WOW( OW({ W({S ({S: {S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:W S:W( :W(W W(WO (WOV WOV) OV), V),S ),S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:W S:W( :W(W W(WO (WOV WOV) OV), V),S ),S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:V S:V, :V,} V,}) ,})N })NW )NWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOK WOKN OKNW KNWO NWOK WOKN OKNW KNWO NWOW WOW( OW() W()N ()NW )NWO NWOK WOKN OKNW KNWO NWOK WOKN OKNW KNWO NWOK WOKN OKNK KNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK, OK,W K,WO ,WOS WOS, OS,W S,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOS WOS, OS,W S,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,) K,): ,):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW) OW)N W)NW )NW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOWN OWNK WNKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()N ()ND )NDK NDKK DKKW KKW. KW.W W.W. .W.W W.W( .W(W W(W) (W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SS) SS)N S)ND )NDW NDW. DW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{K O{K: {K:[ K:[W :[W] [W]} W]}N ]}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOK WOKN OKNW KNW. NW.W W.WO .WOW WOW( OW() W()N ()NK )NKW NKW. KW.W W.W: .W:N W:NI :NIK NIK( IK(W K(W( (W(W W(W) (W)O W)OW )OW) OW), W),S ),SN ,SNW SNW. NW.W W.W( .W(W W(W. (W.W W.WO .WOS WOS, OS,W S,WO ,WOS WOS, OS,W S,WO ,WOW WOW, OW,W W,WO ,WOW WOW. OW.W W.W, .W,) W,)N ,)ND )NDW NDW. DW.W W.W. .W.W W.WO .WOW WOW. OW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WO .WOS WOS: OS:N S:NI :NIW NIWO IWOW WOW( OW(W W(W. (W.W W.W[ .W[S W[S] [S], S],S ],S, ,S,K S,K) ,K)N K)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKS IKSN KSND SNDK NDKW DKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W. .W.W W.W( .W(W W(W) (W)) W))[ ))[V )[V] [V]N V]ND ]NDK NDKW DKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW. KW.W W.WK .WKW WKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W( .W() W()N ()ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WN .WND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.WN .WND WNDW NDWO DWOW WOW( OW(W W(W. (W.W W.W) .W)N W)NW )NW[ NW[S W[S] [S]O S]OW ]OW( OW() W()N ()NW )NW[ NW[S W[S] [S]O S]OW ]OW( OW() W()N ()NK )NKW NKW. KW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,WO ,WOW WOW( OW(W W(W. (W.W W.W) .W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKW IKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S) ,S)N S)ND )NDK NDKW DKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S, ,S,W S,W. ,W.W W.WO .WOS WOS) OS)N S)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOS WOS) OS): S):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W. (W.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W) ,W), W),W ),W) ,W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKW WKWK KWKK WKKK KKKK KKKW KKW. KW.W W.WN .WND WNDO NDOW DOW. OW.W W.WN .WNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]O S]OW ]OWN OWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW( OW(W W(W. (W.W W.W) .W)N W)NK )NKS NKSK KSKK SKKW KKW: KW:N W:NI :NIW NIW[ IW[S W[S] [S]O S]OW ]OW. OW.W W.WN .WND WNDK NDKS DKSK KSKK SKKW KKW: KW:N W:NI :NIW NIW[ IW[S W[S] [S]O S]OW ]OW. OW.W W.WN .WND WNDW NDWO DWOW WOW. OW.W W.W( .W(W W(W, (W,O W,OW ,OW) OW)N W)NW )NW. NW.W W.W. .W.W W.W( .W(W W(WO (WOW WOW, OW,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW. OW.W W.W, .W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW, OW,) W,)N ,)NW )NW. NW.W W.W[ .W[S W[S] [S]O S]OW ]OW. OW.W W.WN .WNK WNKW NKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKK: KK:N K:NI :NIK NIKK IKKN KKND KNDK NDKW DKW. KW.W W.W( .W(( W((S ((S, (S,S S,S, ,S,S S,S, ,S,S S,S) ,S)) S))N ))ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[K W[K] [K]N K]NW ]NWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDD NDDW DDWO DWOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKW: KW:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWO{ WO{S O{S: {S:W S:W, :W,S W,S: ,S:W S:W} :W}N W}NK }NKW NKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDK NDKW DKWN KWND WNDW NDWO DWOW WOW( OW(S W(S) (S)N S)NO )NOW NOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W[ .W[S W[S] [S]N S]ND ]NDO NDOW DOW. OW.W W.WN .WNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]O S]OW ]OWN OWNW WNW. NW.W W.W. .W.W W.WO .WOW WOW. OW.W W.WN .WND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W. .W.W W.W( .W(S W(S) (S)O S)OS )OS: OS:N S:NI :NIK NIK. IK.W K.WK .WKW WKWN KWNW WNW( NW() W()N ()NK )NKN NKND KNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W() W()N ()NK )NKS NKSK KSKW SKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.WO .WOW WOW( OW() W()N ()NW )NW. NW.W W.WO .WOW WOW( OW() W()N ()ND )NDK NDKS DKSK KSKW SKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.WO .WOW WOW( OW() W()N ()ND )NDD NDDK DDKW DKWK KWKK WKKK KKK: KK:N K:NI :NIW NIW. IW.W W.WO .WOW WOW( OW(W W(W) (W)N W)ND )NDW NDWO DWOS WOSN OSNW SNWO NWOV WOVN OVNW VNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(S W(S) (S)N S)NW )NW, NW,W W,WO ,WOK WOK, OK,K K,KN ,KNK KNKW NKW: KW:N W:NI :NIW NIW, IW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W(S W(S) (S)N S)ND )NDW NDWO DWOW WOWK OWKW WKWK KWKW WKWN KWNW WNWO NWOW WOW( OW(W W(W( (W(( W((W ((WK (WKW WKWK KWK( WK(W K(W, (W,W W,W) ,W)K W)KW )KWK KWKK WKKK KKK) KK), K),W ),W) ,W)) W))N ))NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NW )NW. NW.W W.W( .W(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W, .W,W W,W. ,W.W W.W, .W,K W,K) ,K)N K)NK )NKW NKW. KW.W W.WK .WKW WKWN KWNK WNK: NK:N K:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W, ,W,O W,OW ,OW) OW)N W)ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.WO .WOK WOKN OKND KNDD NDDK DDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKK: KK:N K:NI :NIK NIK. IK.W K.WK .WKW WKWK KWKW WKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W. ,W.W W.W, .W,W W,WO ,WOW WOW, OW,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKK: KK:N K:NI :NIK NIK. IK.W K.WK .WKW WKWK KWKW WKWN KWND WNDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOK WOKN OKNK KNKW NKW. KW.W W.WK .WKW WKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW. KW.W W.W[ .W[W W[W. [W.W W.W] .W]K W]KW ]KW, KW,( W,(S ,(SS (SSS SSSO SSO( SO(W O(W, (W,W W,W. ,W.W W.W[ .W[W W[W. [W.W W.W] .W], W],W ],W. ,W.W W.W) .W)) W))N ))ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.W[ .W[W W[W. [W.W W.W] .W]O W]OW ]OWN OWNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NW )NWO NWOK WOKN OKND KNDW NDW. DW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W. (W.W W.W) .W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDW NDW[ DW[S W[S] [S]O S]OW ]OWN OWNW WNWO NWOW WOW. OW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,S W,S, ,S,K S,K) ,K)K K)K( )K(S K(S, (S,) S,)N ,)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SS) SS)N S)ND )NDW NDWO DWOW WOW( OW(W W(W. (W.W W.W( .W() W()K ()KW )KWK KWKW WKW) KW)N W)NW )NWO NWOW WOW( OW(W W(W( (W(W W(W, (W,S W,S, ,S,( S,() ,()) ())) )))N ))NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,S W,S, ,S,K S,K) ,K)N K)ND )NDK NDKW DKWK KWKK WKK: KK:N K:NI :NIK NIKS IKSK KSKK SKKW KKW: KW:N W:NI :NIW NIWO IWOK WOKN OKNW KNW. NW.W W.W( .W(S W(S) (S)N S)ND )NDK NDK: DK:N K:NI :NIW NIWO IWOK WOKN OKND KNDD NDDW DDWO DWOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW, OW,O W,OW ,OW) OW)N W)NW )NW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKKK KKKW KKWO KWOW WOW: OW:N W:NI :NIK NIKW IKW( KW(S W(SS (SSO SSOW SOW) OW)N W)ND )NDW NDW. DW.W W.W[ .W[W W[W] [W]O W]OW ]OWN OWND WNDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIWO IWOW WOW. OW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W, ,W,O W,OW ,OW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W[ .W[W W[W] [W]O W]OW ]OWN OWNK WNKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW[ OW[W W[W] [W]N W]ND ]NDK NDK: DK:N K:NI :NIW NIWO IWOW WOWN OWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)NK )NKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW, KW,W W,W. ,W.W W.WN .WND WNDK NDK: DK:N K:NI :NIK NIKW IKW, KW,K W,KN ,KND KNDD NDDO DDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(K W(K, (K,W K,W, ,W,W W,W) ,W)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(K W(K, (K,W K,W, ,W,W W,W) ,W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SSS SSS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDK NDK: DK:N K:NI :NIW NIW, IW,W W,WO ,WOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW: KW:N W:NI :NIK NIKW IKW( KW(S W(SS (SS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDW NDWO DWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W, (W,{ W,{} ,{}) {})N })NW )NW[ NW[W W[W] [W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W[ .W[K W[K] [K]. K].W ].W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,WO ,WOW WOW. OW.W W.W( .W(W W(W( (W(W W(W) (W)) W))N ))NK )NKW NKW, KW,W W,WK ,WK( WK(( K((W ((W. (W.W W.W, .W,W W,W) ,W), W),( ),(K ,(K, (K,W K,W) ,W), W),( ),(W ,(W. (W.W W.W, .W,K W,K) ,K), K),( ),(K ,(K, (K,K K,K) ,K), K),) ),): ,):N ):NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W) (W)N W)NK )NKK NKKW KKW: KW:N W:NI :NIK NIKN IKND KNDK NDKW DKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDD DDDD DDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WK .WKK WKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKWN KWND WNDW NDWO DWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIK NIKK IKKN KKND KNDW NDWO DWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NK( NK(W K(WK (WKK WKKK KKKW KKW. KW.W W.WK .WKW WKW( KW(W W(W, (W,W W,W) ,W)) W)): )):N ):NI :NIK NIKK IKKN KKND KNDK NDKW DKW: KW:N W:NI :NIK NIKW IKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKK DKKN KKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKWN KWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW. KW.W W.WK .WKW WKW. KW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIW NIW. IW.W W.WO .WOK WOKN OKNK KNKW NKW. KW.W W.W[ .W[V W[V] [V]K V]KK ]KKW KKW. KW.W W.W( .W() W(): ():N ):NI :NIW NIW. IW.W W.WO .WOS WOS. OS.W S.W( .W(O W(OW (OW. OW.W W.W) .W)N W)ND )NDD NDDK DDKK DKKW KKW( KW(W W(W, (W,S W,S) ,S): S):N ):NI :NIW NIW. IW.W W.WO .WO( WO() O()N ()ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W)K W)KK )KKW KKW. KW.W W.W( .W(W W(W) (W): W):N ):NI :NIK NIKW IKW. KW.W W.W( .W(W W(W) (W)N W)ND )NDW NDWO DWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKW. KW.W W.W: .W:N W:NI :NIK NIKW IKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDK: DK:N K:NI :NIK NIKW IKWN KWND WNDD NDDW DDW. DW.W W.W( .W(( W((W ((W, (W,W W,W, ,W,W W,W) ,W)) W))N ))NW )NWO NWOW WOW( OW() W()N ()NW )NW. NW.W W.WO .WOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKW DKW. KW.W W.W( .W(W W(W, (W,W W,WO ,WOK WOK) OK)N K)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(S W(SO (SO( SO(W O(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W), W),W ),WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNK( NK(K K(KW (KW. KW.W W.WK .WKK WKKW KKW( KW(W W(W. (W.W W.W, .W,W W,W) ,W)K W)KW )KW. KW.W W.WK .WK( WK(S K(S, (S,S S,S, ,S,S S,S) ,S)) S)): )):N ):NI :NIK NIKW IKW. KW.W W.WN .WND WNDK NDK. DK.W K.WK .WKW WKWN KWNK WNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNK WNKW NKW. KW.W W.WK .WKK WKKK KKK: KK:N K:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)ND )NDW NDWO DWOW WOW. OW.W W.WN .WNK WNK( NK(W K(W( (W(W W(W, (W,S W,S, ,S,K S,K) ,K)K K)KW )KW. KW.W W.WO .WOS WOS) OS): S):N ):NI :NIK NIKW IKW. KW.W W.W( .W() W()N ()ND )NDK NDKW DKW. KW.W W.W[ .W[W W[W. [W.W W.W] .W]( W](O ](OW (OW. OW.W W.W) .W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W() W()N ()NK )NK: NK:N K:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()N ()ND )NDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW. KW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NK: NK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW: KW:N W:NI :NIK NIKK IKKW KKW: KW:N W:NI :NIK NIKN IKND KNDW NDW. DW.W W.W. .W.W W.W( .W(S W(S) (S)N S)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W: .W:N W:NI :NIK NIKN IKND KNDK NDKW DKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW. KW.W W.W: .W:N W:NI :NIK NIKN IKND KNDK NDKW DKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIW( IW() W()N ()ND )NDW NDW. DW.W W.WO .WOK WOKN OKND KNDD NDDK DDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.W( .W() W()N ()NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKK NKKN KKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOWO OWOK WOKN OKNK KNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)NK )NKW NKWO KWOV WOV: OV:N V:NI :NIW NIW, IW,W W,W, ,W,W W,WO ,WOW WOWN OWND WNDK NDKW DKWO KWOV WOV: OV:N V:NI :NIK NIKW IKW( KW(W W(W[ (W[V W[V] [V], V],( ],(W ,(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW, IW,W W,WO ,WOW WOWN OWND WNDK NDK: DK:N K:NI :NIW NIW, IW,W W,WO ,WOW WOWN OWND WNDD NDDK DDK: DK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSS) SS)N S)ND )NDD NDDK DDKW DKWK KWKK WKK: KK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSS) SS)N S)ND )NDK NDKK DKKW KKW( KW(W W(W, (W,W W,W. ,W.W W.W) .W): W):N ):NI :NIK NIKW IKW( KW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOWO OWOK WOKN OKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)K W)KW )KW( KW(W W(W) (W): W):N ):NI :NIK NIK: IK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W) .W)N W)ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(WO (WOW WOW, OW,W W,WO ,WOW WOW) OW)) W))N ))NW )NW( NW(W W(W, (W,W W,W, ,W,W W,W. ,W.W W.W( .W() W()[ ()[V )[V] [V]) V])N ])ND )NDD NDDK DDK: DK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(WO (WOW WOW) OW)) W))N ))ND )NDD NDDK DDKW DKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKW( KW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW. IW.W W.WO .WOW WOWN OWND WNDK NDK: DK:N K:NI :NIW NIW. IW.W W.WO .WOW WOWN OWND WNDD NDDK DDKW DKW: KW:N W:NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWO( WO(( O((W ((W. (W.W W.W. .W.W W.WK .WKK WKK) KK)K K)KK )KKW KKW. KW.W W.WK .WKK WKK) KK)N K)NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW, OW,) W,)N ,)ND )NDK NDKW DKW. KW.W W.W[ .W[S W[S] [S]K S]KK ]KKK KKK: KK:N K:NI :NIK NIKW IKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],) ],)N ,)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKS NKSK KSKW SKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(S W(S, (S,V S,V) ,V)[ V)[V )[V] [V]N V]NW ]NWO NWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W. .W.W W.W( .W(W W(W, (W,( W,() ,()) ())) )))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W) ,W)N W)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIK NIK: IK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOWN OWND WNDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDW NDWO DWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW() W()N ()NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDD DDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNW WNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDK NDKK DKKK KKKW KKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[K W[K] [K]) K])) ]))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKK DKKW KKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W) ,W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOW WOW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDW NDWO DWOW WOW( OW(W W(W. (W.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())) )))N ))NW )NWO NWOW WOW. OW.W W.W. .W.W W.W. .W.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOW WOW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDK NDKW DKWK KWKW WKW( KW(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNK. NK.W K.WK .WKW WKWN KWNW WNWO NWOW WOW( OW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW)N W)NK )NK: NK:N K:NI :NIK NIKW IKW. KW.W W.W( .W(W W(W. (W.W W.W( .W() W()) ())N ))ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.W( .W() W()N ()ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NWO NWOK WOKN OKNK KNK: NK:N K:NI :NIK NIK: IK:N K:NI :NIW NIW. IW.W W.W( .W() W()N ()NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDK: DK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]NK ]NKN NKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDK: DK:N K:NI :NIK NIKW IKW. KW.W W.W( .W(W W(W) (W): W):N ):NI :NIW NIWO IWOK WOKN OKND KNDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIK NIKS IKSO KSO( SO(W O(W. (W.W W.W. .W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDD NDDO DDOW DOWO","type":"boolean","boost":4.0}}}]}},"sort":[{"_score":{"order":"desc"}},{"file":{"order":"desc"}}]}]]; nested: TooManyClauses[maxClauseCount is set to 20480];
Caused by: SearchParseException[failed to parse search source [{"from":0,"size":100,"query":{"bool":{"should":[{"match":{"tokenizedsrc":{"query":"\n \"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\" \n import os \n import sys \n import warnings \n from datetime import timedelta \n from functools import update_wrapper \n from itertools import chain \n from threading import Lock \n from werkzeug . datastructures import Headers \n from werkzeug . datastructures import ImmutableDict \n from werkzeug . exceptions import BadRequest \n from werkzeug . exceptions import BadRequestKeyError \n from werkzeug . exceptions import default_exceptions \n from werkzeug . exceptions import HTTPException \n from werkzeug . exceptions import InternalServerError \n from werkzeug . routing import BuildError \n from werkzeug . routing import Map \n from werkzeug . routing import RequestRedirect \n from werkzeug . routing import RoutingException \n from werkzeug . routing import Rule \n from werkzeug . wrappers import BaseResponse \n from . import cli \n from . import json \n from . _compat import integer_types \n from . _compat import reraise \n from . _compat import string_types \n from . _compat import text_type \n from . config import Config \n from . config import ConfigAttribute \n from . ctx import _AppCtxGlobals \n from . ctx import AppContext \n from . ctx import RequestContext \n from . globals import _request_ctx_stack \n from . globals import g \n from . globals import request \n from . globals import session \n from . helpers import _endpoint_from_view_func \n from . helpers import _PackageBoundObject \n from . helpers import find_package \n from . helpers import get_debug_flag \n from . helpers import get_env \n from . helpers import get_flashed_messages \n from . helpers import get_load_dotenv \n from . helpers import locked_cached_property \n from . helpers import url_for \n from . json import jsonify \n from . logging import create_logger \n from . sessions import SecureCookieSessionInterface \n from . signals import appcontext_tearing_down \n from . signals import got_request_exception \n from . signals import request_finished \n from . signals import request_started \n from . signals import request_tearing_down \n from . templating import _default_template_ctx_processor \n from . templating import DispatchingJinjaLoader \n from . templating import Environment \n from . wrappers import Request \n from . wrappers import Response \n _sentinel = object ( ) \n def _make_timedelta ( value ) : \t \t if not isinstance ( value , timedelta ) : \t \t\t return timedelta ( seconds = value ) \t \t return value \n \n def setupmethod ( f ) : \t \t \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\" \t def wrapper_func ( self , * args , ** kwargs ) : \t \t\t if self . debug and self . _got_first_request : \t \t\t\t raise AssertionError ( \"A setup function was called after the \" \"first request was handled.  This usually indicates a bug \" \"in the application where a module was not imported \" \"and decorators or other functionality was called too late.\\n\" \"To fix this make sure to import all your view modules, \" \"database models and everything related at a central place \" \"before the application starts serving requests.\" ) \t \t return f ( self , * args , ** kwargs ) \t \t return update_wrapper ( wrapper_func , f ) \n \n class Flask ( _PackageBoundObject ) : \t \t \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\" \t request_class = Request \t response_class = Response \t jinja_environment = Environment \t app_ctx_globals_class = _AppCtxGlobals \t config_class = Config \t testing = ConfigAttribute ( \"TESTING\" ) \t secret_key = ConfigAttribute ( \"SECRET_KEY\" ) \t session_cookie_name = ConfigAttribute ( \"SESSION_COOKIE_NAME\" ) \t permanent_session_lifetime = ConfigAttribute ( \"PERMANENT_SESSION_LIFETIME\" , get_converter = _make_timedelta ) \t send_file_max_age_default = ConfigAttribute ( \"SEND_FILE_MAX_AGE_DEFAULT\" , get_converter = _make_timedelta ) \t use_x_sendfile = ConfigAttribute ( \"USE_X_SENDFILE\" ) \t json_encoder = json . JSONEncoder \t json_decoder = json . JSONDecoder \t jinja_options = { \"extensions\" : [ \"jinja2.ext.autoescape\" , \"jinja2.ext.with_\" ] } \t default_config = ImmutableDict ( { \"ENV\" : None , \"DEBUG\" : None , \"TESTING\" : False , \"PROPAGATE_EXCEPTIONS\" : None , \"PRESERVE_CONTEXT_ON_EXCEPTION\" : None , \"SECRET_KEY\" : None , \"PERMANENT_SESSION_LIFETIME\" : timedelta ( days = 31 ) , \"USE_X_SENDFILE\" : False , \"SERVER_NAME\" : None , \"APPLICATION_ROOT\" : \"/\" , \"SESSION_COOKIE_NAME\" : \"session\" , \"SESSION_COOKIE_DOMAIN\" : None , \"SESSION_COOKIE_PATH\" : None , \"SESSION_COOKIE_HTTPONLY\" : True , \"SESSION_COOKIE_SECURE\" : False , \"SESSION_COOKIE_SAMESITE\" : None , \"SESSION_REFRESH_EACH_REQUEST\" : True , \"MAX_CONTENT_LENGTH\" : None , \"SEND_FILE_MAX_AGE_DEFAULT\" : timedelta ( hours = 12 ) , \"TRAP_BAD_REQUEST_ERRORS\" : None , \"TRAP_HTTP_EXCEPTIONS\" : False , \"EXPLAIN_TEMPLATE_LOADING\" : False , \"PREFERRED_URL_SCHEME\" : \"http\" , \"JSON_AS_ASCII\" : True , \"JSON_SORT_KEYS\" : True , \"JSONIFY_PRETTYPRINT_REGULAR\" : False , \"JSONIFY_MIMETYPE\" : \"application/json\" , \"TEMPLATES_AUTO_RELOAD\" : None , \"MAX_COOKIE_SIZE\" : 4093 , } ) \t url_rule_class = Rule \t url_map_class = Map \t test_client_class = None \t test_cli_runner_class = None \t session_interface = SecureCookieSessionInterface ( ) \t import_name = None \t template_folder = None \t root_path = None \t def __init__ ( self , import_name , static_url_path = None , static_folder = \"static\" , static_host = None , host_matching = False , subdomain_matching = False , template_folder = \"templates\" , instance_path = None , instance_relative_config = False , root_path = None , ) : \t \t\t _PackageBoundObject . __init__ ( self , import_name , template_folder = template_folder , root_path = root_path ) \t self . static_url_path = static_url_path \t self . static_folder = static_folder \t if instance_path is None : \t \t\t\t instance_path = self . auto_find_instance_path ( ) \t \t elif not os . path . isabs ( instance_path ) : \t \t\t\t raise ValueError ( \"If an instance path is provided it must be absolute.\" \" A relative path was given instead.\" ) \t \t self . instance_path = instance_path \t self . config = self . make_config ( instance_relative_config ) \t self . view_functions = { } \t self . error_handler_spec = { } \t self . url_build_error_handlers = [ ] \t self . before_request_funcs = { } \t self . before_first_request_funcs = [ ] \t self . after_request_funcs = { } \t self . teardown_request_funcs = { } \t self . teardown_appcontext_funcs = [ ] \t self . url_value_preprocessors = { } \t self . url_default_functions = { } \t self . template_context_processors = { None : [ _default_template_ctx_processor ] } \t self . shell_context_processors = [ ] \t self . blueprints = { } \t self . _blueprint_order = [ ] \t self . extensions = { } \t self . url_map = self . url_map_class ( ) \t self . url_map . host_matching = host_matching \t self . subdomain_matching = subdomain_matching \t self . _got_first_request = False \t self . _before_request_lock = Lock ( ) \t if self . has_static_folder : \t \t\t\t assert ( bool ( static_host ) == host_matching ) , \"Invalid static_host/host_matching combination\" \t self . add_url_rule ( self . static_url_path + \"/<path:filename>\" , endpoint = \"static\" , host = static_host , view_func = self . send_static_file , ) \t \t self . cli . name = self . name \t \t @ locked_cached_property \t def name ( self ) : \t \t\t \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\" \t if self . import_name == \"__main__\" : \t \t\t\t fn = getattr ( sys . modules [ \"__main__\" ] , \"__file__\" , None ) \t if fn is None : \t \t\t\t\t return \"__main__\" \t \t return os . path . splitext ( os . path . basename ( fn ) ) [ 0 ] \t \t return self . import_name \t \t @ property \t def propagate_exceptions ( self ) : \t \t\t \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t rv = self . config [ \"PROPAGATE_EXCEPTIONS\" ] \t if rv is not None : \t \t\t\t return rv \t \t return self . testing or self . debug \t \t @ property \t def preserve_context_on_exception ( self ) : \t \t\t \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t rv = self . config [ \"PRESERVE_CONTEXT_ON_EXCEPTION\" ] \t if rv is not None : \t \t\t\t return rv \t \t return self . debug \t \t @ locked_cached_property \t def logger ( self ) : \t \t\t \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\" \t return create_logger ( self ) \t \t @ locked_cached_property \t def jinja_env ( self ) : \t \t\t \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\" \t return self . create_jinja_environment ( ) \t \t @ property \t def got_first_request ( self ) : \t \t\t \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\" \t return self . _got_first_request \t \t def make_config ( self , instance_relative = False ) : \t \t\t \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\" \t root_path = self . root_path \t if instance_relative : \t \t\t\t root_path = self . instance_path \t \t defaults = dict ( self . default_config ) \t defaults [ \"ENV\" ] = get_env ( ) \t defaults [ \"DEBUG\" ] = get_debug_flag ( ) \t return self . config_class ( root_path , defaults ) \t \t def auto_find_instance_path ( self ) : \t \t\t \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\" \t prefix , package_path = find_package ( self . import_name ) \t if prefix is None : \t \t\t\t return os . path . join ( package_path , \"instance\" ) \t \t return os . path . join ( prefix , \"var\" , self . name + \"-instance\" ) \t \t def open_instance_resource ( self , resource , mode = \"rb\" ) : \t \t\t \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\" \t return open ( os . path . join ( self . instance_path , resource ) , mode ) \t \t @ property \t def templates_auto_reload ( self ) : \t \t\t \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\" \t rv = self . config [ \"TEMPLATES_AUTO_RELOAD\" ] \t return rv if rv is not None else self . debug \t \t @ templates_auto_reload . setter \t def templates_auto_reload ( self , value ) : \t \t\t self . config [ \"TEMPLATES_AUTO_RELOAD\" ] = value \t \t def create_jinja_environment ( self ) : \t \t\t \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\" \t options = dict ( self . jinja_options ) \t if \"autoescape\" not in options : \t \t\t\t options [ \"autoescape\" ] = self . select_jinja_autoescape \t \t if \"auto_reload\" not in options : \t \t\t\t options [ \"auto_reload\" ] = self . templates_auto_reload \t \t rv = self . jinja_environment ( self , ** options ) \t rv . globals . update ( url_for = url_for , get_flashed_messages = get_flashed_messages , config = self . config , request = request , session = session , g = g , ) \t rv . filters [ \"tojson\" ] = json . tojson_filter \t return rv \t \t def create_global_jinja_loader ( self ) : \t \t\t \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\" \t return DispatchingJinjaLoader ( self ) \t \t def select_jinja_autoescape ( self , filename ) : \t \t\t \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\" \t if filename is None : \t \t\t\t return True \t \t return filename . endswith ( ( \".html\" , \".htm\" , \".xml\" , \".xhtml\" ) ) \t \t def update_template_context ( self , context ) : \t \t\t \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\" \t funcs = self . template_context_processors [ None ] \t reqctx = _request_ctx_stack . top \t if reqctx is not None : \t \t\t\t bp = reqctx . request . blueprint \t if bp is not None and bp in self . template_context_processors : \t \t\t\t\t funcs = chain ( funcs , self . template_context_processors [ bp ] ) \t \t \t orig_ctx = context . copy ( ) \t for func in funcs : \t \t\t\t context . update ( func ( ) ) \t \t context . update ( orig_ctx ) \t \t def make_shell_context ( self ) : \t \t\t \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\" \t rv = { \"app\" : self , \"g\" : g } \t for processor in self . shell_context_processors : \t \t\t\t rv . update ( processor ( ) ) \t \t return rv \t \t env = ConfigAttribute ( \"ENV\" ) \t @ property \t def debug ( self ) : \t \t\t \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\" \t return self . config [ \"DEBUG\" ] \t \t @ debug . setter \t def debug ( self , value ) : \t \t\t self . config [ \"DEBUG\" ] = value \t self . jinja_env . auto_reload = self . templates_auto_reload \t \t def run ( self , host = None , port = None , debug = None , load_dotenv = True , ** options ) : \t \t\t \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\" \t if os . environ . get ( \"FLASK_RUN_FROM_CLI\" ) == \"true\" : \t \t\t\t from . debughelpers import explain_ignored_app_run \t explain_ignored_app_run ( ) \t return \t \t if get_load_dotenv ( load_dotenv ) : \t \t\t\t cli . load_dotenv ( ) \t if \"FLASK_ENV\" in os . environ : \t \t\t\t\t self . env = get_env ( ) \t self . debug = get_debug_flag ( ) \t \t elif \"FLASK_DEBUG\" in os . environ : \t \t\t\t\t self . debug = get_debug_flag ( ) \t \t \t if debug is not None : \t \t\t\t self . debug = bool ( debug ) \t \t _host = \"127.0.0.1\" \t _port = 5000 \t server_name = self . config . get ( \"SERVER_NAME\" ) \t sn_host , sn_port = None , None \t if server_name : \t \t\t\t sn_host , _ , sn_port = server_name . partition ( \":\" ) \t \t host = host or sn_host or _host \t port = int ( next ( ( p for p in ( port , sn_port ) if p is not None ) , _port ) ) \t options . setdefault ( \"use_reloader\" , self . debug ) \t options . setdefault ( \"use_debugger\" , self . debug ) \t options . setdefault ( \"threaded\" , True ) \t cli . show_server_banner ( self . env , self . debug , self . name , False ) \t from werkzeug . serving import run_simple \t try : \t \t\t\t run_simple ( host , port , self , ** options ) \t \t finally : \t \t\t\t self . _got_first_request = False \t \t \t def test_client ( self , use_cookies = True , ** kwargs ) : \t \t\t \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\" \t cls = self . test_client_class \t if cls is None : \t \t\t\t from . testing import FlaskClient as cls \t \t return cls ( self , self . response_class , use_cookies = use_cookies , ** kwargs ) \t \t def test_cli_runner ( self , ** kwargs ) : \t \t\t \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\" \t cls = self . test_cli_runner_class \t if cls is None : \t \t\t\t from . testing import FlaskCliRunner as cls \t \t return cls ( self , ** kwargs ) \t \t def open_session ( self , request ) : \t \t\t \"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"open_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.open_session\" instead.' ) ) \t return self . session_interface . open_session ( self , request ) \t \t def save_session ( self , session , response ) : \t \t\t \"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"save_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.save_session\" instead.' ) ) \t return self . session_interface . save_session ( self , session , response ) \t \t def make_null_session ( self ) : \t \t\t \"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\" \t warnings . warn ( DeprecationWarning ( '\"make_null_session\" is deprecated and will be removed in 1.1. Use' ' \"session_interface.make_null_session\" instead.' ) ) \t return self . session_interface . make_null_session ( self ) \t \t @ setupmethod \t def register_blueprint ( self , blueprint , ** options ) : \t \t\t \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\" \t first_registration = False \t if blueprint . name in self . blueprints : \t \t\t\t assert self . blueprints [ blueprint . name ] is blueprint , ( \"A name collision occurred between blueprints %r and %r. Both\" ' share the same name \"%s\". Blueprints that are created on the' \" fly need unique names.\" % ( blueprint , self . blueprints [ blueprint . name ] , blueprint . name ) ) \t \t else : \t \t\t\t self . blueprints [ blueprint . name ] = blueprint \t self . _blueprint_order . append ( blueprint ) \t first_registration = True \t \t blueprint . register ( self , options , first_registration ) \t \t def iter_blueprints ( self ) : \t \t\t \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\" \t return iter ( self . _blueprint_order ) \t \t @ setupmethod \t def add_url_rule ( self , rule , endpoint = None , view_func = None , provide_automatic_options = None , ** options ) : \t \t\t \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t if endpoint is None : \t \t\t\t endpoint = _endpoint_from_view_func ( view_func ) \t \t options [ \"endpoint\" ] = endpoint \t methods = options . pop ( \"methods\" , None ) \t if methods is None : \t \t\t\t methods = getattr ( view_func , \"methods\" , None ) or ( \"GET\" , ) \t \t if isinstance ( methods , string_types ) : \t \t\t\t raise TypeError ( \"Allowed methods have to be iterables of strings, \" 'for example: @app.route(..., methods=[\"POST\"])' ) \t \t methods = set ( item . upper ( ) for item in methods ) \t required_methods = set ( getattr ( view_func , \"required_methods\" , ( ) ) ) \t if provide_automatic_options is None : \t \t\t\t provide_automatic_options = getattr ( view_func , \"provide_automatic_options\" , None ) \t \t if provide_automatic_options is None : \t \t\t\t if \"OPTIONS\" not in methods : \t \t\t\t\t provide_automatic_options = True \t required_methods . add ( \"OPTIONS\" ) \t \t else : \t \t\t\t\t provide_automatic_options = False \t \t \t methods |= required_methods \t rule = self . url_rule_class ( rule , methods = methods , ** options ) \t rule . provide_automatic_options = provide_automatic_options \t self . url_map . add ( rule ) \t if view_func is not None : \t \t\t\t old_func = self . view_functions . get ( endpoint ) \t if old_func is not None and old_func != view_func : \t \t\t\t\t raise AssertionError ( \"View function mapping is overwriting an \" \"existing endpoint function: %s\" % endpoint ) \t \t self . view_functions [ endpoint ] = view_func \t \t \t def route ( self , rule , ** options ) : \t \t\t \"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t endpoint = options . pop ( \"endpoint\" , None ) \t self . add_url_rule ( rule , endpoint , f , ** options ) \t return f \t \t return decorator \t \t @ setupmethod \t def endpoint ( self , endpoint ) : \t \t\t \"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . view_functions [ endpoint ] = f \t return f \t \t return decorator \t \t @ staticmethod \t def _get_exc_class_and_code ( exc_class_or_code ) : \t \t\t \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\" \t if isinstance ( exc_class_or_code , integer_types ) : \t \t\t\t exc_class = default_exceptions [ exc_class_or_code ] \t \t else : \t \t\t\t exc_class = exc_class_or_code \t \t assert issubclass ( exc_class , Exception ) \t if issubclass ( exc_class , HTTPException ) : \t \t\t\t return exc_class , exc_class . code \t \t else : \t \t\t\t return exc_class , None \t \t \t @ setupmethod \t def errorhandler ( self , code_or_exception ) : \t \t\t \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . _register_error_handler ( None , code_or_exception , f ) \t return f \t \t return decorator \t \t @ setupmethod \t def register_error_handler ( self , code_or_exception , f ) : \t \t\t \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\" \t self . _register_error_handler ( None , code_or_exception , f ) \t \t @ setupmethod \t def _register_error_handler ( self , key , code_or_exception , f ) : \t \t\t \"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\" \t if isinstance ( code_or_exception , HTTPException ) : \t \t\t\t raise ValueError ( \"Tried to register a handler for an exception instance {0!r}.\" \" Handlers can only be registered for exception classes or\" \" HTTP error codes.\" . format ( code_or_exception ) ) \t \t try : \t \t\t\t exc_class , code = self . _get_exc_class_and_code ( code_or_exception ) \t \t except KeyError : \t \t\t\t raise KeyError ( \"'{0}' is not a recognized HTTP error code. Use a subclass of\" \" HTTPException with that code instead.\" . format ( code_or_exception ) ) \t \t handlers = self . error_handler_spec . setdefault ( key , { } ) . setdefault ( code , { } ) \t handlers [ exc_class ] = f \t \t @ setupmethod \t def template_filter ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_filter ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_filter ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . filters [ name or f . __name__ ] = f \t \t @ setupmethod \t def template_test ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_test ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_test ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . tests [ name or f . __name__ ] = f \t \t @ setupmethod \t def template_global ( self , name = None ) : \t \t\t \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t def decorator ( f ) : \t \t\t\t self . add_template_global ( f , name = name ) \t return f \t \t return decorator \t \t @ setupmethod \t def add_template_global ( self , f , name = None ) : \t \t\t \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t self . jinja_env . globals [ name or f . __name__ ] = f \t \t @ setupmethod \t def before_request ( self , f ) : \t \t\t \"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\" \t self . before_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def before_first_request ( self , f ) : \t \t\t \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\" \t self . before_first_request_funcs . append ( f ) \t return f \t \t @ setupmethod \t def after_request ( self , f ) : \t \t\t \"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\" \t self . after_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def teardown_request ( self , f ) : \t \t\t \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\" \t self . teardown_request_funcs . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def teardown_appcontext ( self , f ) : \t \t\t \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\" \t self . teardown_appcontext_funcs . append ( f ) \t return f \t \t @ setupmethod \t def context_processor ( self , f ) : \t \t\t \"\"\"Registers a template context processor function.\"\"\" \t self . template_context_processors [ None ] . append ( f ) \t return f \t \t @ setupmethod \t def shell_context_processor ( self , f ) : \t \t\t \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\" \t self . shell_context_processors . append ( f ) \t return f \t \t @ setupmethod \t def url_value_preprocessor ( self , f ) : \t \t\t \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\" \t self . url_value_preprocessors . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t @ setupmethod \t def url_defaults ( self , f ) : \t \t\t \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\" \t self . url_default_functions . setdefault ( None , [ ] ) . append ( f ) \t return f \t \t def _find_error_handler ( self , e ) : \t \t\t \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\" \t exc_class , code = self . _get_exc_class_and_code ( type ( e ) ) \t for name , c in ( ( request . blueprint , code ) , ( None , code ) , ( request . blueprint , None ) , ( None , None ) , ) : \t \t\t\t handler_map = self . error_handler_spec . setdefault ( name , { } ) . get ( c ) \t if not handler_map : \t \t\t\t\t continue \t \t for cls in exc_class . __mro__ : \t \t\t\t\t handler = handler_map . get ( cls ) \t if handler is not None : \t \t\t\t\t\t return handler \t \t \t \t \t def handle_http_exception ( self , e ) : \t \t\t \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\" \t if e . code is None : \t \t\t\t return e \t \t if isinstance ( e , RoutingException ) : \t \t\t\t return e \t \t handler = self . _find_error_handler ( e ) \t if handler is None : \t \t\t\t return e \t \t return handler ( e ) \t \t def trap_http_exception ( self , e ) : \t \t\t \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\" \t if self . config [ \"TRAP_HTTP_EXCEPTIONS\" ] : \t \t\t\t return True \t \t trap_bad_request = self . config [ \"TRAP_BAD_REQUEST_ERRORS\" ] \t if ( trap_bad_request is None and self . debug and isinstance ( e , BadRequestKeyError ) ) : \t \t\t\t return True \t \t if trap_bad_request : \t \t\t\t return isinstance ( e , BadRequest ) \t \t return False \t \t def handle_user_exception ( self , e ) : \t \t\t \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t assert exc_value is e \t if isinstance ( e , BadRequestKeyError ) : \t \t\t\t if self . debug or self . config [ \"TRAP_BAD_REQUEST_ERRORS\" ] : \t \t\t\t\t e . show_exception = True \t if e . args [ 0 ] not in e . get_description ( ) : \t \t\t\t\t\t e . description = \"KeyError: '{}'\" . format ( * e . args ) \t \t \t elif not hasattr ( BadRequestKeyError , \"show_exception\" ) : \t \t\t\t\t e . args = ( ) \t \t \t if isinstance ( e , HTTPException ) and not self . trap_http_exception ( e ) : \t \t\t\t return self . handle_http_exception ( e ) \t \t handler = self . _find_error_handler ( e ) \t if handler is None : \t \t\t\t reraise ( exc_type , exc_value , tb ) \t \t return handler ( e ) \t \t def handle_exception ( self , e ) : \t \t\t \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t got_request_exception . send ( self , exception = e ) \t if self . propagate_exceptions : \t \t\t\t if exc_value is e : \t \t\t\t\t reraise ( exc_type , exc_value , tb ) \t \t else : \t \t\t\t\t raise e \t \t \t self . log_exception ( ( exc_type , exc_value , tb ) ) \t server_error = InternalServerError ( ) \t server_error . original_exception = e \t handler = self . _find_error_handler ( server_error ) \t if handler is not None : \t \t\t\t server_error = handler ( server_error ) \t \t return self . finalize_request ( server_error , from_error_handler = True ) \t \t def log_exception ( self , exc_info ) : \t \t\t \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\" \t self . logger . error ( \"Exception on %s [%s]\" % ( request . path , request . method ) , exc_info = exc_info ) \t \t def raise_routing_exception ( self , request ) : \t \t\t \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\" \t if ( not self . debug or not isinstance ( request . routing_exception , RequestRedirect ) or request . method in ( \"GET\" , \"HEAD\" , \"OPTIONS\" ) ) : \t \t\t\t raise request . routing_exception \t \t from . debughelpers import FormDataRoutingRedirect \t raise FormDataRoutingRedirect ( request ) \t \t def dispatch_request ( self ) : \t \t\t \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\" \t req = _request_ctx_stack . top . request \t if req . routing_exception is not None : \t \t\t\t self . raise_routing_exception ( req ) \t \t rule = req . url_rule \t if ( getattr ( rule , \"provide_automatic_options\" , False ) and req . method == \"OPTIONS\" ) : \t \t\t\t return self . make_default_options_response ( ) \t \t return self . view_functions [ rule . endpoint ] ( ** req . view_args ) \t \t def full_dispatch_request ( self ) : \t \t\t \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\" \t self . try_trigger_before_first_request_functions ( ) \t try : \t \t\t\t request_started . send ( self ) \t rv = self . preprocess_request ( ) \t if rv is None : \t \t\t\t\t rv = self . dispatch_request ( ) \t \t \t except Exception as e : \t \t\t\t rv = self . handle_user_exception ( e ) \t \t return self . finalize_request ( rv ) \t \t def finalize_request ( self , rv , from_error_handler = False ) : \t \t\t \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\" \t response = self . make_response ( rv ) \t try : \t \t\t\t response = self . process_response ( response ) \t request_finished . send ( self , response = response ) \t \t except Exception : \t \t\t\t if not from_error_handler : \t \t\t\t\t raise \t \t self . logger . exception ( \"Request finalizing failed with an error while handling an error\" ) \t \t return response \t \t def try_trigger_before_first_request_functions ( self ) : \t \t\t \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\" \t if self . _got_first_request : \t \t\t\t return \t \t with self . _before_request_lock : \t \t\t\t if self . _got_first_request : \t \t\t\t\t return \t \t for func in self . before_first_request_funcs : \t \t\t\t\t func ( ) \t \t self . _got_first_request = True \t \t \t def make_default_options_response ( self ) : \t \t\t \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\" \t adapter = _request_ctx_stack . top . url_adapter \t methods = adapter . allowed_methods ( ) \t rv = self . response_class ( ) \t rv . allow . update ( methods ) \t return rv \t \t def should_ignore_error ( self , error ) : \t \t\t \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\" \t return False \t \t def make_response ( self , rv ) : \t \t\t \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\" \t status = headers = None \t if isinstance ( rv , tuple ) : \t \t\t\t len_rv = len ( rv ) \t if len_rv == 3 : \t \t\t\t\t rv , status , headers = rv \t \t elif len_rv == 2 : \t \t\t\t\t if isinstance ( rv [ 1 ] , ( Headers , dict , tuple , list ) ) : \t \t\t\t\t\t rv , headers = rv \t \t else : \t \t\t\t\t\t rv , status = rv \t \t \t else : \t \t\t\t\t raise TypeError ( \"The view function did not return a valid response tuple.\" \" The tuple must have the form (body, status, headers),\" \" (body, status), or (body, headers).\" ) \t \t \t if rv is None : \t \t\t\t raise TypeError ( \"The view function did not return a valid response. The\" \" function either returned None or ended without a return\" \" statement.\" ) \t \t if not isinstance ( rv , self . response_class ) : \t \t\t\t if isinstance ( rv , ( text_type , bytes , bytearray ) ) : \t \t\t\t\t rv = self . response_class ( rv , status = status , headers = headers ) \t status = headers = None \t \t elif isinstance ( rv , dict ) : \t \t\t\t\t rv = jsonify ( rv ) \t \t elif isinstance ( rv , BaseResponse ) or callable ( rv ) : \t \t\t\t\t try : \t \t\t\t\t\t rv = self . response_class . force_type ( rv , request . environ ) \t \t except TypeError as e : \t \t\t\t\t\t new_error = TypeError ( \"{e}\\nThe view function did not return a valid\" \" response. The return type must be a string, dict, tuple,\" \" Response instance, or WSGI callable, but it was a\" \" {rv.__class__.__name__}.\" . format ( e = e , rv = rv ) ) \t reraise ( TypeError , new_error , sys . exc_info ( ) [ 2 ] ) \t \t \t else : \t \t\t\t\t raise TypeError ( \"The view function did not return a valid\" \" response. The return type must be a string, dict, tuple,\" \" Response instance, or WSGI callable, but it was a\" \" {rv.__class__.__name__}.\" . format ( rv = rv ) ) \t \t \t if status is not None : \t \t\t\t if isinstance ( status , ( text_type , bytes , bytearray ) ) : \t \t\t\t\t rv . status = status \t \t else : \t \t\t\t\t rv . status_code = status \t \t \t if headers : \t \t\t\t rv . headers . extend ( headers ) \t \t return rv \t \t def create_url_adapter ( self , request ) : \t \t\t \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\" \t if request is not None : \t \t\t\t subdomain = ( ( self . url_map . default_subdomain or None ) if not self . subdomain_matching else None ) \t return self . url_map . bind_to_environ ( request . environ , server_name = self . config [ \"SERVER_NAME\" ] , subdomain = subdomain , ) \t \t if self . config [ \"SERVER_NAME\" ] is not None : \t \t\t\t return self . url_map . bind ( self . config [ \"SERVER_NAME\" ] , script_name = self . config [ \"APPLICATION_ROOT\" ] , url_scheme = self . config [ \"PREFERRED_URL_SCHEME\" ] , ) \t \t \t def inject_url_defaults ( self , endpoint , values ) : \t \t\t \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\" \t funcs = self . url_default_functions . get ( None , ( ) ) \t if \".\" in endpoint : \t \t\t\t bp = endpoint . rsplit ( \".\" , 1 ) [ 0 ] \t funcs = chain ( funcs , self . url_default_functions . get ( bp , ( ) ) ) \t \t for func in funcs : \t \t\t\t func ( endpoint , values ) \t \t \t def handle_url_build_error ( self , error , endpoint , values ) : \t \t\t \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\" \t exc_type , exc_value , tb = sys . exc_info ( ) \t for handler in self . url_build_error_handlers : \t \t\t\t try : \t \t\t\t\t rv = handler ( error , endpoint , values ) \t if rv is not None : \t \t\t\t\t\t return rv \t \t \t except BuildError as e : \t \t\t\t\t error = e \t \t \t if error is exc_value : \t \t\t\t reraise ( exc_type , exc_value , tb ) \t \t raise error \t \t def preprocess_request ( self ) : \t \t\t \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\" \t bp = _request_ctx_stack . top . request . blueprint \t funcs = self . url_value_preprocessors . get ( None , ( ) ) \t if bp is not None and bp in self . url_value_preprocessors : \t \t\t\t funcs = chain ( funcs , self . url_value_preprocessors [ bp ] ) \t \t for func in funcs : \t \t\t\t func ( request . endpoint , request . view_args ) \t \t funcs = self . before_request_funcs . get ( None , ( ) ) \t if bp is not None and bp in self . before_request_funcs : \t \t\t\t funcs = chain ( funcs , self . before_request_funcs [ bp ] ) \t \t for func in funcs : \t \t\t\t rv = func ( ) \t if rv is not None : \t \t\t\t\t return rv \t \t \t \t def process_response ( self , response ) : \t \t\t \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\" \t ctx = _request_ctx_stack . top \t bp = ctx . request . blueprint \t funcs = ctx . _after_request_functions \t if bp is not None and bp in self . after_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . after_request_funcs [ bp ] ) ) \t \t if None in self . after_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . after_request_funcs [ None ] ) ) \t \t for handler in funcs : \t \t\t\t response = handler ( response ) \t \t if not self . session_interface . is_null_session ( ctx . session ) : \t \t\t\t self . session_interface . save_session ( self , ctx . session , response ) \t \t return response \t \t def do_teardown_request ( self , exc = _sentinel ) : \t \t\t \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\" \t if exc is _sentinel : \t \t\t\t exc = sys . exc_info ( ) [ 1 ] \t \t funcs = reversed ( self . teardown_request_funcs . get ( None , ( ) ) ) \t bp = _request_ctx_stack . top . request . blueprint \t if bp is not None and bp in self . teardown_request_funcs : \t \t\t\t funcs = chain ( funcs , reversed ( self . teardown_request_funcs [ bp ] ) ) \t \t for func in funcs : \t \t\t\t func ( exc ) \t \t request_tearing_down . send ( self , exc = exc ) \t \t def do_teardown_appcontext ( self , exc = _sentinel ) : \t \t\t \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t if exc is _sentinel : \t \t\t\t exc = sys . exc_info ( ) [ 1 ] \t \t for func in reversed ( self . teardown_appcontext_funcs ) : \t \t\t\t func ( exc ) \t \t appcontext_tearing_down . send ( self , exc = exc ) \t \t def app_context ( self ) : \t \t\t \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t return AppContext ( self ) \t \t def request_context ( self , environ ) : \t \t\t \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\" \t return RequestContext ( self , environ ) \t \t def test_request_context ( self , * args , ** kwargs ) : \t \t\t \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\" \t from . testing import EnvironBuilder \t builder = EnvironBuilder ( self , * args , ** kwargs ) \t try : \t \t\t\t return self . request_context ( builder . get_environ ( ) ) \t \t finally : \t \t\t\t builder . close ( ) \t \t \t def wsgi_app ( self , environ , start_response ) : \t \t\t \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\" \t ctx = self . request_context ( environ ) \t error = None \t try : \t \t\t\t try : \t \t\t\t\t ctx . push ( ) \t response = self . full_dispatch_request ( ) \t \t except Exception as e : \t \t\t\t\t error = e \t response = self . handle_exception ( e ) \t \t except : \t \t\t\t\t error = sys . exc_info ( ) [ 1 ] \t raise \t \t return response ( environ , start_response ) \t \t finally : \t \t\t\t if self . should_ignore_error ( error ) : \t \t\t\t\t error = None \t \t ctx . auto_pop ( error ) \t \t \t def __call__ ( self , environ , start_response ) : \t \t\t \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\" \t return self . wsgi_app ( environ , start_response ) \t \t def __repr__ ( self ) : \t \t\t return \"<%s %r>\" % ( self . __class__ . __name__ , self . name ) \n \n \n < EOF >","type":"boolean","boost":1.0}}},{"match":{"t2src":{"query":"NSNimport SNimportW NimportWN importWNimport WNimportW NimportWN importWNimport WNimportW NimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromWimport fromWimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.import from.importW .importWN importWNfrom WNfrom. Nfrom.import from.importW .importWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNfrom WNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNW WNW= NW=W W=W( =W() W()N ()Ndef )NdefW NdefW( defW(W W(W) (W): W):N ):NI :NIif NIifnot IifnotW ifnotW( notW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnW( returnW(W W(W= (W=W W=W) =W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W): W):N ):NI :NIif NIifW IifW. ifW.W W.Wand .WandW WandW. andW.W W.W: .W:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSSS SSSS SSSS SSSS SSS) SS)N S)ND )NDreturn NDreturnW DreturnW( returnW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W)N W)ND )NDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDclass NDclassW DclassW( classW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W( =W(S W(S, (S,W S,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W( =W(S W(S, (S,W S,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W( =W(S W(S) (S)N S)NW )NW= NW=W W=W. =W.W W.WN .WNW WNW= NW=W W=W. =W.W W.WN .WNW WNW= NW={ W={S ={S: {S:[ S:[S :[S, [S,S S,S] ,S]} S]}N ]}NW }NW= NW=W W=W( =W({ W({S ({S: {S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:W S:W( :W(W W(W= (W=V W=V) =V), V),S ),S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:S S:S, :S,S S,S: ,S:S S:S, :S,S S,S: ,S:None S:None, :None,S None,S: ,S:None S:None, :None,S None,S: ,S:True S:True, :True,S True,S: ,S:False S:False, :False,S False,S: ,S:None S:None, :None,S None,S: ,S:True S:True, :True,S True,S: ,S:None S:None, :None,S None,S: ,S:W S:W( :W(W W(W= (W=V W=V) =V), V),S ),S: ,S:None S:None, :None,S None,S: ,S:False S:False, :False,S False,S: ,S:False S:False, :False,S False,S: ,S:S S:S, :S,S S,S: ,S:True S:True, :True,S True,S: ,S:True S:True, :True,S True,S: ,S:False S:False, :False,S False,S: ,S:S S:S, :S,S S,S: ,S:None S:None, :None,S None,S: ,S:V S:V, :V,} V,}) ,})N })NW )NW= NW=W W=WN =WNW WNW= NW=W W=WN =WNW WNW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNW NoneNW= NW=W W=W( =W() W()N ()NW )NW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNW NoneNW= NW=None W=NoneN =NoneNdef NoneNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None, =None,W None,W= ,W=S W=S, =S,W S,W= ,W=None W=None, =None,W None,W= ,W=False W=False, =False,W False,W= ,W=False W=False, =False,W False,W= ,W=S W=S, =S,W S,W= ,W=None W=None, =None,W None,W= ,W=False W=False, =False,W False,W= ,W=None W=None, =None,) None,): ,):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W) =W)N W)NW )NW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=WN =WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()N ()ND )NDelif NDelifnot DelifnotW elifnotW. notW.W W.W. .W.W W.W( .W(W W(W) (W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS) SS)N S)ND )NDW NDW. DW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W={ W={None ={None: {None:[ None:[W :[W] [W]} W]}N ]}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=[ W=[] =[]N []NW ]NW. NW.W W.W= .W={ W={} ={}N {}NW }NW. NW.W W.W= .W=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W= .W=False W=FalseN =FalseNW FalseNW. NW.W W.W= .W=W W=W( =W() W()N ()Nif )NifW NifW. ifW.W W.W: .W:N W:NI :NIassert NIassert( Iassert(W assert(W( (W(W W(W) (W)== W)==W )==W) ==W), W),S ),SN ,SNW SNW. NW.W W.W( .W(W W(W. (W.W W.W+ .W+S W+S, +S,W S,W= ,W=S W=S, =S,W S,W= ,W=W W=W, =W,W W,W= ,W=W W=W. =W.W W.W, .W,) W,)N ,)ND )NDW NDW. DW.W W.W. .W.W W.W= .W=W W=W. =W.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W== .W==S W==S: ==S:N S:NI :NIW NIW= IW=W W=W( =W(W W(W. (W.W W.W[ .W[S W[S] [S], S],S ],S, ,S,None S,None) ,None)N None)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnS IreturnSN returnSND SNDreturn NDreturnW DreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W. .W.W W.W( .W(W W(W) (W)) W))[ ))[V )[V] [V]N V]ND ]NDreturn NDreturnW DreturnW. returnW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW. returnW.W W.Wor .WorW WorW. orW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW. returnW.W W.WN .WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W( .W() W()N ()ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.WN .WND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=False W=False) =False): False):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifW: ifW:N W:NI :NIW NIW= IW=W W=W. =W.W W.WN .WND WNDW NDW= DW=W W=W( =W(W W(W. (W.W W.W) .W)N W)NW )NW[ NW[S W[S] [S]= S]=W ]=W( =W() W()N ()NW )NW[ NW[S W[S] [S]= S]=W ]=W( =W() W()N ()Nreturn )NreturnW NreturnW. returnW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W= ,W=W W=W( =W(W W(W. (W.W W.W) .W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S) ,S)N S)ND )NDreturn NDreturnW DreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S, ,S,W S,W. ,W.W W.W+ .W+S W+S) +S)N S)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=S W=S) =S): S):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W. (W.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W) ,W), W),W ),W) ,W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nreturn ]NreturnW NreturnWif returnWifW WifWis ifWisnot WisnotNone isnotNoneelse notNoneelseW NoneelseW. elseW.W W.WN .WND WND@ ND@W D@W. @W.W W.WN .WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]= S]=W ]=WN =WND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W( =W(W W(W. (W.W W.W) .W)N W)Nif )NifS NifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW[ IW[S W[S] [S]= S]=W ]=W. =W.W W.WN .WND WNDif NDifS DifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW[ IW[S W[S] [S]= S]=W ]=W. =W.W W.WN .WND WNDW NDW= DW=W W=W. =W.W W.W( .W(W W(W, (W,** W,**W ,**W) **W)N W)NW )NW. NW.W W.W. .W.W W.W( .W(W W(W= (W=W W=W, =W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W. =W.W W.W, .W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W, =W,) W,)N ,)NW )NW. NW.W W.W[ .W[S W[S] [S]= S]=W ]=W. =W.W W.WN .WNreturn WNreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDreturn NDreturnW DreturnW. returnW.W W.W( .W(( W((S ((S, (S,S S,S, ,S,S S,S, ,S,S S,S) ,S)) S))N ))ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W[ .W[None W[None] [None]N None]NW ]NW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDD NDDW DDW= DW=W W=W. =W.W W.W( .W() W()N ()Nfor )NforW NforWin forWinW WinW: inW:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW={ W={S ={S: {S:W S:W, :W,S W,S: ,S:W S:W} :W}N W}Nfor }NforW NforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDreturn NDreturnW DreturnWN returnWND WNDW NDW= DW=W W=W( =W(S W(S) (S)N S)N@ )N@W N@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W[ .W[S W[S] [S]N S]ND ]ND@ ND@W D@W. @W.W W.WN .WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]= S]=W ]=WN =WNW WNW. NW.W W.W. .W.W W.W= .W=W W=W. =W.W W.WN .WND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=True W=True, =True,** True,**W ,**W) **W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W. .W.W W.W( .W(S W(S) (S)== S)==S )==S: ==S:N S:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWN importWNW WNW( NW() W()N ()Nreturn )NreturnN NreturnND returnNDif NDifW DifW( ifW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W() W()N ()Nif )NifS NifSin ifSinW SinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W= .W=W W=W( =W() W()N ()NW )NW. NW.W W.W= .W=W W=W( =W() W()N ()ND )NDelif NDelifS DelifSin elifSinW SinW. inW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W= .W=W W=W( =W() W()N ()ND )NDD NDDif DDifW DifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW. IW.W W.W= .W=W W=W( =W(W W(W) (W)N W)ND )NDW NDW= DW=S W=SN =SNW SNW= NW=V W=VN =VNW VNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(S W(S) (S)N S)NW )NW, NW,W W,W= ,W=None W=None, =None,None None,NoneN ,NoneNif NoneNifW NifW: ifW:N W:NI :NIW NIW, IW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W(S W(S) (S)N S)ND )NDW NDW= DW=W W=Wor =WorW WorWor orWorW WorWN orWNW WNW= NW=W W=W( =W(W W(W( (W(( W((W ((Wfor (WforW WforWin forWin( Win(W in(W, (W,W W,W) ,W)if W)ifW )ifWis ifWisnot WisnotNone isnotNone) notNone), None),W ),W) ,W)) W))N ))NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,True S,True) ,True)N True)NW )NW. NW.W W.W( .W(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W, .W,W W,W. ,W.W W.W, .W,False W,False) ,False)N False)Nfrom )NfromW NfromW. fromW.W W.Wimport .WimportW WimportWN importWNtry WNtry: Ntry:N try:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W, ,W,** W,**W ,**W) **W)N W)ND )NDfinally NDfinally: Dfinally:N finally:NI :NIW NIW. IW.W W.W= .W=False W=FalseN =FalseND FalseNDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W= ,W=True W=True, =True,** True,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWas importWasW WasWN asWND WNDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W= ,W=W W=W, =W,** W,**W ,**W) **W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIfrom NIfrom. Ifrom.W from.Wimport .WimportW WimportWas importWasW WasWN asWND WNDreturn NDreturnW DreturnW( returnW(W W(W, (W,** W,**W ,**W) **W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNW SNW= NW=False W=FalseN =FalseNif FalseNifW NifW. ifW.W W.Win .WinW WinW. inW.W W.W: .W:N W:NI :NIassert NIassertW IassertW. assertW.W W.W[ .W[W W[W. [W.W W.W] .W]is W]isW ]isW, isW,( W,(S ,(SS (SSS SSS% SS%( S%(W %(W, (W,W W,W. ,W.W W.W[ .W[W W[W. [W.W W.W] .W], W],W ],W. ,W.W W.W) .W)) W))N ))ND )NDelse NDelse: Delse:N else:NI :NIW NIW. IW.W W.W[ .W[W W[W. [W.W W.W] .W]= W]=W ]=WN =WNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NW )NW= NW=True W=TrueN =TrueND TrueNDW NDW. DW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W. (W.W W.W) .W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,W None,W= ,W=None W=None, =None,** None,**W ,**W) **W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDW NDW[ DW[S W[S] [S]= S]=W ]=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(S W(S, (S,None S,None) ,None)N None)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,S W,S, ,S,None S,None) ,None)or None)or( )or(S or(S, (S,) S,)N ,)ND )NDif NDifW DifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS) SS)N S)ND )NDW NDW= DW=W W=W( =W(W W(W. (W.W W.W( .W() W()for ()forW )forWin forWinW WinW) inW)N W)NW )NW= NW=W W=W( =W(W W(W( (W(W W(W, (W,S W,S, ,S,( S,() ,()) ())) )))N ))Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,S W,S, ,S,None S,None) ,None)N None)ND )NDif NDifW DifWis ifWisNone WisNone: isNone:N None:NI :NIif NIifS IifSnot ifSnotin SnotinW notinW: inW:N W:NI :NIW NIW= IW=True W=TrueN =TrueNW TrueNW. NW.W W.W( .W(S W(S) (S)N S)ND )NDelse NDelse: Delse:N else:NI :NIW NIW= IW=False W=FalseN =FalseND FalseNDD NDDW DDW|= DW|=W W|=WN |=WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W, =W,** W,**W ,**W) **W)N W)NW )NW. NW.W W.W= .W=W W=WN =WNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandW!= andW!=W W!=W: !=W:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS% SS%W S%W) %W)N W)ND )NDW NDW. DW.W W.W[ .W[W W[W] [W]= W]=W ]=WN =WND WNDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW= IW=W W=W. =W.W W.W( .W(S W(S, (S,None S,None) ,None)N None)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W, ,W,** W,**W ,**W) **W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W[ .W[W W[W] [W]= W]=W ]=WN =WNreturn WNreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W[ =W[W W[W] [W]N W]ND ]NDelse NDelse: Delse:N else:NI :NIW NIW= IW=W W=WN =WND WNDassert NDassertW DassertW( assertW(W W(W, (W,W W,W) ,W)N W)Nif )NifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnW, returnW,W W,W. ,W.W W.WN .WND WNDelse NDelse: Delse:N else:NI :NIreturn NIreturnW IreturnW, returnW,None W,NoneN ,NoneND NoneNDD NDD@ DD@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(None W(None, (None,W None,W, ,W,W W,W) ,W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(None W(None, (None,W None,W, ,W,W W,W) ,W)N W)ND )ND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDtry NDtry: Dtry:N try:NI :NIW NIW, IW,W W,W= ,W=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDexcept NDexceptW DexceptW: exceptW:N W:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDW NDW= DW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W, (W,{ W,{} ,{}) {})N })NW )NW[ NW[W W[W] [W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNdef SNdefW NdefW( defW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nreturn )NreturnW NreturnWN returnWND WNDreturn NDreturnW DreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=None W=None) =None): None):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[Wor [WorW WorW. orW.W W.W] .W]= W]=W ]=WN =WND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W[ .W[None W[None] [None]. None].W ].W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WND@ ND@W D@WN @WNdef WNdefW NdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(None W(None, (None,[ None,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W= ,W=W W=W. =W.W W.W( .W(W W(W( (W(W W(W) (W)) W))N ))Nfor )NforW NforW, forW,W W,Win ,Win( Win(( in((W ((W. (W.W W.W, .W,W W,W) ,W), W),( ),(None ,(None, (None,W None,W) ,W), W),( ),(W ,(W. (W.W W.W, .W,None W,None) ,None), None),( ),(None ,(None, (None,None None,None) ,None), None),) ),): ,):N ):NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W) (W)N W)Nif )Nifnot NifnotW ifnotW: notW:N W:NI :NIcontinue NIcontinueN IcontinueND continueNDfor NDforW DforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDD DDDD DDDdef DDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.Wis .WisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDif NDifW DifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIreturn NIreturnW IreturnWN returnWND WNDW NDW= DW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDreturn NDreturnW DreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDW NDW= DW=W W=W. =W.W W.W[ .W[S W[S] [S]N S]Nif ]Nif( Nif(W if(Wis (WisNone WisNoneand isNoneandW NoneandW. andW.W W.Wand .WandW WandW( andW(W W(W, (W,W W,W) ,W)) W)): )):N ):NI :NIreturn NIreturnTrue IreturnTrueN returnTrueND TrueNDif NDifW DifW: ifW:N W:NI :NIreturn NIreturnW IreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDreturn NDreturnFalse DreturnFalseN returnFalseND FalseNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()Nassert )NassertW NassertWis assertWisW WisWN isWNif WNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIif NIifW IifW. ifW.W W.Wor .WorW WorW. orW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIW NIW. IW.W W.W= .W=True W=TrueN =TrueNif TrueNifW NifW. ifW.W W.W[ .W[V W[V] [V]not V]notin ]notinW notinW. inW.W W.W( .W() W(): ():N ):NI :NIW NIW. IW.W W.W= .W=S W=S. =S.W S.W( .W(* W(*W (*W. *W.W W.W) .W)N W)ND )NDD NDDelif DDelifnot DelifnotW elifnotW( notW(W W(W, (W,S W,S) ,S): S):N ):NI :NIW NIW. IW.W W.W= .W=( W=() =()N ()ND )NDD NDDif DDifW DifW( ifW(W W(W, (W,W W,W) ,W)and W)andnot )andnotW andnotW. notW.W W.W( .W(W W(W) (W): W):N ):NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W(W W(W) (W)N W)ND )NDW NDW= DW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDreturn NDreturnW DreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)Nif )NifW NifW. ifW.W W.W: .W:N W:NI :NIif NIifW IifWis ifWisW WisW: isW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDelse NDelse: Delse:N else:NI :NIraise NIraiseW IraiseWN raiseWND WNDD NDDW DDW. DW.W W.W( .W(( W((W ((W, (W,W W,W, ,W,W W,W) ,W)) W))N ))NW )NW= NW=W W=W( =W() W()N ()NW )NW. NW.W W.W= .W=W W=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnW. returnW.W W.W( .W(W W(W, (W,W W,W= ,W=True W=True) =True)N True)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(S W(S% (S%( S%(W %(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W), W),W ),W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNif( Nif(not if(notW (notW. notW.W W.Wor .Wornot WornotW ornotW( notW(W W(W. (W.W W.W, .W,W W,W) ,W)or W)orW )orW. orW.W W.Win .Win( Win(S in(S, (S,S S,S, ,S,S S,S) ,S)) S)): )):N ):NI :NIraise NIraiseW IraiseW. raiseW.W W.WN .WND WNDfrom NDfrom. Dfrom.W from.Wimport .WimportW WimportWN importWNraise WNraiseW NraiseW( raiseW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNif WNifW NifW. ifW.W W.Wis .Wisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)ND )NDW NDW= DW=W W=W. =W.W W.WN .WNif WNif( Nif(W if(W( (W(W W(W, (W,S W,S, ,S,False S,False) ,False)and False)andW )andW. andW.W W.W== .W==S W==S) ==S): S):N ):NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W() W()N ()ND )NDreturn NDreturnW DreturnW. returnW.W W.W[ .W[W W[W. [W.W W.W] .W]( W](** ](**W (**W. **W.W W.W) .W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W() W()N ()Ntry )Ntry: Ntry:N try:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()Nif )NifW NifWis ifWisNone WisNone: isNone:N None:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()N ()ND )NDD NDDexcept DDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnW. returnW.W W.W( .W(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W= ,W=False W=False) =False): False):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)Ntry )Ntry: Ntry:N try:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDexcept NDexceptW DexceptW: exceptW:N W:NI :NIif NIifnot IifnotW ifnotW: notW:N W:NI :NIraise NIraiseN IraiseND raiseNDW NDW. DW.W W.W. .W.W W.W( .W(S W(S) (S)N S)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNif SNifW NifW. ifW.W W.W: .W:N W:NI :NIreturn NIreturnN IreturnND returnNDwith NDwithW DwithW. withW.W W.W: .W:N W:NI :NIif NIifW IifW. ifW.W W.W: .W:N W:NI :NIreturn NIreturnN IreturnND returnNDfor NDforW DforWin forWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW( IW() W()N ()ND )NDW NDW. DW.W W.W= .W=True W=TrueN =TrueND TrueNDD NDDdef DDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W( .W() W()N ()NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)Nreturn )NreturnW NreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnFalse NreturnFalseN returnFalseND FalseNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W= =W=None W=NoneN =NoneNif NoneNifW NifW( ifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)Nif )NifW NifW== ifW==V W==V: ==V:N V:NI :NIW NIW, IW,W W,W, ,W,W W,W= ,W=W W=WN =WND WNDelif NDelifW DelifW== elifW==V W==V: ==V:N V:NI :NIif NIifW IifW( ifW(W W(W[ (W[V W[V] [V], V],( ],(W ,(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW, IW,W W,W= ,W=W W=WN =WND WNDelse NDelse: Delse:N else:NI :NIW NIW, IW,W W,W= ,W=W W=WN =WND WNDD NDDelse DDelse: Delse:N else:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS) SS)N S)ND )NDD NDDif DDifW DifWis ifWisNone WisNone: isNone:N None:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSS) SS)N S)ND )NDif NDifnot DifnotW ifnotW( notW(W W(W, (W,W W,W. ,W.W W.W) .W): W):N ):NI :NIif NIifW IifW( ifW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW= IW=W W=W. =W.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W, =W,W W,W= ,W=W W=W) =W)N W)NW )NW= NW=W W=W= =W=None W=NoneN =NoneND NoneNDelif NDelifW DelifW( elifW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDelif NDelifW DelifW( elifW(W W(W, (W,W W,W) ,W)or W)orW )orW( orW(W W(W) (W): W):N ):NI :NItry NItry: Itry:N try:NI :NIW NIW= IW=W W=W. =W.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W) .W)N W)ND )NDexcept NDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=W( =W(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(W= (W=W W=W, =W,W W,W= ,W=W W=W) =W)) W))N ))NW )NW( NW(W W(W, (W,W W,W, ,W,W W,W. ,W.W W.W( .W() W()[ ()[V )[V] [V]) V])N ])ND )NDD NDDelse DDelse: Delse:N else:NI :NIraise NIraiseW IraiseW( raiseW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(W= (W=W W=W) =W)) W))N ))ND )NDD NDDif DDifW DifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIif NIifW IifW( ifW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW. IW.W W.W= .W=W W=WN =WND WNDelse NDelse: Delse:N else:NI :NIW NIW. IW.W W.W= .W=W W=WN =WND WNDD NDDif DDifW DifW: ifW:N W:NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIW NIW= IW=( W=(( =((W ((W. (W.W W.W. .W.W W.Wor .WorNone WorNone) orNone)if None)ifnot )ifnotW ifnotW. notW.W W.Welse .WelseNone WelseNone) elseNone)N None)Nreturn )NreturnW NreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W, =W,) W,)N ,)ND )NDif NDifW DifW. ifW.W W.W[ .W[S W[S] [S]is S]isnot ]isnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnW. returnW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],W ],W= ,W=W W=W. =W.W W.W[ .W[S W[S] [S], S],) ],)N ,)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifS NifSin ifSinW SinW: inW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W(S W(S, (S,V S,V) ,V)[ V)[V )[V] [V]N V]NW ]NW= NW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W. .W.W W.W( .W(W W(W, (W,( W,() ,()) ())) )))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W) ,W)N W)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,W= ,W=W W=W. =W.W W.W( .W() W()N ()Nfor )NforW NforWin forWinW WinW. inW.W W.W: .W:N W:NI :NItry NItry: Itry:N try:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDexcept DDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=WN =WND WNDD NDDif DDifW DifWis ifWisW WisW: isW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDraise NDraiseW DraiseWN raiseWND WNDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W. .W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDW NDW= DW=W W=W. =W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())N ))Nif )NifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW= IW=W W=W( =W() W()N ()Nif )NifW NifWis ifWisnot WisnotNone isnotNone: notNone:N None:NI :NIreturn NIreturnW IreturnWN returnWND WNDD NDDD DDDdef DDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.WN .WNW WNW= NW=W W=W. =W.W W.W. .W.W W.WN .WNW WNW= NW=W W=W. =W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDif NDifNone DifNonein ifNoneinW NoneinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[None W[None] [None]) None])) ]))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW= IW=W W=W( =W(W W(W) (W)N W)ND )NDif NDifnot DifnotW ifnotW. notW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W) ,W)N W)ND )NDreturn NDreturnW DreturnWN returnWND WNDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=W W=W) =W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisW WisW: isW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDW NDW= DW=W W=W( =W(W W(W. (W.W W.W. .W.W W.W( .W(None W(None, (None,( None,() ,()) ())) )))N ))NW )NW= NW=W W=W. =W.W W.W. .W.W W.W. .W.W W.WN .WNif WNifW NifWis ifWisnot WisnotNone isnotNoneand notNoneandW NoneandWin andWinW WinW. inW.W W.W: .W:N W:NI :NIW NIW= IW=W W=W( =W(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDfor NDforW DforWin forWinW WinW: inW:N W:NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W= ,W=W W=W) =W): W):N ):NI :NIS NISN ISNif SNifW NifWis ifWisW WisW: isW:N W:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDfor NDforW DforWin forWinW WinW( inW(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,W= ,W=W W=W) =W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W) (W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W): W):N ):NI :NIS NISN ISNfrom SNfrom. Nfrom.W from.Wimport .WimportW WimportWN importWNW WNW= NW=W W=W( =W(W W(W, (W,* W,*W ,*W, *W,** W,**W ,**W) **W)N W)Ntry )Ntry: Ntry:N try:NI :NIreturn NIreturnW IreturnW. returnW.W W.W( .W(W W(W. (W.W W.W( .W() W()) ())N ))ND )NDfinally NDfinally: Dfinally:N finally:NI :NIW NIW. IW.W W.W( .W() W()N ()ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)NW )NW= NW=None W=NoneN =NoneNtry NoneNtry: Ntry:N try:NI :NItry NItry: Itry:N try:NI :NIW NIW. IW.W W.W( .W() W()N ()NW )NW= NW=W W=W. =W.W W.W( .W() W()N ()ND )NDexcept NDexceptW DexceptWas exceptWasW WasW: asW:N W:NI :NIW NIW= IW=W W=WN =WNW WNW= NW=W W=W. =W.W W.W( .W(W W(W) (W)N W)ND )NDexcept NDexcept: Dexcept:N except:NI :NIW NIW= IW=W W=W. =W.W W.W( .W() W()[ ()[V )[V] [V]N V]Nraise ]NraiseN NraiseND raiseNDreturn NDreturnW DreturnW( returnW(W W(W, (W,W W,W) ,W)N W)ND )NDfinally NDfinally: Dfinally:N finally:NI :NIif NIifW IifW. ifW.W W.W( .W(W W(W) (W): W):N ):NI :NIW NIW= IW=None W=NoneN =NoneND NoneNDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDD NDDdef DDdefW DdefW( defW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNreturn SNreturnW NreturnW. returnW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDdef NDdefW DdefW( defW(W W(W) (W): W):N ):NI :NIreturn NIreturnS IreturnS% returnS%( S%(W %(W. (W.W W.W. .W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDD NDD< DD<W D<W>","type":"boolean","boost":4.0}}},{"match":{"t1src":{"query":"\n\"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\"\nimport \"\"\"\n    flask.app\n    ~~~~~~~~~\n\n    This module implements the central WSGI application object.\n\n    :copyright: 2010 Pallets\n    :license: BSD-3-Clause\n\"\"\"\nimportos \nimportos\n importos\nimport os\nimportsys \nimportsys\n importsys\nimport sys\nimportwarnings \nimportwarnings\n importwarnings\nfrom warnings\nfromdatetime \nfromdatetimeimport fromdatetimeimporttimedelta datetimeimporttimedelta\n importtimedelta\nfrom timedelta\nfromfunctools \nfromfunctoolsimport fromfunctoolsimportupdate_wrapper functoolsimportupdate_wrapper\n importupdate_wrapper\nfrom update_wrapper\nfromitertools \nfromitertoolsimport fromitertoolsimportchain itertoolsimportchain\n importchain\nfrom chain\nfromthreading \nfromthreadingimport fromthreadingimportLock threadingimportLock\n importLock\nfrom Lock\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.datastructures werkzeug.datastructuresimport .datastructuresimportHeaders datastructuresimportHeaders\n importHeaders\nfrom Headers\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.datastructures werkzeug.datastructuresimport .datastructuresimportImmutableDict datastructuresimportImmutableDict\n importImmutableDict\nfrom ImmutableDict\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportBadRequest exceptionsimportBadRequest\n importBadRequest\nfrom BadRequest\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportBadRequestKeyError exceptionsimportBadRequestKeyError\n importBadRequestKeyError\nfrom BadRequestKeyError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportdefault_exceptions exceptionsimportdefault_exceptions\n importdefault_exceptions\nfrom default_exceptions\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportHTTPException exceptionsimportHTTPException\n importHTTPException\nfrom HTTPException\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.exceptions werkzeug.exceptionsimport .exceptionsimportInternalServerError exceptionsimportInternalServerError\n importInternalServerError\nfrom InternalServerError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportBuildError routingimportBuildError\n importBuildError\nfrom BuildError\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportMap routingimportMap\n importMap\nfrom Map\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRequestRedirect routingimportRequestRedirect\n importRequestRedirect\nfrom RequestRedirect\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRoutingException routingimportRoutingException\n importRoutingException\nfrom RoutingException\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.routing werkzeug.routingimport .routingimportRule routingimportRule\n importRule\nfrom Rule\nfromwerkzeug \nfromwerkzeug. fromwerkzeug.wrappers werkzeug.wrappersimport .wrappersimportBaseResponse wrappersimportBaseResponse\n importBaseResponse\nfrom BaseResponse\nfrom. \nfrom.import from.importcli .importcli\n importcli\nfrom cli\nfrom. \nfrom.import from.importjson .importjson\n importjson\nfrom json\nfrom. \nfrom._compat from._compatimport ._compatimportinteger_types _compatimportinteger_types\n importinteger_types\nfrom integer_types\nfrom. \nfrom._compat from._compatimport ._compatimportreraise _compatimportreraise\n importreraise\nfrom reraise\nfrom. \nfrom._compat from._compatimport ._compatimportstring_types _compatimportstring_types\n importstring_types\nfrom string_types\nfrom. \nfrom._compat from._compatimport ._compatimporttext_type _compatimporttext_type\n importtext_type\nfrom text_type\nfrom. \nfrom.config from.configimport .configimportConfig configimportConfig\n importConfig\nfrom Config\nfrom. \nfrom.config from.configimport .configimportConfigAttribute configimportConfigAttribute\n importConfigAttribute\nfrom ConfigAttribute\nfrom. \nfrom.ctx from.ctximport .ctximport_AppCtxGlobals ctximport_AppCtxGlobals\n import_AppCtxGlobals\nfrom _AppCtxGlobals\nfrom. \nfrom.ctx from.ctximport .ctximportAppContext ctximportAppContext\n importAppContext\nfrom AppContext\nfrom. \nfrom.ctx from.ctximport .ctximportRequestContext ctximportRequestContext\n importRequestContext\nfrom RequestContext\nfrom. \nfrom.globals from.globalsimport .globalsimport_request_ctx_stack globalsimport_request_ctx_stack\n import_request_ctx_stack\nfrom _request_ctx_stack\nfrom. \nfrom.globals from.globalsimport .globalsimportg globalsimportg\n importg\nfrom g\nfrom. \nfrom.globals from.globalsimport .globalsimportrequest globalsimportrequest\n importrequest\nfrom request\nfrom. \nfrom.globals from.globalsimport .globalsimportsession globalsimportsession\n importsession\nfrom session\nfrom. \nfrom.helpers from.helpersimport .helpersimport_endpoint_from_view_func helpersimport_endpoint_from_view_func\n import_endpoint_from_view_func\nfrom _endpoint_from_view_func\nfrom. \nfrom.helpers from.helpersimport .helpersimport_PackageBoundObject helpersimport_PackageBoundObject\n import_PackageBoundObject\nfrom _PackageBoundObject\nfrom. \nfrom.helpers from.helpersimport .helpersimportfind_package helpersimportfind_package\n importfind_package\nfrom find_package\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_debug_flag helpersimportget_debug_flag\n importget_debug_flag\nfrom get_debug_flag\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_env helpersimportget_env\n importget_env\nfrom get_env\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_flashed_messages helpersimportget_flashed_messages\n importget_flashed_messages\nfrom get_flashed_messages\nfrom. \nfrom.helpers from.helpersimport .helpersimportget_load_dotenv helpersimportget_load_dotenv\n importget_load_dotenv\nfrom get_load_dotenv\nfrom. \nfrom.helpers from.helpersimport .helpersimportlocked_cached_property helpersimportlocked_cached_property\n importlocked_cached_property\nfrom locked_cached_property\nfrom. \nfrom.helpers from.helpersimport .helpersimporturl_for helpersimporturl_for\n importurl_for\nfrom url_for\nfrom. \nfrom.json from.jsonimport .jsonimportjsonify jsonimportjsonify\n importjsonify\nfrom jsonify\nfrom. \nfrom.logging from.loggingimport .loggingimportcreate_logger loggingimportcreate_logger\n importcreate_logger\nfrom create_logger\nfrom. \nfrom.sessions from.sessionsimport .sessionsimportSecureCookieSessionInterface sessionsimportSecureCookieSessionInterface\n importSecureCookieSessionInterface\nfrom SecureCookieSessionInterface\nfrom. \nfrom.signals from.signalsimport .signalsimportappcontext_tearing_down signalsimportappcontext_tearing_down\n importappcontext_tearing_down\nfrom appcontext_tearing_down\nfrom. \nfrom.signals from.signalsimport .signalsimportgot_request_exception signalsimportgot_request_exception\n importgot_request_exception\nfrom got_request_exception\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_finished signalsimportrequest_finished\n importrequest_finished\nfrom request_finished\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_started signalsimportrequest_started\n importrequest_started\nfrom request_started\nfrom. \nfrom.signals from.signalsimport .signalsimportrequest_tearing_down signalsimportrequest_tearing_down\n importrequest_tearing_down\nfrom request_tearing_down\nfrom. \nfrom.templating from.templatingimport .templatingimport_default_template_ctx_processor templatingimport_default_template_ctx_processor\n import_default_template_ctx_processor\nfrom _default_template_ctx_processor\nfrom. \nfrom.templating from.templatingimport .templatingimportDispatchingJinjaLoader templatingimportDispatchingJinjaLoader\n importDispatchingJinjaLoader\nfrom DispatchingJinjaLoader\nfrom. \nfrom.templating from.templatingimport .templatingimportEnvironment templatingimportEnvironment\n importEnvironment\nfrom Environment\nfrom. \nfrom.wrappers from.wrappersimport .wrappersimportRequest wrappersimportRequest\n importRequest\nfrom Request\nfrom. \nfrom.wrappers from.wrappersimport .wrappersimportResponse wrappersimportResponse\n importResponse\n_sentinel Response\n_sentinel= \n_sentinel=object _sentinel=object( =object() object()\n ()\ndef )\ndef_make_timedelta \ndef_make_timedelta( def_make_timedelta(value _make_timedelta(value) (value): value):\t ):\t\t :\t\tif \t\tifnot \tifnotisinstance ifnotisinstance( notisinstance(value isinstance(value, (value,timedelta value,timedelta) ,timedelta): timedelta):\t ):\t\t\t :\t\t\treturn \t\t\treturntimedelta \t\treturntimedelta( returntimedelta(seconds timedelta(seconds= (seconds=value seconds=value) =value)\t value)\t\t )\t\treturn \t\treturnvalue \treturnvalue\n returnvalue\n\n value\n\ndef \n\ndefsetupmethod \ndefsetupmethod( defsetupmethod(f setupmethod(f) (f): f):\t ):\t\t :\t\t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\" \t\t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\t \t\"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\tdef \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\tdefwrapper_func \tdefwrapper_func( defwrapper_func(self wrapper_func(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\tif \t\t\tifself \t\tifself. ifself.debug self.debugand .debugandself debugandself. andself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t :\t\t\t\traise \t\t\t\traiseAssertionError \t\t\traiseAssertionError( raiseAssertionError(\"A setup function was called after the \" AssertionError(\"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \" (\"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \" \"A setup function was called after the \"\"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\" \"first request was handled.  This usually indicates a bug \"\"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \" \"in the application where a module was not imported \"\"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \" \"and decorators or other functionality was called too late.\\n\"\"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \"\"before the application starts serving requests.\" \"To fix this make sure to import all your view modules, \"\"database models and everything related at a central place \"\"before the application starts serving requests.\") \"database models and everything related at a central place \"\"before the application starts serving requests.\")\t \"before the application starts serving requests.\")\t\t )\t\treturn \t\treturnf \treturnf( returnf(self f(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\treturn \t\treturnupdate_wrapper \treturnupdate_wrapper( returnupdate_wrapper(wrapper_func update_wrapper(wrapper_func, (wrapper_func,f wrapper_func,f) ,f)\n f)\n\n )\n\nclass \n\nclassFlask \nclassFlask( classFlask(_PackageBoundObject Flask(_PackageBoundObject) (_PackageBoundObject): _PackageBoundObject):\t ):\t\t :\t\t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\" \t\t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\t \t\"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\trequest_class \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: the folder with static files that should be served\n                          at `static_url_path`.  Defaults to the ``'static'``\n                          folder in the root path of the application.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: Flask by default will automatically calculate the path\n                      to the root of the application.  In certain situations\n                      this cannot be achieved (for instance if the package\n                      is a Python 3 namespace package) and needs to be\n                      manually defined.\n    \"\"\"\trequest_class= \trequest_class=Request request_class=Request\t =Request\tresponse_class Request\tresponse_class= \tresponse_class=Response response_class=Response\t =Response\tjinja_environment Response\tjinja_environment= \tjinja_environment=Environment jinja_environment=Environment\t =Environment\tapp_ctx_globals_class Environment\tapp_ctx_globals_class= \tapp_ctx_globals_class=_AppCtxGlobals app_ctx_globals_class=_AppCtxGlobals\t =_AppCtxGlobals\tconfig_class _AppCtxGlobals\tconfig_class= \tconfig_class=Config config_class=Config\t =Config\ttesting Config\ttesting= \ttesting=ConfigAttribute testing=ConfigAttribute( =ConfigAttribute(\"TESTING\" ConfigAttribute(\"TESTING\") (\"TESTING\")\t \"TESTING\")\tsecret_key )\tsecret_key= \tsecret_key=ConfigAttribute secret_key=ConfigAttribute( =ConfigAttribute(\"SECRET_KEY\" ConfigAttribute(\"SECRET_KEY\") (\"SECRET_KEY\")\t \"SECRET_KEY\")\tsession_cookie_name )\tsession_cookie_name= \tsession_cookie_name=ConfigAttribute session_cookie_name=ConfigAttribute( =ConfigAttribute(\"SESSION_COOKIE_NAME\" ConfigAttribute(\"SESSION_COOKIE_NAME\") (\"SESSION_COOKIE_NAME\")\t \"SESSION_COOKIE_NAME\")\tpermanent_session_lifetime )\tpermanent_session_lifetime= \tpermanent_session_lifetime=ConfigAttribute permanent_session_lifetime=ConfigAttribute( =ConfigAttribute(\"PERMANENT_SESSION_LIFETIME\" ConfigAttribute(\"PERMANENT_SESSION_LIFETIME\", (\"PERMANENT_SESSION_LIFETIME\",get_converter \"PERMANENT_SESSION_LIFETIME\",get_converter= ,get_converter=_make_timedelta get_converter=_make_timedelta) =_make_timedelta)\t _make_timedelta)\tsend_file_max_age_default )\tsend_file_max_age_default= \tsend_file_max_age_default=ConfigAttribute send_file_max_age_default=ConfigAttribute( =ConfigAttribute(\"SEND_FILE_MAX_AGE_DEFAULT\" ConfigAttribute(\"SEND_FILE_MAX_AGE_DEFAULT\", (\"SEND_FILE_MAX_AGE_DEFAULT\",get_converter \"SEND_FILE_MAX_AGE_DEFAULT\",get_converter= ,get_converter=_make_timedelta get_converter=_make_timedelta) =_make_timedelta)\t _make_timedelta)\tuse_x_sendfile )\tuse_x_sendfile= \tuse_x_sendfile=ConfigAttribute use_x_sendfile=ConfigAttribute( =ConfigAttribute(\"USE_X_SENDFILE\" ConfigAttribute(\"USE_X_SENDFILE\") (\"USE_X_SENDFILE\")\t \"USE_X_SENDFILE\")\tjson_encoder )\tjson_encoder= \tjson_encoder=json json_encoder=json. =json.JSONEncoder json.JSONEncoder\t .JSONEncoder\tjson_decoder JSONEncoder\tjson_decoder= \tjson_decoder=json json_decoder=json. =json.JSONDecoder json.JSONDecoder\t .JSONDecoder\tjinja_options JSONDecoder\tjinja_options= \tjinja_options={ jinja_options={\"extensions\" ={\"extensions\": {\"extensions\":[ \"extensions\":[\"jinja2.ext.autoescape\" :[\"jinja2.ext.autoescape\", [\"jinja2.ext.autoescape\",\"jinja2.ext.with_\" \"jinja2.ext.autoescape\",\"jinja2.ext.with_\"] ,\"jinja2.ext.with_\"]} \"jinja2.ext.with_\"]}\t ]}\tdefault_config }\tdefault_config= \tdefault_config=ImmutableDict default_config=ImmutableDict( =ImmutableDict({ ImmutableDict({\"ENV\" ({\"ENV\": {\"ENV\":None \"ENV\":None, :None,\"DEBUG\" None,\"DEBUG\": ,\"DEBUG\":None \"DEBUG\":None, :None,\"TESTING\" None,\"TESTING\": ,\"TESTING\":False \"TESTING\":False, :False,\"PROPAGATE_EXCEPTIONS\" False,\"PROPAGATE_EXCEPTIONS\": ,\"PROPAGATE_EXCEPTIONS\":None \"PROPAGATE_EXCEPTIONS\":None, :None,\"PRESERVE_CONTEXT_ON_EXCEPTION\" None,\"PRESERVE_CONTEXT_ON_EXCEPTION\": ,\"PRESERVE_CONTEXT_ON_EXCEPTION\":None \"PRESERVE_CONTEXT_ON_EXCEPTION\":None, :None,\"SECRET_KEY\" None,\"SECRET_KEY\": ,\"SECRET_KEY\":None \"SECRET_KEY\":None, :None,\"PERMANENT_SESSION_LIFETIME\" None,\"PERMANENT_SESSION_LIFETIME\": ,\"PERMANENT_SESSION_LIFETIME\":timedelta \"PERMANENT_SESSION_LIFETIME\":timedelta( :timedelta(days timedelta(days= (days=31 days=31) =31), 31),\"USE_X_SENDFILE\" ),\"USE_X_SENDFILE\": ,\"USE_X_SENDFILE\":False \"USE_X_SENDFILE\":False, :False,\"SERVER_NAME\" False,\"SERVER_NAME\": ,\"SERVER_NAME\":None \"SERVER_NAME\":None, :None,\"APPLICATION_ROOT\" None,\"APPLICATION_ROOT\": ,\"APPLICATION_ROOT\":\"/\" \"APPLICATION_ROOT\":\"/\", :\"/\",\"SESSION_COOKIE_NAME\" \"/\",\"SESSION_COOKIE_NAME\": ,\"SESSION_COOKIE_NAME\":\"session\" \"SESSION_COOKIE_NAME\":\"session\", :\"session\",\"SESSION_COOKIE_DOMAIN\" \"session\",\"SESSION_COOKIE_DOMAIN\": ,\"SESSION_COOKIE_DOMAIN\":None \"SESSION_COOKIE_DOMAIN\":None, :None,\"SESSION_COOKIE_PATH\" None,\"SESSION_COOKIE_PATH\": ,\"SESSION_COOKIE_PATH\":None \"SESSION_COOKIE_PATH\":None, :None,\"SESSION_COOKIE_HTTPONLY\" None,\"SESSION_COOKIE_HTTPONLY\": ,\"SESSION_COOKIE_HTTPONLY\":True \"SESSION_COOKIE_HTTPONLY\":True, :True,\"SESSION_COOKIE_SECURE\" True,\"SESSION_COOKIE_SECURE\": ,\"SESSION_COOKIE_SECURE\":False \"SESSION_COOKIE_SECURE\":False, :False,\"SESSION_COOKIE_SAMESITE\" False,\"SESSION_COOKIE_SAMESITE\": ,\"SESSION_COOKIE_SAMESITE\":None \"SESSION_COOKIE_SAMESITE\":None, :None,\"SESSION_REFRESH_EACH_REQUEST\" None,\"SESSION_REFRESH_EACH_REQUEST\": ,\"SESSION_REFRESH_EACH_REQUEST\":True \"SESSION_REFRESH_EACH_REQUEST\":True, :True,\"MAX_CONTENT_LENGTH\" True,\"MAX_CONTENT_LENGTH\": ,\"MAX_CONTENT_LENGTH\":None \"MAX_CONTENT_LENGTH\":None, :None,\"SEND_FILE_MAX_AGE_DEFAULT\" None,\"SEND_FILE_MAX_AGE_DEFAULT\": ,\"SEND_FILE_MAX_AGE_DEFAULT\":timedelta \"SEND_FILE_MAX_AGE_DEFAULT\":timedelta( :timedelta(hours timedelta(hours= (hours=12 hours=12) =12), 12),\"TRAP_BAD_REQUEST_ERRORS\" ),\"TRAP_BAD_REQUEST_ERRORS\": ,\"TRAP_BAD_REQUEST_ERRORS\":None \"TRAP_BAD_REQUEST_ERRORS\":None, :None,\"TRAP_HTTP_EXCEPTIONS\" None,\"TRAP_HTTP_EXCEPTIONS\": ,\"TRAP_HTTP_EXCEPTIONS\":False \"TRAP_HTTP_EXCEPTIONS\":False, :False,\"EXPLAIN_TEMPLATE_LOADING\" False,\"EXPLAIN_TEMPLATE_LOADING\": ,\"EXPLAIN_TEMPLATE_LOADING\":False \"EXPLAIN_TEMPLATE_LOADING\":False, :False,\"PREFERRED_URL_SCHEME\" False,\"PREFERRED_URL_SCHEME\": ,\"PREFERRED_URL_SCHEME\":\"http\" \"PREFERRED_URL_SCHEME\":\"http\", :\"http\",\"JSON_AS_ASCII\" \"http\",\"JSON_AS_ASCII\": ,\"JSON_AS_ASCII\":True \"JSON_AS_ASCII\":True, :True,\"JSON_SORT_KEYS\" True,\"JSON_SORT_KEYS\": ,\"JSON_SORT_KEYS\":True \"JSON_SORT_KEYS\":True, :True,\"JSONIFY_PRETTYPRINT_REGULAR\" True,\"JSONIFY_PRETTYPRINT_REGULAR\": ,\"JSONIFY_PRETTYPRINT_REGULAR\":False \"JSONIFY_PRETTYPRINT_REGULAR\":False, :False,\"JSONIFY_MIMETYPE\" False,\"JSONIFY_MIMETYPE\": ,\"JSONIFY_MIMETYPE\":\"application/json\" \"JSONIFY_MIMETYPE\":\"application/json\", :\"application/json\",\"TEMPLATES_AUTO_RELOAD\" \"application/json\",\"TEMPLATES_AUTO_RELOAD\": ,\"TEMPLATES_AUTO_RELOAD\":None \"TEMPLATES_AUTO_RELOAD\":None, :None,\"MAX_COOKIE_SIZE\" None,\"MAX_COOKIE_SIZE\": ,\"MAX_COOKIE_SIZE\":4093 \"MAX_COOKIE_SIZE\":4093, :4093,} 4093,}) ,})\t })\turl_rule_class )\turl_rule_class= \turl_rule_class=Rule url_rule_class=Rule\t =Rule\turl_map_class Rule\turl_map_class= \turl_map_class=Map url_map_class=Map\t =Map\ttest_client_class Map\ttest_client_class= \ttest_client_class=None test_client_class=None\t =None\ttest_cli_runner_class None\ttest_cli_runner_class= \ttest_cli_runner_class=None test_cli_runner_class=None\t =None\tsession_interface None\tsession_interface= \tsession_interface=SecureCookieSessionInterface session_interface=SecureCookieSessionInterface( =SecureCookieSessionInterface() SecureCookieSessionInterface()\t ()\timport_name )\timport_name= \timport_name=None import_name=None\t =None\ttemplate_folder None\ttemplate_folder= \ttemplate_folder=None template_folder=None\t =None\troot_path None\troot_path= \troot_path=None root_path=None\t =None\tdef None\tdef__init__ \tdef__init__( def__init__(self __init__(self, (self,import_name self,import_name, ,import_name,static_url_path import_name,static_url_path= ,static_url_path=None static_url_path=None, =None,static_folder None,static_folder= ,static_folder=\"static\" static_folder=\"static\", =\"static\",static_host \"static\",static_host= ,static_host=None static_host=None, =None,host_matching None,host_matching= ,host_matching=False host_matching=False, =False,subdomain_matching False,subdomain_matching= ,subdomain_matching=False subdomain_matching=False, =False,template_folder False,template_folder= ,template_folder=\"templates\" template_folder=\"templates\", =\"templates\",instance_path \"templates\",instance_path= ,instance_path=None instance_path=None, =None,instance_relative_config None,instance_relative_config= ,instance_relative_config=False instance_relative_config=False, =False,root_path False,root_path= ,root_path=None root_path=None, =None,) None,): ,):\t ):\t\t\t :\t\t\t_PackageBoundObject \t\t\t_PackageBoundObject. \t\t_PackageBoundObject.__init__ _PackageBoundObject.__init__( .__init__(self __init__(self, (self,import_name self,import_name, ,import_name,template_folder import_name,template_folder= ,template_folder=template_folder template_folder=template_folder, =template_folder,root_path template_folder,root_path= ,root_path=root_path root_path=root_path) =root_path)\t root_path)\tself )\tself. \tself.static_url_path self.static_url_path= .static_url_path=static_url_path static_url_path=static_url_path\t =static_url_path\tself static_url_path\tself. \tself.static_folder self.static_folder= .static_folder=static_folder static_folder=static_folder\t =static_folder\tif static_folder\tifinstance_path \tifinstance_pathis ifinstance_pathisNone instance_pathisNone: isNone:\t None:\t\t\t\t :\t\t\t\tinstance_path \t\t\t\tinstance_path= \t\t\tinstance_path=self instance_path=self. =self.auto_find_instance_path self.auto_find_instance_path( .auto_find_instance_path() auto_find_instance_path()\t ()\t\t )\t\telif \t\telifnot \telifnotos elifnotos. notos.path os.path. .path.isabs path.isabs( .isabs(instance_path isabs(instance_path) (instance_path): instance_path):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseValueError \t\t\traiseValueError( raiseValueError(\"If an instance path is provided it must be absolute.\" ValueError(\"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\" (\"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\") \"If an instance path is provided it must be absolute.\"\" A relative path was given instead.\")\t \" A relative path was given instead.\")\t\t )\t\tself \t\tself. \tself.instance_path self.instance_path= .instance_path=instance_path instance_path=instance_path\t =instance_path\tself instance_path\tself. \tself.config self.config= .config=self config=self. =self.make_config self.make_config( .make_config(instance_relative_config make_config(instance_relative_config) (instance_relative_config)\t instance_relative_config)\tself )\tself. \tself.view_functions self.view_functions= .view_functions={ view_functions={} ={}\t {}\tself }\tself. \tself.error_handler_spec self.error_handler_spec= .error_handler_spec={ error_handler_spec={} ={}\t {}\tself }\tself. \tself.url_build_error_handlers self.url_build_error_handlers= .url_build_error_handlers=[ url_build_error_handlers=[] =[]\t []\tself ]\tself. \tself.before_request_funcs self.before_request_funcs= .before_request_funcs={ before_request_funcs={} ={}\t {}\tself }\tself. \tself.before_first_request_funcs self.before_first_request_funcs= .before_first_request_funcs=[ before_first_request_funcs=[] =[]\t []\tself ]\tself. \tself.after_request_funcs self.after_request_funcs= .after_request_funcs={ after_request_funcs={} ={}\t {}\tself }\tself. \tself.teardown_request_funcs self.teardown_request_funcs= .teardown_request_funcs={ teardown_request_funcs={} ={}\t {}\tself }\tself. \tself.teardown_appcontext_funcs self.teardown_appcontext_funcs= .teardown_appcontext_funcs=[ teardown_appcontext_funcs=[] =[]\t []\tself ]\tself. \tself.url_value_preprocessors self.url_value_preprocessors= .url_value_preprocessors={ url_value_preprocessors={} ={}\t {}\tself }\tself. \tself.url_default_functions self.url_default_functions= .url_default_functions={ url_default_functions={} ={}\t {}\tself }\tself. \tself.template_context_processors self.template_context_processors= .template_context_processors={ template_context_processors={None ={None: {None:[ None:[_default_template_ctx_processor :[_default_template_ctx_processor] [_default_template_ctx_processor]} _default_template_ctx_processor]}\t ]}\tself }\tself. \tself.shell_context_processors self.shell_context_processors= .shell_context_processors=[ shell_context_processors=[] =[]\t []\tself ]\tself. \tself.blueprints self.blueprints= .blueprints={ blueprints={} ={}\t {}\tself }\tself. \tself._blueprint_order self._blueprint_order= ._blueprint_order=[ _blueprint_order=[] =[]\t []\tself ]\tself. \tself.extensions self.extensions= .extensions={ extensions={} ={}\t {}\tself }\tself. \tself.url_map self.url_map= .url_map=self url_map=self. =self.url_map_class self.url_map_class( .url_map_class() url_map_class()\t ()\tself )\tself. \tself.url_map self.url_map. .url_map.host_matching url_map.host_matching= .host_matching=host_matching host_matching=host_matching\t =host_matching\tself host_matching\tself. \tself.subdomain_matching self.subdomain_matching= .subdomain_matching=subdomain_matching subdomain_matching=subdomain_matching\t =subdomain_matching\tself subdomain_matching\tself. \tself._got_first_request self._got_first_request= ._got_first_request=False _got_first_request=False\t =False\tself False\tself. \tself._before_request_lock self._before_request_lock= ._before_request_lock=Lock _before_request_lock=Lock( =Lock() Lock()\t ()\tif )\tifself \tifself. ifself.has_static_folder self.has_static_folder: .has_static_folder:\t has_static_folder:\t\t\t\t :\t\t\t\tassert \t\t\t\tassert( \t\t\tassert(bool assert(bool( (bool(static_host bool(static_host) (static_host)== static_host)==host_matching )==host_matching) ==host_matching), host_matching),\"Invalid static_host/host_matching combination\" ),\"Invalid static_host/host_matching combination\"\t ,\"Invalid static_host/host_matching combination\"\tself \"Invalid static_host/host_matching combination\"\tself. \tself.add_url_rule self.add_url_rule( .add_url_rule(self add_url_rule(self. (self.static_url_path self.static_url_path+ .static_url_path+\"/<path:filename>\" static_url_path+\"/<path:filename>\", +\"/<path:filename>\",endpoint \"/<path:filename>\",endpoint= ,endpoint=\"static\" endpoint=\"static\", =\"static\",host \"static\",host= ,host=static_host host=static_host, =static_host,view_func static_host,view_func= ,view_func=self view_func=self. =self.send_static_file self.send_static_file, .send_static_file,) send_static_file,)\t ,)\t\t )\t\tself \t\tself. \tself.cli self.cli. .cli.name cli.name= .name=self name=self. =self.name self.name\t .name\t\t name\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdefname \tdefname( defname(self name(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\tif \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\tifself \tifself. ifself.import_name self.import_name== .import_name==\"__main__\" import_name==\"__main__\": ==\"__main__\":\t \"__main__\":\t\t\t\t :\t\t\t\tfn \t\t\t\tfn= \t\t\tfn=getattr fn=getattr( =getattr(sys getattr(sys. (sys.modules sys.modules[ .modules[\"__main__\" modules[\"__main__\"] [\"__main__\"], \"__main__\"],\"__file__\" ],\"__file__\", ,\"__file__\",None \"__file__\",None) ,None)\t None)\tif )\tiffn \tiffnis iffnisNone fnisNone: isNone:\t None:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturn\"__main__\" \t\t\t\treturn\"__main__\"\t return\"__main__\"\t\t \"__main__\"\t\treturn \t\treturnos \treturnos. returnos.path os.path. .path.splitext path.splitext( .splitext(os splitext(os. (os.path os.path. .path.basename path.basename( .basename(fn basename(fn) (fn)) fn))[ ))[0 )[0] [0]\t 0]\t\t ]\t\treturn \t\treturnself \treturnself. returnself.import_name self.import_name\t .import_name\t\t import_name\t\t@ \t\t@property \t@property\t @property\tdef property\tdefpropagate_exceptions \tdefpropagate_exceptions( defpropagate_exceptions(self propagate_exceptions(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"PROPAGATE_EXCEPTIONS\" config[\"PROPAGATE_EXCEPTIONS\"] [\"PROPAGATE_EXCEPTIONS\"]\t \"PROPAGATE_EXCEPTIONS\"]\tif ]\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnrv \t\t\treturnrv\t returnrv\t\t rv\t\treturn \t\treturnself \treturnself. returnself.testing self.testingor .testingorself testingorself. orself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@property \t@property\t @property\tdef property\tdefpreserve_context_on_exception \tdefpreserve_context_on_exception( defpreserve_context_on_exception(self preserve_context_on_exception(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"PRESERVE_CONTEXT_ON_EXCEPTION\" config[\"PRESERVE_CONTEXT_ON_EXCEPTION\"] [\"PRESERVE_CONTEXT_ON_EXCEPTION\"]\t \"PRESERVE_CONTEXT_ON_EXCEPTION\"]\tif ]\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnrv \t\t\treturnrv\t returnrv\t\t rv\t\treturn \t\treturnself \treturnself. returnself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdeflogger \tdeflogger( deflogger(self logger(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\treturn \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\treturncreate_logger \treturncreate_logger( returncreate_logger(self create_logger(self) (self)\t self)\t\t )\t\t@ \t\t@locked_cached_property \t@locked_cached_property\t @locked_cached_property\tdef locked_cached_property\tdefjinja_env \tdefjinja_env( defjinja_env(self jinja_env(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\" \t\t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\t \t\t\"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\treturn \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\treturnself \treturnself. returnself.create_jinja_environment self.create_jinja_environment( .create_jinja_environment() create_jinja_environment()\t ()\t\t )\t\t@ \t\t@property \t@property\t @property\tdef property\tdefgot_first_request \tdefgot_first_request( defgot_first_request(self got_first_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\treturn \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\treturnself \treturnself. returnself._got_first_request self._got_first_request\t ._got_first_request\t\t _got_first_request\t\tdef \t\tdefmake_config \tdefmake_config( defmake_config(self make_config(self, (self,instance_relative self,instance_relative= ,instance_relative=False instance_relative=False) =False): False):\t ):\t\t\t :\t\t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\troot_path \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\troot_path= \troot_path=self root_path=self. =self.root_path self.root_path\t .root_path\tif root_path\tifinstance_relative \tifinstance_relative: ifinstance_relative:\t instance_relative:\t\t\t\t :\t\t\t\troot_path \t\t\t\troot_path= \t\t\troot_path=self root_path=self. =self.instance_path self.instance_path\t .instance_path\t\t instance_path\t\tdefaults \t\tdefaults= \tdefaults=dict defaults=dict( =dict(self dict(self. (self.default_config self.default_config) .default_config)\t default_config)\tdefaults )\tdefaults[ \tdefaults[\"ENV\" defaults[\"ENV\"] [\"ENV\"]= \"ENV\"]=get_env ]=get_env( =get_env() get_env()\t ()\tdefaults )\tdefaults[ \tdefaults[\"DEBUG\" defaults[\"DEBUG\"] [\"DEBUG\"]= \"DEBUG\"]=get_debug_flag ]=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\treturn )\treturnself \treturnself. returnself.config_class self.config_class( .config_class(root_path config_class(root_path, (root_path,defaults root_path,defaults) ,defaults)\t defaults)\t\t )\t\tdef \t\tdefauto_find_instance_path \tdefauto_find_instance_path( defauto_find_instance_path(self auto_find_instance_path(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\tprefix \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\tprefix, \tprefix,package_path prefix,package_path= ,package_path=find_package package_path=find_package( =find_package(self find_package(self. (self.import_name self.import_name) .import_name)\t import_name)\tif )\tifprefix \tifprefixis ifprefixisNone prefixisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnos \t\t\treturnos. returnos.path os.path. .path.join path.join( .join(package_path join(package_path, (package_path,\"instance\" package_path,\"instance\") ,\"instance\")\t \"instance\")\t\t )\t\treturn \t\treturnos \treturnos. returnos.path os.path. .path.join path.join( .join(prefix join(prefix, (prefix,\"var\" prefix,\"var\", ,\"var\",self \"var\",self. ,self.name self.name+ .name+\"-instance\" name+\"-instance\") +\"-instance\")\t \"-instance\")\t\t )\t\tdef \t\tdefopen_instance_resource \tdefopen_instance_resource( defopen_instance_resource(self open_instance_resource(self, (self,resource self,resource, ,resource,mode resource,mode= ,mode=\"rb\" mode=\"rb\") =\"rb\"): \"rb\"):\t ):\t\t\t :\t\t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\" \t\t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\t \t\t\"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\treturn \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\treturnopen \treturnopen( returnopen(os open(os. (os.path os.path. .path.join path.join( .join(self join(self. (self.instance_path self.instance_path, .instance_path,resource instance_path,resource) ,resource), resource),mode ),mode) ,mode)\t mode)\t\t )\t\t@ \t\t@property \t@property\t @property\tdef property\tdeftemplates_auto_reload \tdeftemplates_auto_reload( deftemplates_auto_reload(self templates_auto_reload(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\" \t\t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\t \t\t\"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\trv \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\trv= \trv=self rv=self. =self.config self.config[ .config[\"TEMPLATES_AUTO_RELOAD\" config[\"TEMPLATES_AUTO_RELOAD\"] [\"TEMPLATES_AUTO_RELOAD\"]\t \"TEMPLATES_AUTO_RELOAD\"]\treturn ]\treturnrv \treturnrvif returnrvifrv rvifrvis ifrvisnot rvisnotNone isnotNoneelse notNoneelseself Noneelseself. elseself.debug self.debug\t .debug\t\t debug\t\t@ \t\t@templates_auto_reload \t@templates_auto_reload. @templates_auto_reload.setter templates_auto_reload.setter\t .setter\tdef setter\tdeftemplates_auto_reload \tdeftemplates_auto_reload( deftemplates_auto_reload(self templates_auto_reload(self, (self,value self,value) ,value): value):\t ):\t\t\t :\t\t\tself \t\t\tself. \t\tself.config self.config[ .config[\"TEMPLATES_AUTO_RELOAD\" config[\"TEMPLATES_AUTO_RELOAD\"] [\"TEMPLATES_AUTO_RELOAD\"]= \"TEMPLATES_AUTO_RELOAD\"]=value ]=value\t =value\t\t value\t\tdef \t\tdefcreate_jinja_environment \tdefcreate_jinja_environment( defcreate_jinja_environment(self create_jinja_environment(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\" \t\t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\t \t\t\"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\toptions \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\toptions= \toptions=dict options=dict( =dict(self dict(self. (self.jinja_options self.jinja_options) .jinja_options)\t jinja_options)\tif )\tif\"autoescape\" \tif\"autoescape\"not if\"autoescape\"notin \"autoescape\"notinoptions notinoptions: inoptions:\t options:\t\t\t\t :\t\t\t\toptions \t\t\t\toptions[ \t\t\toptions[\"autoescape\" options[\"autoescape\"] [\"autoescape\"]= \"autoescape\"]=self ]=self. =self.select_jinja_autoescape self.select_jinja_autoescape\t .select_jinja_autoescape\t\t select_jinja_autoescape\t\tif \t\tif\"auto_reload\" \tif\"auto_reload\"not if\"auto_reload\"notin \"auto_reload\"notinoptions notinoptions: inoptions:\t options:\t\t\t\t :\t\t\t\toptions \t\t\t\toptions[ \t\t\toptions[\"auto_reload\" options[\"auto_reload\"] [\"auto_reload\"]= \"auto_reload\"]=self ]=self. =self.templates_auto_reload self.templates_auto_reload\t .templates_auto_reload\t\t templates_auto_reload\t\trv \t\trv= \trv=self rv=self. =self.jinja_environment self.jinja_environment( .jinja_environment(self jinja_environment(self, (self,** self,**options ,**options) **options)\t options)\trv )\trv. \trv.globals rv.globals. .globals.update globals.update( .update(url_for update(url_for= (url_for=url_for url_for=url_for, =url_for,get_flashed_messages url_for,get_flashed_messages= ,get_flashed_messages=get_flashed_messages get_flashed_messages=get_flashed_messages, =get_flashed_messages,config get_flashed_messages,config= ,config=self config=self. =self.config self.config, .config,request config,request= ,request=request request=request, =request,session request,session= ,session=session session=session, =session,g session,g= ,g=g g=g, =g,) g,)\t ,)\trv )\trv. \trv.filters rv.filters[ .filters[\"tojson\" filters[\"tojson\"] [\"tojson\"]= \"tojson\"]=json ]=json. =json.tojson_filter json.tojson_filter\t .tojson_filter\treturn tojson_filter\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefcreate_global_jinja_loader \tdefcreate_global_jinja_loader( defcreate_global_jinja_loader(self create_global_jinja_loader(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\treturn \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\treturnDispatchingJinjaLoader \treturnDispatchingJinjaLoader( returnDispatchingJinjaLoader(self DispatchingJinjaLoader(self) (self)\t self)\t\t )\t\tdef \t\tdefselect_jinja_autoescape \tdefselect_jinja_autoescape( defselect_jinja_autoescape(self select_jinja_autoescape(self, (self,filename self,filename) ,filename): filename):\t ):\t\t\t :\t\t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\" \t\t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\t \t\t\"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\tif \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\tiffilename \tiffilenameis iffilenameisNone filenameisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\treturn \t\treturnfilename \treturnfilename. returnfilename.endswith filename.endswith( .endswith(( endswith((\".html\" ((\".html\", (\".html\",\".htm\" \".html\",\".htm\", ,\".htm\",\".xml\" \".htm\",\".xml\", ,\".xml\",\".xhtml\" \".xml\",\".xhtml\") ,\".xhtml\")) \".xhtml\"))\t ))\t\t )\t\tdef \t\tdefupdate_template_context \tdefupdate_template_context( defupdate_template_context(self update_template_context(self, (self,context self,context) ,context): context):\t ):\t\t\t :\t\t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\" \t\t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\t \t\t\"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\tfuncs \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\tfuncs= \tfuncs=self funcs=self. =self.template_context_processors self.template_context_processors[ .template_context_processors[None template_context_processors[None] [None]\t None]\treqctx ]\treqctx= \treqctx=_request_ctx_stack reqctx=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top\t .top\tif top\tifreqctx \tifreqctxis ifreqctxisnot reqctxisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tbp \t\t\t\tbp= \t\t\tbp=reqctx bp=reqctx. =reqctx.request reqctx.request. .request.blueprint request.blueprint\t .blueprint\tif blueprint\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.template_context_processors self.template_context_processors: .template_context_processors:\t template_context_processors:\t\t\t\t\t :\t\t\t\t\tfuncs \t\t\t\t\tfuncs= \t\t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.template_context_processors self.template_context_processors[ .template_context_processors[bp template_context_processors[bp] [bp]) bp])\t ])\t\t )\t\t\t \t\t\torig_ctx \t\torig_ctx= \torig_ctx=context orig_ctx=context. =context.copy context.copy( .copy() copy()\t ()\tfor )\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tcontext \t\t\t\tcontext. \t\t\tcontext.update context.update( .update(func update(func( (func() func()) ())\t ))\t\t )\t\tcontext \t\tcontext. \tcontext.update context.update( .update(orig_ctx update(orig_ctx) (orig_ctx)\t orig_ctx)\t\t )\t\tdef \t\tdefmake_shell_context \tdefmake_shell_context( defmake_shell_context(self make_shell_context(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\trv \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\trv= \trv={ rv={\"app\" ={\"app\": {\"app\":self \"app\":self, :self,\"g\" self,\"g\": ,\"g\":g \"g\":g} :g}\t g}\tfor }\tforprocessor \tforprocessorin forprocessorinself processorinself. inself.shell_context_processors self.shell_context_processors: .shell_context_processors:\t shell_context_processors:\t\t\t\t :\t\t\t\trv \t\t\t\trv. \t\t\trv.update rv.update( .update(processor update(processor( (processor() processor()) ())\t ))\t\t )\t\treturn \t\treturnrv \treturnrv\t returnrv\t\t rv\t\tenv \t\tenv= \tenv=ConfigAttribute env=ConfigAttribute( =ConfigAttribute(\"ENV\" ConfigAttribute(\"ENV\") (\"ENV\")\t \"ENV\")\t@ )\t@property \t@property\t @property\tdef property\tdefdebug \tdefdebug( defdebug(self debug(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\" \t\t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\t \t\t\"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\treturn \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\treturnself \treturnself. returnself.config self.config[ .config[\"DEBUG\" config[\"DEBUG\"] [\"DEBUG\"]\t \"DEBUG\"]\t\t ]\t\t@ \t\t@debug \t@debug. @debug.setter debug.setter\t .setter\tdef setter\tdefdebug \tdefdebug( defdebug(self debug(self, (self,value self,value) ,value): value):\t ):\t\t\t :\t\t\tself \t\t\tself. \t\tself.config self.config[ .config[\"DEBUG\" config[\"DEBUG\"] [\"DEBUG\"]= \"DEBUG\"]=value ]=value\t =value\tself value\tself. \tself.jinja_env self.jinja_env. .jinja_env.auto_reload jinja_env.auto_reload= .auto_reload=self auto_reload=self. =self.templates_auto_reload self.templates_auto_reload\t .templates_auto_reload\t\t templates_auto_reload\t\tdef \t\tdefrun \tdefrun( defrun(self run(self, (self,host self,host= ,host=None host=None, =None,port None,port= ,port=None port=None, =None,debug None,debug= ,debug=None debug=None, =None,load_dotenv None,load_dotenv= ,load_dotenv=True load_dotenv=True, =True,** True,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\" \t\t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\t \t\t\"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\tif \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\tifos \tifos. ifos.environ os.environ. .environ.get environ.get( .get(\"FLASK_RUN_FROM_CLI\" get(\"FLASK_RUN_FROM_CLI\") (\"FLASK_RUN_FROM_CLI\")== \"FLASK_RUN_FROM_CLI\")==\"true\" )==\"true\": ==\"true\":\t \"true\":\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.debughelpers from.debughelpersimport .debughelpersimportexplain_ignored_app_run debughelpersimportexplain_ignored_app_run\t importexplain_ignored_app_run\texplain_ignored_app_run explain_ignored_app_run\texplain_ignored_app_run( \texplain_ignored_app_run() explain_ignored_app_run()\t ()\treturn )\treturn\t \treturn\t\t return\t\tif \t\tifget_load_dotenv \tifget_load_dotenv( ifget_load_dotenv(load_dotenv get_load_dotenv(load_dotenv) (load_dotenv): load_dotenv):\t ):\t\t\t\t :\t\t\t\tcli \t\t\t\tcli. \t\t\tcli.load_dotenv cli.load_dotenv( .load_dotenv() load_dotenv()\t ()\tif )\tif\"FLASK_ENV\" \tif\"FLASK_ENV\"in if\"FLASK_ENV\"inos \"FLASK_ENV\"inos. inos.environ os.environ: .environ:\t environ:\t\t\t\t\t :\t\t\t\t\tself \t\t\t\t\tself. \t\t\t\tself.env self.env= .env=get_env env=get_env( =get_env() get_env()\t ()\tself )\tself. \tself.debug self.debug= .debug=get_debug_flag debug=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\t\t )\t\telif \t\telif\"FLASK_DEBUG\" \telif\"FLASK_DEBUG\"in elif\"FLASK_DEBUG\"inos \"FLASK_DEBUG\"inos. inos.environ os.environ: .environ:\t environ:\t\t\t\t\t :\t\t\t\t\tself \t\t\t\t\tself. \t\t\t\tself.debug self.debug= .debug=get_debug_flag debug=get_debug_flag( =get_debug_flag() get_debug_flag()\t ()\t\t )\t\t\t \t\t\tif \t\tifdebug \tifdebugis ifdebugisnot debugisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.debug self.debug= .debug=bool debug=bool( =bool(debug bool(debug) (debug)\t debug)\t\t )\t\t_host \t\t_host= \t_host=\"127.0.0.1\" _host=\"127.0.0.1\"\t =\"127.0.0.1\"\t_port \"127.0.0.1\"\t_port= \t_port=5000 _port=5000\t =5000\tserver_name 5000\tserver_name= \tserver_name=self server_name=self. =self.config self.config. .config.get config.get( .get(\"SERVER_NAME\" get(\"SERVER_NAME\") (\"SERVER_NAME\")\t \"SERVER_NAME\")\tsn_host )\tsn_host, \tsn_host,sn_port sn_host,sn_port= ,sn_port=None sn_port=None, =None,None None,None\t ,None\tif None\tifserver_name \tifserver_name: ifserver_name:\t server_name:\t\t\t\t :\t\t\t\tsn_host \t\t\t\tsn_host, \t\t\tsn_host,_ sn_host,_, ,_,sn_port _,sn_port= ,sn_port=server_name sn_port=server_name. =server_name.partition server_name.partition( .partition(\":\" partition(\":\") (\":\")\t \":\")\t\t )\t\thost \t\thost= \thost=host host=hostor =hostorsn_host hostorsn_hostor orsn_hostor_host sn_hostor_host\t or_host\tport _host\tport= \tport=int port=int( =int(next int(next( (next(( next((p ((pfor (pforp pforpin forpin( pin(port in(port, (port,sn_port port,sn_port) ,sn_port)if sn_port)ifp )ifpis ifpisnot pisnotNone isnotNone) notNone), None),_port ),_port) ,_port)) _port))\t ))\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"use_reloader\" setdefault(\"use_reloader\", (\"use_reloader\",self \"use_reloader\",self. ,self.debug self.debug) .debug)\t debug)\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"use_debugger\" setdefault(\"use_debugger\", (\"use_debugger\",self \"use_debugger\",self. ,self.debug self.debug) .debug)\t debug)\toptions )\toptions. \toptions.setdefault options.setdefault( .setdefault(\"threaded\" setdefault(\"threaded\", (\"threaded\",True \"threaded\",True) ,True)\t True)\tcli )\tcli. \tcli.show_server_banner cli.show_server_banner( .show_server_banner(self show_server_banner(self. (self.env self.env, .env,self env,self. ,self.debug self.debug, .debug,self debug,self. ,self.name self.name, .name,False name,False) ,False)\t False)\tfrom )\tfromwerkzeug \tfromwerkzeug. fromwerkzeug.serving werkzeug.servingimport .servingimportrun_simple servingimportrun_simple\t importrun_simple\ttry run_simple\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\trun_simple \t\t\t\trun_simple( \t\t\trun_simple(host run_simple(host, (host,port host,port, ,port,self port,self, ,self,** self,**options ,**options) **options)\t options)\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself._got_first_request self._got_first_request= ._got_first_request=False _got_first_request=False\t =False\t\t False\t\t\t \t\t\tdef \t\tdeftest_client \tdeftest_client( deftest_client(self test_client(self, (self,use_cookies self,use_cookies= ,use_cookies=True use_cookies=True, =True,** True,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\" \t\t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\t \t\t\"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\tcls \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\tcls= \tcls=self cls=self. =self.test_client_class self.test_client_class\t .test_client_class\tif test_client_class\tifcls \tifclsis ifclsisNone clsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.testing from.testingimport .testingimportFlaskClient testingimportFlaskClientas importFlaskClientascls FlaskClientascls\t ascls\t\t cls\t\treturn \t\treturncls \treturncls( returncls(self cls(self, (self,self self,self. ,self.response_class self.response_class, .response_class,use_cookies response_class,use_cookies= ,use_cookies=use_cookies use_cookies=use_cookies, =use_cookies,** use_cookies,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\tdef \t\tdeftest_cli_runner \tdeftest_cli_runner( deftest_cli_runner(self test_cli_runner(self, (self,** self,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\" \t\t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\t \t\t\"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\tcls \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\tcls= \tcls=self cls=self. =self.test_cli_runner_class self.test_cli_runner_class\t .test_cli_runner_class\tif test_cli_runner_class\tifcls \tifclsis ifclsisNone clsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tfrom \t\t\t\tfrom. \t\t\tfrom.testing from.testingimport .testingimportFlaskCliRunner testingimportFlaskCliRunneras importFlaskCliRunnerascls FlaskCliRunnerascls\t ascls\t\t cls\t\treturn \t\treturncls \treturncls( returncls(self cls(self, (self,** self,**kwargs ,**kwargs) **kwargs)\t kwargs)\t\t )\t\tdef \t\tdefopen_session \tdefopen_session( defopen_session(self open_session(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\" \t\t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\t \t\t\"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\twarnings \"\"\"Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"open_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.' ('\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.') '\"open_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.open_session\" instead.')) ' \"session_interface.open_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.open_session session_interface.open_session( .open_session(self open_session(self, (self,request self,request) ,request)\t request)\t\t )\t\tdef \t\tdefsave_session \tdefsave_session( defsave_session(self save_session(self, (self,session self,session, ,session,response session,response) ,response): response):\t ):\t\t\t :\t\t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\" \t\t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\t \t\t\"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\twarnings \"\"\"Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"save_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.' ('\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.') '\"save_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.save_session\" instead.')) ' \"session_interface.save_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.save_session session_interface.save_session( .save_session(self save_session(self, (self,session self,session, ,session,response session,response) ,response)\t response)\t\t )\t\tdef \t\tdefmake_null_session \tdefmake_null_session( defmake_null_session(self make_null_session(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\twarnings \"\"\"Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        \"\"\"\twarnings. \twarnings.warn warnings.warn( .warn(DeprecationWarning warn(DeprecationWarning( (DeprecationWarning('\"make_null_session\" is deprecated and will be removed in 1.1. Use' DeprecationWarning('\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.' ('\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.') '\"make_null_session\" is deprecated and will be removed in 1.1. Use'' \"session_interface.make_null_session\" instead.')) ' \"session_interface.make_null_session\" instead.'))\t ))\treturn )\treturnself \treturnself. returnself.session_interface self.session_interface. .session_interface.make_null_session session_interface.make_null_session( .make_null_session(self make_null_session(self) (self)\t self)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefregister_blueprint \tdefregister_blueprint( defregister_blueprint(self register_blueprint(self, (self,blueprint self,blueprint, ,blueprint,** blueprint,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfirst_registration \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfirst_registration= \tfirst_registration=False first_registration=False\t =False\tif False\tifblueprint \tifblueprint. ifblueprint.name blueprint.namein .nameinself nameinself. inself.blueprints self.blueprints: .blueprints:\t blueprints:\t\t\t\t :\t\t\t\tassert \t\t\t\tassertself \t\t\tassertself. assertself.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name]is name]isblueprint ]isblueprint, isblueprint,( blueprint,(\"A name collision occurred between blueprints %r and %r. Both\" ,(\"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the' (\"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\" \"A name collision occurred between blueprints %r and %r. Both\"' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\"% ' share the same name \"%s\". Blueprints that are created on the'\" fly need unique names.\"%( \" fly need unique names.\"%(blueprint %(blueprint, (blueprint,self blueprint,self. ,self.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name], name],blueprint ],blueprint. ,blueprint.name blueprint.name) .name)) name))\t ))\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.blueprints self.blueprints[ .blueprints[blueprint blueprints[blueprint. [blueprint.name blueprint.name] .name]= name]=blueprint ]=blueprint\t =blueprint\tself blueprint\tself. \tself._blueprint_order self._blueprint_order. ._blueprint_order.append _blueprint_order.append( .append(blueprint append(blueprint) (blueprint)\t blueprint)\tfirst_registration )\tfirst_registration= \tfirst_registration=True first_registration=True\t =True\t\t True\t\tblueprint \t\tblueprint. \tblueprint.register blueprint.register( .register(self register(self, (self,options self,options, ,options,first_registration options,first_registration) ,first_registration)\t first_registration)\t\t )\t\tdef \t\tdefiter_blueprints \tdefiter_blueprints( defiter_blueprints(self iter_blueprints(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\treturn \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\treturniter \treturniter( returniter(self iter(self. (self._blueprint_order self._blueprint_order) ._blueprint_order)\t _blueprint_order)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_url_rule \tdefadd_url_rule( defadd_url_rule(self add_url_rule(self, (self,rule self,rule, ,rule,endpoint rule,endpoint= ,endpoint=None endpoint=None, =None,view_func None,view_func= ,view_func=None view_func=None, =None,provide_automatic_options None,provide_automatic_options= ,provide_automatic_options=None provide_automatic_options=None, =None,** None,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t\t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\t \t\t\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tif \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tifendpoint \tifendpointis ifendpointisNone endpointisNone: isNone:\t None:\t\t\t\t :\t\t\t\tendpoint \t\t\t\tendpoint= \t\t\tendpoint=_endpoint_from_view_func endpoint=_endpoint_from_view_func( =_endpoint_from_view_func(view_func _endpoint_from_view_func(view_func) (view_func)\t view_func)\t\t )\t\toptions \t\toptions[ \toptions[\"endpoint\" options[\"endpoint\"] [\"endpoint\"]= \"endpoint\"]=endpoint ]=endpoint\t =endpoint\tmethods endpoint\tmethods= \tmethods=options methods=options. =options.pop options.pop( .pop(\"methods\" pop(\"methods\", (\"methods\",None \"methods\",None) ,None)\t None)\tif )\tifmethods \tifmethodsis ifmethodsisNone methodsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tmethods \t\t\t\tmethods= \t\t\tmethods=getattr methods=getattr( =getattr(view_func getattr(view_func, (view_func,\"methods\" view_func,\"methods\", ,\"methods\",None \"methods\",None) ,None)or None)or( )or(\"GET\" or(\"GET\", (\"GET\",) \"GET\",)\t ,)\t\t )\t\tif \t\tifisinstance \tifisinstance( ifisinstance(methods isinstance(methods, (methods,string_types methods,string_types) ,string_types): string_types):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseTypeError \t\t\traiseTypeError( raiseTypeError(\"Allowed methods have to be iterables of strings, \" TypeError(\"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])' (\"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])') \"Allowed methods have to be iterables of strings, \"'for example: @app.route(..., methods=[\"POST\"])')\t 'for example: @app.route(..., methods=[\"POST\"])')\t\t )\t\tmethods \t\tmethods= \tmethods=set methods=set( =set(item set(item. (item.upper item.upper( .upper() upper()for ()foritem )foritemin foriteminmethods iteminmethods) inmethods)\t methods)\trequired_methods )\trequired_methods= \trequired_methods=set required_methods=set( =set(getattr set(getattr( (getattr(view_func getattr(view_func, (view_func,\"required_methods\" view_func,\"required_methods\", ,\"required_methods\",( \"required_methods\",() ,()) ())) )))\t ))\tif )\tifprovide_automatic_options \tifprovide_automatic_optionsis ifprovide_automatic_optionsisNone provide_automatic_optionsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tprovide_automatic_options \t\t\t\tprovide_automatic_options= \t\t\tprovide_automatic_options=getattr provide_automatic_options=getattr( =getattr(view_func getattr(view_func, (view_func,\"provide_automatic_options\" view_func,\"provide_automatic_options\", ,\"provide_automatic_options\",None \"provide_automatic_options\",None) ,None)\t None)\t\t )\t\tif \t\tifprovide_automatic_options \tifprovide_automatic_optionsis ifprovide_automatic_optionsisNone provide_automatic_optionsisNone: isNone:\t None:\t\t\t\t :\t\t\t\tif \t\t\t\tif\"OPTIONS\" \t\t\tif\"OPTIONS\"not if\"OPTIONS\"notin \"OPTIONS\"notinmethods notinmethods: inmethods:\t methods:\t\t\t\t\t :\t\t\t\t\tprovide_automatic_options \t\t\t\t\tprovide_automatic_options= \t\t\t\tprovide_automatic_options=True provide_automatic_options=True\t =True\trequired_methods True\trequired_methods. \trequired_methods.add required_methods.add( .add(\"OPTIONS\" add(\"OPTIONS\") (\"OPTIONS\")\t \"OPTIONS\")\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\tprovide_automatic_options \t\t\t\t\tprovide_automatic_options= \t\t\t\tprovide_automatic_options=False provide_automatic_options=False\t =False\t\t False\t\t\t \t\t\tmethods \t\tmethods|= \tmethods|=required_methods methods|=required_methods\t |=required_methods\trule required_methods\trule= \trule=self rule=self. =self.url_rule_class self.url_rule_class( .url_rule_class(rule url_rule_class(rule, (rule,methods rule,methods= ,methods=methods methods=methods, =methods,** methods,**options ,**options) **options)\t options)\trule )\trule. \trule.provide_automatic_options rule.provide_automatic_options= .provide_automatic_options=provide_automatic_options provide_automatic_options=provide_automatic_options\t =provide_automatic_options\tself provide_automatic_options\tself. \tself.url_map self.url_map. .url_map.add url_map.add( .add(rule add(rule) (rule)\t rule)\tif )\tifview_func \tifview_funcis ifview_funcisnot view_funcisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\told_func \t\t\t\told_func= \t\t\told_func=self old_func=self. =self.view_functions self.view_functions. .view_functions.get view_functions.get( .get(endpoint get(endpoint) (endpoint)\t endpoint)\tif )\tifold_func \tifold_funcis ifold_funcisnot old_funcisnotNone isnotNoneand notNoneandold_func Noneandold_func!= andold_func!=view_func old_func!=view_func: !=view_func:\t view_func:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseAssertionError \t\t\t\traiseAssertionError( raiseAssertionError(\"View function mapping is overwriting an \" AssertionError(\"View function mapping is overwriting an \"\"existing endpoint function: %s\" (\"View function mapping is overwriting an \"\"existing endpoint function: %s\"% \"View function mapping is overwriting an \"\"existing endpoint function: %s\"%endpoint \"existing endpoint function: %s\"%endpoint) %endpoint)\t endpoint)\t\t )\t\tself \t\tself. \tself.view_functions self.view_functions[ .view_functions[endpoint view_functions[endpoint] [endpoint]= endpoint]=view_func ]=view_func\t =view_func\t\t view_func\t\t\t \t\t\tdef \t\tdefroute \tdefroute( defroute(self route(self, (self,rule self,rule, ,rule,** rule,**options ,**options) **options): options):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tdef \"\"\"A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tendpoint \t\t\t\tendpoint= \t\t\tendpoint=options endpoint=options. =options.pop options.pop( .pop(\"endpoint\" pop(\"endpoint\", (\"endpoint\",None \"endpoint\",None) ,None)\t None)\tself )\tself. \tself.add_url_rule self.add_url_rule( .add_url_rule(rule add_url_rule(rule, (rule,endpoint rule,endpoint, ,endpoint,f endpoint,f, ,f,** f,**options ,**options) **options)\t options)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefendpoint \tdefendpoint( defendpoint(self endpoint(self, (self,endpoint self,endpoint) ,endpoint): endpoint):\t ):\t\t\t :\t\t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\" \t\t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\t \t\t\"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\tdef \"\"\"A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.view_functions self.view_functions[ .view_functions[endpoint view_functions[endpoint] [endpoint]= endpoint]=f ]=f\t =f\treturn f\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@staticmethod \t@staticmethod\t @staticmethod\tdef staticmethod\tdef_get_exc_class_and_code \tdef_get_exc_class_and_code( def_get_exc_class_and_code(exc_class_or_code _get_exc_class_and_code(exc_class_or_code) (exc_class_or_code): exc_class_or_code):\t ):\t\t\t :\t\t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\" \t\t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\t \t\t\"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\tif \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\tifisinstance \tifisinstance( ifisinstance(exc_class_or_code isinstance(exc_class_or_code, (exc_class_or_code,integer_types exc_class_or_code,integer_types) ,integer_types): integer_types):\t ):\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class= \t\t\texc_class=default_exceptions exc_class=default_exceptions[ =default_exceptions[exc_class_or_code default_exceptions[exc_class_or_code] [exc_class_or_code]\t exc_class_or_code]\t\t ]\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class= \t\t\texc_class=exc_class_or_code exc_class=exc_class_or_code\t =exc_class_or_code\t\t exc_class_or_code\t\tassert \t\tassertissubclass \tassertissubclass( assertissubclass(exc_class issubclass(exc_class, (exc_class,Exception exc_class,Exception) ,Exception)\t Exception)\tif )\tifissubclass \tifissubclass( ifissubclass(exc_class issubclass(exc_class, (exc_class,HTTPException exc_class,HTTPException) ,HTTPException): HTTPException):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnexc_class \t\t\treturnexc_class, returnexc_class,exc_class exc_class,exc_class. ,exc_class.code exc_class.code\t .code\t\t code\t\telse \t\telse: \telse:\t else:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnexc_class \t\t\treturnexc_class, returnexc_class,None exc_class,None\t ,None\t\t None\t\t\t \t\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeferrorhandler \tdeferrorhandler( deferrorhandler(self errorhandler(self, (self,code_or_exception self,code_or_exception) ,code_or_exception): code_or_exception):\t ):\t\t\t :\t\t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\" \t\t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\t \t\t\"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\tdef \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself._register_error_handler self._register_error_handler( ._register_error_handler(None _register_error_handler(None, (None,code_or_exception None,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefregister_error_handler \tdefregister_error_handler( defregister_error_handler(self register_error_handler(self, (self,code_or_exception self,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself. \tself._register_error_handler self._register_error_handler( ._register_error_handler(None _register_error_handler(None, (None,code_or_exception None,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f)\t f)\t\t )\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdef_register_error_handler \tdef_register_error_handler( def_register_error_handler(self _register_error_handler(self, (self,key self,key, ,key,code_or_exception key,code_or_exception, ,code_or_exception,f code_or_exception,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\" \t\t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\t \t\t\"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\tif \"\"\"\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        \"\"\"\tifisinstance \tifisinstance( ifisinstance(code_or_exception isinstance(code_or_exception, (code_or_exception,HTTPException code_or_exception,HTTPException) ,HTTPException): HTTPException):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiseValueError \t\t\traiseValueError( raiseValueError(\"Tried to register a handler for an exception instance {0!r}.\" ValueError(\"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\" (\"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\"\" HTTP error codes.\" \"Tried to register a handler for an exception instance {0!r}.\"\" Handlers can only be registered for exception classes or\"\" HTTP error codes.\". \" Handlers can only be registered for exception classes or\"\" HTTP error codes.\".format \" HTTP error codes.\".format( .format(code_or_exception format(code_or_exception) (code_or_exception)) code_or_exception))\t ))\t\t )\t\ttry \t\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\texc_class \t\t\t\texc_class, \t\t\texc_class,code exc_class,code= ,code=self code=self. =self._get_exc_class_and_code self._get_exc_class_and_code( ._get_exc_class_and_code(code_or_exception _get_exc_class_and_code(code_or_exception) (code_or_exception)\t code_or_exception)\t\t )\t\texcept \t\texceptKeyError \texceptKeyError: exceptKeyError:\t KeyError:\t\t\t\t :\t\t\t\traise \t\t\t\traiseKeyError \t\t\traiseKeyError( raiseKeyError(\"'{0}' is not a recognized HTTP error code. Use a subclass of\" KeyError(\"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\" (\"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\". \"'{0}' is not a recognized HTTP error code. Use a subclass of\"\" HTTPException with that code instead.\".format \" HTTPException with that code instead.\".format( .format(code_or_exception format(code_or_exception) (code_or_exception)) code_or_exception))\t ))\t\t )\t\thandlers \t\thandlers= \thandlers=self handlers=self. =self.error_handler_spec self.error_handler_spec. .error_handler_spec.setdefault error_handler_spec.setdefault( .setdefault(key setdefault(key, (key,{ key,{} ,{}) {}). }).setdefault ).setdefault( .setdefault(code setdefault(code, (code,{ code,{} ,{}) {})\t })\thandlers )\thandlers[ \thandlers[exc_class handlers[exc_class] [exc_class]= exc_class]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_filter \tdeftemplate_filter( deftemplate_filter(self template_filter(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_filter self.add_template_filter( .add_template_filter(f add_template_filter(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_filter \tdefadd_template_filter( defadd_template_filter(self add_template_filter(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.filters jinja_env.filters[ .filters[name filters[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_test \tdeftemplate_test( deftemplate_test(self template_test(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_test self.add_template_test( .add_template_test(f add_template_test(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_test \tdefadd_template_test( defadd_template_test(self add_template_test(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.tests jinja_env.tests[ .tests[name tests[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdeftemplate_global \tdeftemplate_global( deftemplate_global(self template_global(self, (self,name self,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tdef \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tdefdecorator \tdefdecorator( defdecorator(f decorator(f) (f): f):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.add_template_global self.add_template_global( .add_template_global(f add_template_global(f, (f,name f,name= ,name=name name=name) =name)\t name)\treturn )\treturnf \treturnf\t returnf\t\t f\t\treturn \t\treturndecorator \treturndecorator\t returndecorator\t\t decorator\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefadd_template_global \tdefadd_template_global( defadd_template_global(self add_template_global(self, (self,f self,f, ,f,name f,name= ,name=None name=None) =None): None):\t ):\t\t\t :\t\t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\" \t\t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\t \t\t\"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tself \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\tself. \tself.jinja_env self.jinja_env. .jinja_env.globals jinja_env.globals[ .globals[name globals[nameor [nameorf nameorf. orf.__name__ f.__name__] .__name__]= __name__]=f ]=f\t =f\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefbefore_request \tdefbefore_request( defbefore_request(self before_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\" \t\t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\t \t\t\"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\tself \"\"\"Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        \"\"\"\tself. \tself.before_request_funcs self.before_request_funcs. .before_request_funcs.setdefault before_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefbefore_first_request \tdefbefore_first_request( defbefore_first_request(self before_first_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself. \tself.before_first_request_funcs self.before_first_request_funcs. .before_first_request_funcs.append before_first_request_funcs.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefafter_request \tdefafter_request( defafter_request(self after_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\" \t\t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\t \t\t\"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\tself \"\"\"Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        \"\"\"\tself. \tself.after_request_funcs self.after_request_funcs. .after_request_funcs.setdefault after_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefteardown_request \tdefteardown_request( defteardown_request(self teardown_request(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\" \t\t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\t \t\t\"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\tself \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\tself. \tself.teardown_request_funcs self.teardown_request_funcs. .teardown_request_funcs.setdefault teardown_request_funcs.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefteardown_appcontext \tdefteardown_appcontext( defteardown_appcontext(self teardown_appcontext(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\tself \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\tself. \tself.teardown_appcontext_funcs self.teardown_appcontext_funcs. .teardown_appcontext_funcs.append teardown_appcontext_funcs.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefcontext_processor \tdefcontext_processor( defcontext_processor(self context_processor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a template context processor function.\"\"\" \t\t\t\"\"\"Registers a template context processor function.\"\"\"\t \t\t\"\"\"Registers a template context processor function.\"\"\"\tself \"\"\"Registers a template context processor function.\"\"\"\tself. \tself.template_context_processors self.template_context_processors[ .template_context_processors[None template_context_processors[None] [None]. None].append ].append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefshell_context_processor \tdefshell_context_processor( defshell_context_processor(self shell_context_processor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\" \t\t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\t \t\t\"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\tself \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\tself. \tself.shell_context_processors self.shell_context_processors. .shell_context_processors.append shell_context_processors.append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefurl_value_preprocessor \tdefurl_value_preprocessor( defurl_value_preprocessor(self url_value_preprocessor(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\" \t\t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\t \t\t\"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\tself \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\tself. \tself.url_value_preprocessors self.url_value_preprocessors. .url_value_preprocessors.setdefault url_value_preprocessors.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\t@ \t\t@setupmethod \t@setupmethod\t @setupmethod\tdef setupmethod\tdefurl_defaults \tdefurl_defaults( defurl_defaults(self url_defaults(self, (self,f self,f) ,f): f):\t ):\t\t\t :\t\t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\" \t\t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\t \t\t\"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\tself \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\tself. \tself.url_default_functions self.url_default_functions. .url_default_functions.setdefault url_default_functions.setdefault( .setdefault(None setdefault(None, (None,[ None,[] ,[]) []). ]).append ).append( .append(f append(f) (f)\t f)\treturn )\treturnf \treturnf\t returnf\t\t f\t\tdef \t\tdef_find_error_handler \tdef_find_error_handler( def_find_error_handler(self _find_error_handler(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\" \t\t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\t \t\t\"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\texc_class \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\texc_class, \texc_class,code exc_class,code= ,code=self code=self. =self._get_exc_class_and_code self._get_exc_class_and_code( ._get_exc_class_and_code(type _get_exc_class_and_code(type( (type(e type(e) (e)) e))\t ))\tfor )\tforname \tforname, forname,c name,cin ,cin( cin(( in((request ((request. (request.blueprint request.blueprint, .blueprint,code blueprint,code) ,code), code),( ),(None ,(None, (None,code None,code) ,code), code),( ),(request ,(request. (request.blueprint request.blueprint, .blueprint,None blueprint,None) ,None), None),( ),(None ,(None, (None,None None,None) ,None), None),) ),): ,):\t ):\t\t\t\t :\t\t\t\thandler_map \t\t\t\thandler_map= \t\t\thandler_map=self handler_map=self. =self.error_handler_spec self.error_handler_spec. .error_handler_spec.setdefault error_handler_spec.setdefault( .setdefault(name setdefault(name, (name,{ name,{} ,{}) {}). }).get ).get( .get(c get(c) (c)\t c)\tif )\tifnot \tifnothandler_map ifnothandler_map: nothandler_map:\t handler_map:\t\t\t\t\t :\t\t\t\t\tcontinue \t\t\t\t\tcontinue\t \t\t\t\tcontinue\t\t continue\t\tfor \t\tforcls \tforclsin forclsinexc_class clsinexc_class. inexc_class.__mro__ exc_class.__mro__: .__mro__:\t __mro__:\t\t\t\t\t :\t\t\t\t\thandler \t\t\t\t\thandler= \t\t\t\thandler=handler_map handler=handler_map. =handler_map.get handler_map.get( .get(cls get(cls) (cls)\t cls)\tif )\tifhandler \tifhandleris ifhandlerisnot handlerisnotNone isnotNone: notNone:\t None:\t\t\t\t\t\t :\t\t\t\t\t\treturn \t\t\t\t\t\treturnhandler \t\t\t\t\treturnhandler\t returnhandler\t\t handler\t\t\t \t\t\t\t \t\t\t\t \t\t\tdef \t\tdefhandle_http_exception \tdefhandle_http_exception( defhandle_http_exception(self handle_http_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\tif \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\tife \tife. ife.code e.codeis .codeisNone codeisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\tif \t\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,RoutingException e,RoutingException) ,RoutingException): RoutingException):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\thandler \t\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(e _find_error_handler(e) (e)\t e)\tif )\tifhandler \tifhandleris ifhandlerisNone handlerisNone: isNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturne \t\t\treturne\t returne\t\t e\t\treturn \t\treturnhandler \treturnhandler( returnhandler(e handler(e) (e)\t e)\t\t )\t\tdef \t\tdeftrap_http_exception \tdeftrap_http_exception( deftrap_http_exception(self trap_http_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\tif \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\tifself \tifself. ifself.config self.config[ .config[\"TRAP_HTTP_EXCEPTIONS\" config[\"TRAP_HTTP_EXCEPTIONS\"] [\"TRAP_HTTP_EXCEPTIONS\"]: \"TRAP_HTTP_EXCEPTIONS\"]:\t ]:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\ttrap_bad_request \t\ttrap_bad_request= \ttrap_bad_request=self trap_bad_request=self. =self.config self.config[ .config[\"TRAP_BAD_REQUEST_ERRORS\" config[\"TRAP_BAD_REQUEST_ERRORS\"] [\"TRAP_BAD_REQUEST_ERRORS\"]\t \"TRAP_BAD_REQUEST_ERRORS\"]\tif ]\tif( \tif(trap_bad_request if(trap_bad_requestis (trap_bad_requestisNone trap_bad_requestisNoneand isNoneandself Noneandself. andself.debug self.debugand .debugandisinstance debugandisinstance( andisinstance(e isinstance(e, (e,BadRequestKeyError e,BadRequestKeyError) ,BadRequestKeyError)) BadRequestKeyError)): )):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnTrue \t\t\treturnTrue\t returnTrue\t\t True\t\tif \t\tiftrap_bad_request \tiftrap_bad_request: iftrap_bad_request:\t trap_bad_request:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnisinstance \t\t\treturnisinstance( returnisinstance(e isinstance(e, (e,BadRequest e,BadRequest) ,BadRequest)\t BadRequest)\t\t )\t\treturn \t\treturnFalse \treturnFalse\t returnFalse\t\t False\t\tdef \t\tdefhandle_user_exception \tdefhandle_user_exception( defhandle_user_exception(self handle_user_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\texc_type \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tassert )\tassertexc_value \tassertexc_valueis assertexc_valueise exc_valueise\t ise\tif e\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,BadRequestKeyError e,BadRequestKeyError) ,BadRequestKeyError): BadRequestKeyError):\t ):\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself.debug self.debugor .debugorself debugorself. orself.config self.config[ .config[\"TRAP_BAD_REQUEST_ERRORS\" config[\"TRAP_BAD_REQUEST_ERRORS\"] [\"TRAP_BAD_REQUEST_ERRORS\"]: \"TRAP_BAD_REQUEST_ERRORS\"]:\t ]:\t\t\t\t\t :\t\t\t\t\te \t\t\t\t\te. \t\t\t\te.show_exception e.show_exception= .show_exception=True show_exception=True\t =True\tif True\tife \tife. ife.args e.args[ .args[0 args[0] [0]not 0]notin ]notine notine. ine.get_description e.get_description( .get_description() get_description(): ():\t ):\t\t\t\t\t\t :\t\t\t\t\t\te \t\t\t\t\t\te. \t\t\t\t\te.description e.description= .description=\"KeyError: '{}'\" description=\"KeyError: '{}'\". =\"KeyError: '{}'\".format \"KeyError: '{}'\".format( .format(* format(*e (*e. *e.args e.args) .args)\t args)\t\t )\t\t\t \t\t\telif \t\telifnot \telifnothasattr elifnothasattr( nothasattr(BadRequestKeyError hasattr(BadRequestKeyError, (BadRequestKeyError,\"show_exception\" BadRequestKeyError,\"show_exception\") ,\"show_exception\"): \"show_exception\"):\t ):\t\t\t\t\t :\t\t\t\t\te \t\t\t\t\te. \t\t\t\te.args e.args= .args=( args=() =()\t ()\t\t )\t\t\t \t\t\tif \t\tifisinstance \tifisinstance( ifisinstance(e isinstance(e, (e,HTTPException e,HTTPException) ,HTTPException)and HTTPException)andnot )andnotself andnotself. notself.trap_http_exception self.trap_http_exception( .trap_http_exception(e trap_http_exception(e) (e): e):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.handle_http_exception self.handle_http_exception( .handle_http_exception(e handle_http_exception(e) (e)\t e)\t\t )\t\thandler \t\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(e _find_error_handler(e) (e)\t e)\tif )\tifhandler \tifhandleris ifhandlerisNone handlerisNone: isNone:\t None:\t\t\t\t :\t\t\t\treraise \t\t\t\treraise( \t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\treturn \t\treturnhandler \treturnhandler( returnhandler(e handler(e) (e)\t e)\t\t )\t\tdef \t\tdefhandle_exception \tdefhandle_exception( defhandle_exception(self handle_exception(self, (self,e self,e) ,e): e):\t ):\t\t\t :\t\t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\" \t\t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\t \t\t\"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\texc_type \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. note::\n            Prior to Werkzeug 1.0.0, ``InternalServerError`` will not\n            always have an ``original_exception`` attribute. Use\n            ``getattr(e, \"original_exception\", None)`` to simulate the\n            behavior for compatibility.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tgot_request_exception )\tgot_request_exception. \tgot_request_exception.send got_request_exception.send( .send(self send(self, (self,exception self,exception= ,exception=e exception=e) =e)\t e)\tif )\tifself \tifself. ifself.propagate_exceptions self.propagate_exceptions: .propagate_exceptions:\t propagate_exceptions:\t\t\t\t :\t\t\t\tif \t\t\t\tifexc_value \t\t\tifexc_valueis ifexc_valueise exc_valueise: ise:\t e:\t\t\t\t\t :\t\t\t\t\treraise \t\t\t\t\treraise( \t\t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traisee \t\t\t\traisee\t raisee\t\t e\t\t\t \t\t\tself \t\tself. \tself.log_exception self.log_exception( .log_exception(( log_exception((exc_type ((exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)) tb))\t ))\tserver_error )\tserver_error= \tserver_error=InternalServerError server_error=InternalServerError( =InternalServerError() InternalServerError()\t ()\tserver_error )\tserver_error. \tserver_error.original_exception server_error.original_exception= .original_exception=e original_exception=e\t =e\thandler e\thandler= \thandler=self handler=self. =self._find_error_handler self._find_error_handler( ._find_error_handler(server_error _find_error_handler(server_error) (server_error)\t server_error)\tif )\tifhandler \tifhandleris ifhandlerisnot handlerisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tserver_error \t\t\t\tserver_error= \t\t\tserver_error=handler server_error=handler( =handler(server_error handler(server_error) (server_error)\t server_error)\t\t )\t\treturn \t\treturnself \treturnself. returnself.finalize_request self.finalize_request( .finalize_request(server_error finalize_request(server_error, (server_error,from_error_handler server_error,from_error_handler= ,from_error_handler=True from_error_handler=True) =True)\t True)\t\t )\t\tdef \t\tdeflog_exception \tdeflog_exception( deflog_exception(self log_exception(self, (self,exc_info self,exc_info) ,exc_info): exc_info):\t ):\t\t\t :\t\t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\" \t\t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\t \t\t\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\tself. \tself.logger self.logger. .logger.error logger.error( .error(\"Exception on %s [%s]\" error(\"Exception on %s [%s]\"% (\"Exception on %s [%s]\"%( \"Exception on %s [%s]\"%(request %(request. (request.path request.path, .path,request path,request. ,request.method request.method) .method), method),exc_info ),exc_info= ,exc_info=exc_info exc_info=exc_info) =exc_info)\t exc_info)\t\t )\t\tdef \t\tdefraise_routing_exception \tdefraise_routing_exception( defraise_routing_exception(self raise_routing_exception(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\tif \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\tif( \tif(not if(notself (notself. notself.debug self.debugor .debugornot debugornotisinstance ornotisinstance( notisinstance(request isinstance(request. (request.routing_exception request.routing_exception, .routing_exception,RequestRedirect routing_exception,RequestRedirect) ,RequestRedirect)or RequestRedirect)orrequest )orrequest. orrequest.method request.methodin .methodin( methodin(\"GET\" in(\"GET\", (\"GET\",\"HEAD\" \"GET\",\"HEAD\", ,\"HEAD\",\"OPTIONS\" \"HEAD\",\"OPTIONS\") ,\"OPTIONS\")) \"OPTIONS\")): )):\t ):\t\t\t\t :\t\t\t\traise \t\t\t\traiserequest \t\t\traiserequest. raiserequest.routing_exception request.routing_exception\t .routing_exception\t\t routing_exception\t\tfrom \t\tfrom. \tfrom.debughelpers from.debughelpersimport .debughelpersimportFormDataRoutingRedirect debughelpersimportFormDataRoutingRedirect\t importFormDataRoutingRedirect\traise FormDataRoutingRedirect\traiseFormDataRoutingRedirect \traiseFormDataRoutingRedirect( raiseFormDataRoutingRedirect(request FormDataRoutingRedirect(request) (request)\t request)\t\t )\t\tdef \t\tdefdispatch_request \tdefdispatch_request( defdispatch_request(self dispatch_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\" \t\t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\t \t\t\"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\treq \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\treq= \treq=_request_ctx_stack req=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request\t .request\tif request\tifreq \tifreq. ifreq.routing_exception req.routing_exceptionis .routing_exceptionisnot routing_exceptionisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.raise_routing_exception self.raise_routing_exception( .raise_routing_exception(req raise_routing_exception(req) (req)\t req)\t\t )\t\trule \t\trule= \trule=req rule=req. =req.url_rule req.url_rule\t .url_rule\tif url_rule\tif( \tif(getattr if(getattr( (getattr(rule getattr(rule, (rule,\"provide_automatic_options\" rule,\"provide_automatic_options\", ,\"provide_automatic_options\",False \"provide_automatic_options\",False) ,False)and False)andreq )andreq. andreq.method req.method== .method==\"OPTIONS\" method==\"OPTIONS\") ==\"OPTIONS\"): \"OPTIONS\"):\t ):\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.make_default_options_response self.make_default_options_response( .make_default_options_response() make_default_options_response()\t ()\t\t )\t\treturn \t\treturnself \treturnself. returnself.view_functions self.view_functions[ .view_functions[rule view_functions[rule. [rule.endpoint rule.endpoint] .endpoint]( endpoint](** ](**req (**req. **req.view_args req.view_args) .view_args)\t view_args)\t\t )\t\tdef \t\tdeffull_dispatch_request \tdeffull_dispatch_request( deffull_dispatch_request(self full_dispatch_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\tself. \tself.try_trigger_before_first_request_functions self.try_trigger_before_first_request_functions( .try_trigger_before_first_request_functions() try_trigger_before_first_request_functions()\t ()\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\trequest_started \t\t\t\trequest_started. \t\t\trequest_started.send request_started.send( .send(self send(self) (self)\t self)\trv )\trv= \trv=self rv=self. =self.preprocess_request self.preprocess_request( .preprocess_request() preprocess_request()\t ()\tif )\tifrv \tifrvis ifrvisNone rvisNone: isNone:\t None:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=self rv=self. =self.dispatch_request self.dispatch_request( .dispatch_request() dispatch_request()\t ()\t\t )\t\t\t \t\t\texcept \t\texceptException \texceptExceptionas exceptExceptionase Exceptionase: ase:\t e:\t\t\t\t :\t\t\t\trv \t\t\t\trv= \t\t\trv=self rv=self. =self.handle_user_exception self.handle_user_exception( .handle_user_exception(e handle_user_exception(e) (e)\t e)\t\t )\t\treturn \t\treturnself \treturnself. returnself.finalize_request self.finalize_request( .finalize_request(rv finalize_request(rv) (rv)\t rv)\t\t )\t\tdef \t\tdeffinalize_request \tdeffinalize_request( deffinalize_request(self finalize_request(self, (self,rv self,rv, ,rv,from_error_handler rv,from_error_handler= ,from_error_handler=False from_error_handler=False) =False): False):\t ):\t\t\t :\t\t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\tresponse \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\tresponse= \tresponse=self response=self. =self.make_response self.make_response( .make_response(rv make_response(rv) (rv)\t rv)\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\tresponse \t\t\t\tresponse= \t\t\tresponse=self response=self. =self.process_response self.process_response( .process_response(response process_response(response) (response)\t response)\trequest_finished )\trequest_finished. \trequest_finished.send request_finished.send( .send(self send(self, (self,response self,response= ,response=response response=response) =response)\t response)\t\t )\t\texcept \t\texceptException \texceptException: exceptException:\t Exception:\t\t\t\t :\t\t\t\tif \t\t\t\tifnot \t\t\tifnotfrom_error_handler ifnotfrom_error_handler: notfrom_error_handler:\t from_error_handler:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traise\t \t\t\t\traise\t\t raise\t\tself \t\tself. \tself.logger self.logger. .logger.exception logger.exception( .exception(\"Request finalizing failed with an error while handling an error\" exception(\"Request finalizing failed with an error while handling an error\") (\"Request finalizing failed with an error while handling an error\")\t \"Request finalizing failed with an error while handling an error\")\t\t )\t\treturn \t\treturnresponse \treturnresponse\t returnresponse\t\t response\t\tdef \t\tdeftry_trigger_before_first_request_functions \tdeftry_trigger_before_first_request_functions( deftry_trigger_before_first_request_functions(self try_trigger_before_first_request_functions(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\" \t\t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\t \t\t\"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\tif \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\tifself \tifself. ifself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t :\t\t\t\treturn \t\t\t\treturn\t \t\t\treturn\t\t return\t\twith \t\twithself \twithself. withself._before_request_lock self._before_request_lock: ._before_request_lock:\t _before_request_lock:\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself._got_first_request self._got_first_request: ._got_first_request:\t _got_first_request:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturn\t \t\t\t\treturn\t\t return\t\tfor \t\tforfunc \tforfuncin forfuncinself funcinself. inself.before_first_request_funcs self.before_first_request_funcs: .before_first_request_funcs:\t before_first_request_funcs:\t\t\t\t\t :\t\t\t\t\tfunc \t\t\t\t\tfunc( \t\t\t\tfunc() func()\t ()\t\t )\t\tself \t\tself. \tself._got_first_request self._got_first_request= ._got_first_request=True _got_first_request=True\t =True\t\t True\t\t\t \t\t\tdef \t\tdefmake_default_options_response \tdefmake_default_options_response( defmake_default_options_response(self make_default_options_response(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\tadapter \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\tadapter= \tadapter=_request_ctx_stack adapter=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.url_adapter top.url_adapter\t .url_adapter\tmethods url_adapter\tmethods= \tmethods=adapter methods=adapter. =adapter.allowed_methods adapter.allowed_methods( .allowed_methods() allowed_methods()\t ()\trv )\trv= \trv=self rv=self. =self.response_class self.response_class( .response_class() response_class()\t ()\trv )\trv. \trv.allow rv.allow. .allow.update allow.update( .update(methods update(methods) (methods)\t methods)\treturn )\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefshould_ignore_error \tdefshould_ignore_error( defshould_ignore_error(self should_ignore_error(self, (self,error self,error) ,error): error):\t ):\t\t\t :\t\t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\" \t\t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\t \t\t\"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\treturn \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\treturnFalse \treturnFalse\t returnFalse\t\t False\t\tdef \t\tdefmake_response \tdefmake_response( defmake_response(self make_response(self, (self,rv self,rv) ,rv): rv):\t ):\t\t\t :\t\t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\" \t\t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\t \t\t\"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\tstatus \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\tstatus= \tstatus=headers status=headers= =headers=None headers=None\t =None\tif None\tifisinstance \tifisinstance( ifisinstance(rv isinstance(rv, (rv,tuple rv,tuple) ,tuple): tuple):\t ):\t\t\t\t :\t\t\t\tlen_rv \t\t\t\tlen_rv= \t\t\tlen_rv=len len_rv=len( =len(rv len(rv) (rv)\t rv)\tif )\tiflen_rv \tiflen_rv== iflen_rv==3 len_rv==3: ==3:\t 3:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv, \t\t\t\trv,status rv,status, ,status,headers status,headers= ,headers=rv headers=rv\t =rv\t\t rv\t\telif \t\teliflen_rv \teliflen_rv== eliflen_rv==2 len_rv==2: ==2:\t 2:\t\t\t\t\t :\t\t\t\t\tif \t\t\t\t\tifisinstance \t\t\t\tifisinstance( ifisinstance(rv isinstance(rv[ (rv[1 rv[1] [1], 1],( ],(Headers ,(Headers, (Headers,dict Headers,dict, ,dict,tuple dict,tuple, ,tuple,list tuple,list) ,list)) list)): )):\t ):\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv, \t\t\t\t\trv,headers rv,headers= ,headers=rv headers=rv\t =rv\t\t rv\t\telse \t\telse: \telse:\t else:\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv, \t\t\t\t\trv,status rv,status= ,status=rv status=rv\t =rv\t\t rv\t\t\t \t\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseTypeError \t\t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid response tuple.\" TypeError(\"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\" (\"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\" \"The view function did not return a valid response tuple.\"\" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\") \" The tuple must have the form (body, status, headers),\"\" (body, status), or (body, headers).\")\t \" (body, status), or (body, headers).\")\t\t )\t\t\t \t\t\tif \t\tifrv \tifrvis ifrvisNone rvisNone: isNone:\t None:\t\t\t\t :\t\t\t\traise \t\t\t\traiseTypeError \t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid response. The\" TypeError(\"The view function did not return a valid response. The\"\" function either returned None or ended without a return\" (\"The view function did not return a valid response. The\"\" function either returned None or ended without a return\"\" statement.\" \"The view function did not return a valid response. The\"\" function either returned None or ended without a return\"\" statement.\") \" function either returned None or ended without a return\"\" statement.\")\t \" statement.\")\t\t )\t\tif \t\tifnot \tifnotisinstance ifnotisinstance( notisinstance(rv isinstance(rv, (rv,self rv,self. ,self.response_class self.response_class) .response_class): response_class):\t ):\t\t\t\t :\t\t\t\tif \t\t\t\tifisinstance \t\t\tifisinstance( ifisinstance(rv isinstance(rv, (rv,( rv,(text_type ,(text_type, (text_type,bytes text_type,bytes, ,bytes,bytearray bytes,bytearray) ,bytearray)) bytearray)): )):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=self rv=self. =self.response_class self.response_class( .response_class(rv response_class(rv, (rv,status rv,status= ,status=status status=status, =status,headers status,headers= ,headers=headers headers=headers) =headers)\t headers)\tstatus )\tstatus= \tstatus=headers status=headers= =headers=None headers=None\t =None\t\t None\t\telif \t\telifisinstance \telifisinstance( elifisinstance(rv isinstance(rv, (rv,dict rv,dict) ,dict): dict):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=jsonify rv=jsonify( =jsonify(rv jsonify(rv) (rv)\t rv)\t\t )\t\telif \t\telifisinstance \telifisinstance( elifisinstance(rv isinstance(rv, (rv,BaseResponse rv,BaseResponse) ,BaseResponse)or BaseResponse)orcallable )orcallable( orcallable(rv callable(rv) (rv): rv):\t ):\t\t\t\t\t :\t\t\t\t\ttry \t\t\t\t\ttry: \t\t\t\ttry:\t try:\t\t\t\t\t\t :\t\t\t\t\t\trv \t\t\t\t\t\trv= \t\t\t\t\trv=self rv=self. =self.response_class self.response_class. .response_class.force_type response_class.force_type( .force_type(rv force_type(rv, (rv,request rv,request. ,request.environ request.environ) .environ)\t environ)\t\t )\t\texcept \t\texceptTypeError \texceptTypeErroras exceptTypeErrorase TypeErrorase: ase:\t e:\t\t\t\t\t\t :\t\t\t\t\t\tnew_error \t\t\t\t\t\tnew_error= \t\t\t\t\tnew_error=TypeError new_error=TypeError( =TypeError(\"{e}\\nThe view function did not return a valid\" TypeError(\"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\" (\"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\" \"{e}\\nThe view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\" \" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\". \" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\".format \" {rv.__class__.__name__}.\".format( .format(e format(e= (e=e e=e, =e,rv e,rv= ,rv=rv rv=rv) =rv)) rv))\t ))\treraise )\treraise( \treraise(TypeError reraise(TypeError, (TypeError,new_error TypeError,new_error, ,new_error,sys new_error,sys. ,sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[2 )[2] [2]) 2])\t ])\t\t )\t\t\t \t\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\traise \t\t\t\t\traiseTypeError \t\t\t\traiseTypeError( raiseTypeError(\"The view function did not return a valid\" TypeError(\"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\" (\"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\" \"The view function did not return a valid\"\" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\" \" response. The return type must be a string, dict, tuple,\"\" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\". \" Response instance, or WSGI callable, but it was a\"\" {rv.__class__.__name__}.\".format \" {rv.__class__.__name__}.\".format( .format(rv format(rv= (rv=rv rv=rv) =rv)) rv))\t ))\t\t )\t\t\t \t\t\tif \t\tifstatus \tifstatusis ifstatusisnot statusisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tif \t\t\t\tifisinstance \t\t\tifisinstance( ifisinstance(status isinstance(status, (status,( status,(text_type ,(text_type, (text_type,bytes text_type,bytes, ,bytes,bytearray bytes,bytearray) ,bytearray)) bytearray)): )):\t ):\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv. \t\t\t\trv.status rv.status= .status=status status=status\t =status\t\t status\t\telse \t\telse: \telse:\t else:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv. \t\t\t\trv.status_code rv.status_code= .status_code=status status_code=status\t =status\t\t status\t\t\t \t\t\tif \t\tifheaders \tifheaders: ifheaders:\t headers:\t\t\t\t :\t\t\t\trv \t\t\t\trv. \t\t\trv.headers rv.headers. .headers.extend headers.extend( .extend(headers extend(headers) (headers)\t headers)\t\t )\t\treturn \t\treturnrv \treturnrv\t returnrv\t\t rv\t\tdef \t\tdefcreate_url_adapter \tdefcreate_url_adapter( defcreate_url_adapter(self create_url_adapter(self, (self,request self,request) ,request): request):\t ):\t\t\t :\t\t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\" \t\t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\t \t\t\"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\tif \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\tifrequest \tifrequestis ifrequestisnot requestisnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\tsubdomain \t\t\t\tsubdomain= \t\t\tsubdomain=( subdomain=(( =((self ((self. (self.url_map self.url_map. .url_map.default_subdomain url_map.default_subdomainor .default_subdomainorNone default_subdomainorNone) orNone)if None)ifnot )ifnotself ifnotself. notself.subdomain_matching self.subdomain_matchingelse .subdomain_matchingelseNone subdomain_matchingelseNone) elseNone)\t None)\treturn )\treturnself \treturnself. returnself.url_map self.url_map. .url_map.bind_to_environ url_map.bind_to_environ( .bind_to_environ(request bind_to_environ(request. (request.environ request.environ, .environ,server_name environ,server_name= ,server_name=self server_name=self. =self.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"], \"SERVER_NAME\"],subdomain ],subdomain= ,subdomain=subdomain subdomain=subdomain, =subdomain,) subdomain,)\t ,)\t\t )\t\tif \t\tifself \tifself. ifself.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"]is \"SERVER_NAME\"]isnot ]isnotNone isnotNone: notNone:\t None:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.url_map self.url_map. .url_map.bind url_map.bind( .bind(self bind(self. (self.config self.config[ .config[\"SERVER_NAME\" config[\"SERVER_NAME\"] [\"SERVER_NAME\"], \"SERVER_NAME\"],script_name ],script_name= ,script_name=self script_name=self. =self.config self.config[ .config[\"APPLICATION_ROOT\" config[\"APPLICATION_ROOT\"] [\"APPLICATION_ROOT\"], \"APPLICATION_ROOT\"],url_scheme ],url_scheme= ,url_scheme=self url_scheme=self. =self.config self.config[ .config[\"PREFERRED_URL_SCHEME\" config[\"PREFERRED_URL_SCHEME\"] [\"PREFERRED_URL_SCHEME\"], \"PREFERRED_URL_SCHEME\"],) ],)\t ,)\t\t )\t\t\t \t\t\tdef \t\tdefinject_url_defaults \tdefinject_url_defaults( definject_url_defaults(self inject_url_defaults(self, (self,endpoint self,endpoint, ,endpoint,values endpoint,values) ,values): values):\t ):\t\t\t :\t\t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\" \t\t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\t \t\t\"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfuncs \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\tfuncs= \tfuncs=self funcs=self. =self.url_default_functions self.url_default_functions. .url_default_functions.get url_default_functions.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tif\".\" \tif\".\"in if\".\"inendpoint \".\"inendpoint: inendpoint:\t endpoint:\t\t\t\t :\t\t\t\tbp \t\t\t\tbp= \t\t\tbp=endpoint bp=endpoint. =endpoint.rsplit endpoint.rsplit( .rsplit(\".\" rsplit(\".\", (\".\",1 \".\",1) ,1)[ 1)[0 )[0] [0]\t 0]\tfuncs ]\tfuncs= \tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.url_default_functions self.url_default_functions. .url_default_functions.get url_default_functions.get( .get(bp get(bp, (bp,( bp,() ,()) ())) )))\t ))\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(endpoint func(endpoint, (endpoint,values endpoint,values) ,values)\t values)\t\t )\t\t\t \t\t\tdef \t\tdefhandle_url_build_error \tdefhandle_url_build_error( defhandle_url_build_error(self handle_url_build_error(self, (self,error self,error, ,error,endpoint error,endpoint, ,endpoint,values endpoint,values) ,values): values):\t ):\t\t\t :\t\t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\" \t\t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\t \t\t\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\texc_type \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        \"\"\"\texc_type, \texc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb= ,tb=sys tb=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()\t ()\tfor )\tforhandler \tforhandlerin forhandlerinself handlerinself. inself.url_build_error_handlers self.url_build_error_handlers: .url_build_error_handlers:\t url_build_error_handlers:\t\t\t\t :\t\t\t\ttry \t\t\t\ttry: \t\t\ttry:\t try:\t\t\t\t\t :\t\t\t\t\trv \t\t\t\t\trv= \t\t\t\trv=handler rv=handler( =handler(error handler(error, (error,endpoint error,endpoint, ,endpoint,values endpoint,values) ,values)\t values)\tif )\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t\t\t :\t\t\t\t\t\treturn \t\t\t\t\t\treturnrv \t\t\t\t\treturnrv\t returnrv\t\t rv\t\t\t \t\t\texcept \t\texceptBuildError \texceptBuildErroras exceptBuildErrorase BuildErrorase: ase:\t e:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=e error=e\t =e\t\t e\t\t\t \t\t\tif \t\tiferror \tiferroris iferrorisexc_value errorisexc_value: isexc_value:\t exc_value:\t\t\t\t :\t\t\t\treraise \t\t\t\treraise( \t\t\treraise(exc_type reraise(exc_type, (exc_type,exc_value exc_type,exc_value, ,exc_value,tb exc_value,tb) ,tb)\t tb)\t\t )\t\traise \t\traiseerror \traiseerror\t raiseerror\t\t error\t\tdef \t\tdefpreprocess_request \tdefpreprocess_request( defpreprocess_request(self preprocess_request(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\" \t\t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\t \t\t\"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\tbp \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\tbp= \tbp=_request_ctx_stack bp=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request. .request.blueprint request.blueprint\t .blueprint\tfuncs blueprint\tfuncs= \tfuncs=self funcs=self. =self.url_value_preprocessors self.url_value_preprocessors. .url_value_preprocessors.get url_value_preprocessors.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.url_value_preprocessors self.url_value_preprocessors: .url_value_preprocessors:\t url_value_preprocessors:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.url_value_preprocessors self.url_value_preprocessors[ .url_value_preprocessors[bp url_value_preprocessors[bp] [bp]) bp])\t ])\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(request func(request. (request.endpoint request.endpoint, .endpoint,request endpoint,request. ,request.view_args request.view_args) .view_args)\t view_args)\t\t )\t\tfuncs \t\tfuncs= \tfuncs=self funcs=self. =self.before_request_funcs self.before_request_funcs. .before_request_funcs.get before_request_funcs.get( .get(None get(None, (None,( None,() ,()) ())\t ))\tif )\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.before_request_funcs self.before_request_funcs: .before_request_funcs:\t before_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,self funcs,self. ,self.before_request_funcs self.before_request_funcs[ .before_request_funcs[bp before_request_funcs[bp] [bp]) bp])\t ])\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\trv \t\t\t\trv= \t\t\trv=func rv=func( =func() func()\t ()\tif )\tifrv \tifrvis ifrvisnot rvisnotNone isnotNone: notNone:\t None:\t\t\t\t\t :\t\t\t\t\treturn \t\t\t\t\treturnrv \t\t\t\treturnrv\t returnrv\t\t rv\t\t\t \t\t\t\t \t\t\tdef \t\tdefprocess_response \tdefprocess_response( defprocess_response(self process_response(self, (self,response self,response) ,response): response):\t ):\t\t\t :\t\t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\" \t\t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\t \t\t\"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\tctx \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\tctx= \tctx=_request_ctx_stack ctx=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top\t .top\tbp top\tbp= \tbp=ctx bp=ctx. =ctx.request ctx.request. .request.blueprint request.blueprint\t .blueprint\tfuncs blueprint\tfuncs= \tfuncs=ctx funcs=ctx. =ctx._after_request_functions ctx._after_request_functions\t ._after_request_functions\tif _after_request_functions\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.after_request_funcs self.after_request_funcs: .after_request_funcs:\t after_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.after_request_funcs self.after_request_funcs[ .after_request_funcs[bp after_request_funcs[bp] [bp]) bp])) ]))\t ))\t\t )\t\tif \t\tifNone \tifNonein ifNoneinself Noneinself. inself.after_request_funcs self.after_request_funcs: .after_request_funcs:\t after_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.after_request_funcs self.after_request_funcs[ .after_request_funcs[None after_request_funcs[None] [None]) None])) ]))\t ))\t\t )\t\tfor \t\tforhandler \tforhandlerin forhandlerinfuncs handlerinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tresponse \t\t\t\tresponse= \t\t\tresponse=handler response=handler( =handler(response handler(response) (response)\t response)\t\t )\t\tif \t\tifnot \tifnotself ifnotself. notself.session_interface self.session_interface. .session_interface.is_null_session session_interface.is_null_session( .is_null_session(ctx is_null_session(ctx. (ctx.session ctx.session) .session): session):\t ):\t\t\t\t :\t\t\t\tself \t\t\t\tself. \t\t\tself.session_interface self.session_interface. .session_interface.save_session session_interface.save_session( .save_session(self save_session(self, (self,ctx self,ctx. ,ctx.session ctx.session, .session,response session,response) ,response)\t response)\t\t )\t\treturn \t\treturnresponse \treturnresponse\t returnresponse\t\t response\t\tdef \t\tdefdo_teardown_request \tdefdo_teardown_request( defdo_teardown_request(self do_teardown_request(self, (self,exc self,exc= ,exc=_sentinel exc=_sentinel) =_sentinel): _sentinel):\t ):\t\t\t :\t\t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\" \t\t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\t \t\t\"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\tif \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\tifexc \tifexcis ifexcis_sentinel excis_sentinel: is_sentinel:\t _sentinel:\t\t\t\t :\t\t\t\texc \t\t\t\texc= \t\t\texc=sys exc=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\t\t ]\t\tfuncs \t\tfuncs= \tfuncs=reversed funcs=reversed( =reversed(self reversed(self. (self.teardown_request_funcs self.teardown_request_funcs. .teardown_request_funcs.get teardown_request_funcs.get( .get(None get(None, (None,( None,() ,()) ())) )))\t ))\tbp )\tbp= \tbp=_request_ctx_stack bp=_request_ctx_stack. =_request_ctx_stack.top _request_ctx_stack.top. .top.request top.request. .request.blueprint request.blueprint\t .blueprint\tif blueprint\tifbp \tifbpis ifbpisnot bpisnotNone isnotNoneand notNoneandbp Noneandbpin andbpinself bpinself. inself.teardown_request_funcs self.teardown_request_funcs: .teardown_request_funcs:\t teardown_request_funcs:\t\t\t\t :\t\t\t\tfuncs \t\t\t\tfuncs= \t\t\tfuncs=chain funcs=chain( =chain(funcs chain(funcs, (funcs,reversed funcs,reversed( ,reversed(self reversed(self. (self.teardown_request_funcs self.teardown_request_funcs[ .teardown_request_funcs[bp teardown_request_funcs[bp] [bp]) bp])) ]))\t ))\t\t )\t\tfor \t\tforfunc \tforfuncin forfuncinfuncs funcinfuncs: infuncs:\t funcs:\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(exc func(exc) (exc)\t exc)\t\t )\t\trequest_tearing_down \t\trequest_tearing_down. \trequest_tearing_down.send request_tearing_down.send( .send(self send(self, (self,exc self,exc= ,exc=exc exc=exc) =exc)\t exc)\t\t )\t\tdef \t\tdefdo_teardown_appcontext \tdefdo_teardown_appcontext( defdo_teardown_appcontext(self do_teardown_appcontext(self, (self,exc self,exc= ,exc=_sentinel exc=_sentinel) =_sentinel): _sentinel):\t ):\t\t\t :\t\t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\tif \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\tifexc \tifexcis ifexcis_sentinel excis_sentinel: is_sentinel:\t _sentinel:\t\t\t\t :\t\t\t\texc \t\t\t\texc= \t\t\texc=sys exc=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\t\t ]\t\tfor \t\tforfunc \tforfuncin forfuncinreversed funcinreversed( inreversed(self reversed(self. (self.teardown_appcontext_funcs self.teardown_appcontext_funcs) .teardown_appcontext_funcs): teardown_appcontext_funcs):\t ):\t\t\t\t :\t\t\t\tfunc \t\t\t\tfunc( \t\t\tfunc(exc func(exc) (exc)\t exc)\t\t )\t\tappcontext_tearing_down \t\tappcontext_tearing_down. \tappcontext_tearing_down.send appcontext_tearing_down.send( .send(self send(self, (self,exc self,exc= ,exc=exc exc=exc) =exc)\t exc)\t\t )\t\tdef \t\tdefapp_context \tdefapp_context( defapp_context(self app_context(self) (self): self):\t ):\t\t\t :\t\t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\" \t\t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\t \t\t\"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\treturn \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\treturnAppContext \treturnAppContext( returnAppContext(self AppContext(self) (self)\t self)\t\t )\t\tdef \t\tdefrequest_context \tdefrequest_context( defrequest_context(self request_context(self, (self,environ self,environ) ,environ): environ):\t ):\t\t\t :\t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\" \t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\t \t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\treturn \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\treturnRequestContext \treturnRequestContext( returnRequestContext(self RequestContext(self, (self,environ self,environ) ,environ)\t environ)\t\t )\t\tdef \t\tdeftest_request_context \tdeftest_request_context( deftest_request_context(self test_request_context(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs): kwargs):\t ):\t\t\t :\t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\" \t\t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\t \t\t\"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\tfrom \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\tfrom. \tfrom.testing from.testingimport .testingimportEnvironBuilder testingimportEnvironBuilder\t importEnvironBuilder\tbuilder EnvironBuilder\tbuilder= \tbuilder=EnvironBuilder builder=EnvironBuilder( =EnvironBuilder(self EnvironBuilder(self, (self,* self,*args ,*args, *args,** args,**kwargs ,**kwargs) **kwargs)\t kwargs)\ttry )\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\treturn \t\t\t\treturnself \t\t\treturnself. returnself.request_context self.request_context( .request_context(builder request_context(builder. (builder.get_environ builder.get_environ( .get_environ() get_environ()) ())\t ))\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tbuilder \t\t\t\tbuilder. \t\t\tbuilder.close builder.close( .close() close()\t ()\t\t )\t\t\t \t\t\tdef \t\tdefwsgi_app \tdefwsgi_app( defwsgi_app(self wsgi_app(self, (self,environ self,environ, ,environ,start_response environ,start_response) ,start_response): start_response):\t ):\t\t\t :\t\t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\" \t\t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\t \t\t\"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\tctx \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\tctx= \tctx=self ctx=self. =self.request_context self.request_context( .request_context(environ request_context(environ) (environ)\t environ)\terror )\terror= \terror=None error=None\t =None\ttry None\ttry: \ttry:\t try:\t\t\t\t :\t\t\t\ttry \t\t\t\ttry: \t\t\ttry:\t try:\t\t\t\t\t :\t\t\t\t\tctx \t\t\t\t\tctx. \t\t\t\tctx.push ctx.push( .push() push()\t ()\tresponse )\tresponse= \tresponse=self response=self. =self.full_dispatch_request self.full_dispatch_request( .full_dispatch_request() full_dispatch_request()\t ()\t\t )\t\texcept \t\texceptException \texceptExceptionas exceptExceptionase Exceptionase: ase:\t e:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=e error=e\t =e\tresponse e\tresponse= \tresponse=self response=self. =self.handle_exception self.handle_exception( .handle_exception(e handle_exception(e) (e)\t e)\t\t )\t\texcept \t\texcept: \texcept:\t except:\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=sys error=sys. =sys.exc_info sys.exc_info( .exc_info() exc_info()[ ()[1 )[1] [1]\t 1]\traise ]\traise\t \traise\t\t raise\t\treturn \t\treturnresponse \treturnresponse( returnresponse(environ response(environ, (environ,start_response environ,start_response) ,start_response)\t start_response)\t\t )\t\tfinally \t\tfinally: \tfinally:\t finally:\t\t\t\t :\t\t\t\tif \t\t\t\tifself \t\t\tifself. ifself.should_ignore_error self.should_ignore_error( .should_ignore_error(error should_ignore_error(error) (error): error):\t ):\t\t\t\t\t :\t\t\t\t\terror \t\t\t\t\terror= \t\t\t\terror=None error=None\t =None\t\t None\t\tctx \t\tctx. \tctx.auto_pop ctx.auto_pop( .auto_pop(error auto_pop(error) (error)\t error)\t\t )\t\t\t \t\t\tdef \t\tdef__call__ \tdef__call__( def__call__(self __call__(self, (self,environ self,environ, ,environ,start_response environ,start_response) ,start_response): start_response):\t ):\t\t\t :\t\t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\" \t\t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\t \t\t\"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\treturn \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.\"\"\"\treturnself \treturnself. returnself.wsgi_app self.wsgi_app( .wsgi_app(environ wsgi_app(environ, (environ,start_response environ,start_response) ,start_response)\t start_response)\t\t )\t\tdef \t\tdef__repr__ \tdef__repr__( def__repr__(self __repr__(self) (self): self):\t ):\t\t\t :\t\t\treturn \t\t\treturn\"<%s %r>\" \t\treturn\"<%s %r>\"% return\"<%s %r>\"%( \"<%s %r>\"%(self %(self. (self.__class__ self.__class__. .__class__.__name__ __class__.__name__, .__name__,self __name__,self. ,self.name self.name) .name)\n name)\n\n )\n\n\n \n\n\n< \n\n<EOF \n<EOF>","type":"boolean","boost":4.0}}},{"match":{"src":{"query":"NSNK SNKW NKWN KWNK WNKW NKWN KWNK WNKW NKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKWK KWKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNKW NKW. KW.W W.WK .WKW WKWN KWNK WNK. NK.K K.KW .KWN KWNK WNK. NK.K K.KW .KWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNK WNK. NK.W K.WK .WKW WKWN KWNW WNWO NWOW WOW( OW() W()N ()NK )NKW NKW( KW(W W(W) (W): W):N ):NI :NIK NIKK IKKW KKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(W W(WO (WOW WOW) OW)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW): W):N ):NI :NIK NIKW IKW. KW.W W.WK .WKW WKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW( KW(S W(SS (SSS SSSS SSSS SSSS SSSS SSS) SS)N S)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW( OW(S W(S, (S,W S,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOW( OW(S W(S, (S,W S,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOW( OW(S W(S) (S)N S)NW )NWO NWOW WOW. OW.W W.WN .WNW WNWO NWOW WOW. OW.W W.WN .WNW WNWO NWO{ WO{S O{S: {S:[ S:[S :[S, [S,S S,S] ,S]} S]}N ]}NW }NWO NWOW WOW( OW({ W({S ({S: {S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:W S:W( :W(W W(WO (WOV WOV) OV), V),S ),S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:W S:W( :W(W W(WO (WOV WOV) OV), V),S ),S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:K S:K, :K,S K,S: ,S:S S:S, :S,S S,S: ,S:K S:K, :K,S K,S: ,S:V S:V, :V,} V,}) ,})N })NW )NWO NWOW WOWN OWNW WNWO NWOW WOWN OWNW WNWO NWOK WOKN OKNW KNWO NWOK WOKN OKNW KNWO NWOW WOW( OW() W()N ()NW )NWO NWOK WOKN OKNW KNWO NWOK WOKN OKNW KNWO NWOK WOKN OKNK KNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK, OK,W K,WO ,WOS WOS, OS,W S,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOS WOS, OS,W S,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,) K,): ,):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW) OW)N W)NW )NW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOWN OWNK WNKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()N ()ND )NDK NDKK DKKW KKW. KW.W W.W. .W.W W.W( .W(W W(W) (W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SS) SS)N S)ND )NDW NDW. DW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO{ WO{K O{K: {K:[ K:[W :[W] [W]} W]}N ]}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WO[ WO[] O[]N []NW ]NW. NW.W W.WO .WO{ WO{} O{}N {}NW }NW. NW.W W.WO .WOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.WO .WOK WOKN OKNW KNW. NW.W W.WO .WOW WOW( OW() W()N ()NK )NKW NKW. KW.W W.W: .W:N W:NI :NIK NIK( IK(W K(W( (W(W W(W) (W)O W)OW )OW) OW), W),S ),SN ,SNW SNW. NW.W W.W( .W(W W(W. (W.W W.WO .WOS WOS, OS,W S,WO ,WOS WOS, OS,W S,WO ,WOW WOW, OW,W W,WO ,WOW WOW. OW.W W.W, .W,) W,)N ,)ND )NDW NDW. DW.W W.W. .W.W W.WO .WOW WOW. OW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WO .WOS WOS: OS:N S:NI :NIW NIWO IWOW WOW( OW(W W(W. (W.W W.W[ .W[S W[S] [S], S],S ],S, ,S,K S,K) ,K)N K)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKS IKSN KSND SNDK NDKW DKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W. .W.W W.W( .W(W W(W) (W)) W))[ ))[V )[V] [V]N V]ND ]NDK NDKW DKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW. KW.W W.WK .WKW WKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW. KW.W W.WN .WND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W( .W() W()N ()ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WN .WND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.WN .WND WNDW NDWO DWOW WOW( OW(W W(W. (W.W W.W) .W)N W)NW )NW[ NW[S W[S] [S]O S]OW ]OW( OW() W()N ()NW )NW[ NW[S W[S] [S]O S]OW ]OW( OW() W()N ()NK )NKW NKW. KW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,WO ,WOW WOW( OW(W W(W. (W.W W.W) .W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKW IKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S) ,S)N S)ND )NDK NDKW DKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,S W,S, ,S,W S,W. ,W.W W.WO .WOS WOS) OS)N S)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOS WOS) OS): S):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W. (W.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,W) ,W), W),W ),W) ,W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NKW NKWK KWKW WKWK KWKK WKKK KKKK KKKW KKW. KW.W W.WN .WND WNDO NDOW DOW. OW.W W.WN .WNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]O S]OW ]OWN OWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW( OW(W W(W. (W.W W.W) .W)N W)NK )NKS NKSK KSKK SKKW KKW: KW:N W:NI :NIW NIW[ IW[S W[S] [S]O S]OW ]OW. OW.W W.WN .WND WNDK NDKS DKSK KSKK SKKW KKW: KW:N W:NI :NIW NIW[ IW[S W[S] [S]O S]OW ]OW. OW.W W.WN .WND WNDW NDWO DWOW WOW. OW.W W.W( .W(W W(W, (W,O W,OW ,OW) OW)N W)NW )NW. NW.W W.W. .W.W W.W( .W(W W(WO (WOW WOW, OW,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW. OW.W W.W, .W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW, OW,) W,)N ,)NW )NW. NW.W W.W[ .W[S W[S] [S]O S]OW ]OW. OW.W W.WN .WNK WNKW NKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKK: KK:N K:NI :NIK NIKK IKKN KKND KNDK NDKW DKW. KW.W W.W( .W(( W((S ((S, (S,S S,S, ,S,S S,S, ,S,S S,S) ,S)) S))N ))ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W[ .W[K W[K] [K]N K]NW ]NWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDD NDDW DDWO DWOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKW: KW:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWO{ WO{S O{S: {S:W S:W, :W,S W,S: ,S:W S:W} :W}N W}NK }NKW NKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.W( .W(W W(W( (W() W()) ())N ))ND )NDK NDKW DKWN KWND WNDW NDWO DWOW WOW( OW(S W(S) (S)N S)NO )NOW NOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W[ .W[S W[S] [S]N S]ND ]NDO NDOW DOW. OW.W W.WN .WNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIW. IW.W W.W[ .W[S W[S] [S]O S]OW ]OWN OWNW WNW. NW.W W.W. .W.W W.WO .WOW WOW. OW.W W.WN .WND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W. .W.W W.W( .W(S W(S) (S)O S)OS )OS: OS:N S:NI :NIK NIK. IK.W K.WK .WKW WKWN KWNW WNW( NW() W()N ()NK )NKN NKND KNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W() W()N ()NK )NKS NKSK KSKW SKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.WO .WOW WOW( OW() W()N ()NW )NW. NW.W W.WO .WOW WOW( OW() W()N ()ND )NDK NDKS DKSK KSKW SKW. KW.W W.W: .W:N W:NI :NIW NIW. IW.W W.WO .WOW WOW( OW() W()N ()ND )NDD NDDK DDKW DKWK KWKK WKKK KKK: KK:N K:NI :NIW NIW. IW.W W.WO .WOW WOW( OW(W W(W) (W)N W)ND )NDW NDWO DWOS WOSN OSNW SNWO NWOV WOVN OVNW VNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(S W(S) (S)N S)NW )NW, NW,W W,WO ,WOK WOK, OK,K K,KN ,KNK KNKW NKW: KW:N W:NI :NIW NIW, IW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W(S W(S) (S)N S)ND )NDW NDWO DWOW WOWK OWKW WKWK KWKW WKWN KWNW WNWO NWOW WOW( OW(W W(W( (W(( W((W ((WK (WKW WKWK KWK( WK(W K(W, (W,W W,W) ,W)K W)KW )KWK KWKK WKKK KKK) KK), K),W ),W) ,W)) W))N ))NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,W S,W. ,W.W W.W) .W)N W)NW )NW. NW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NW )NW. NW.W W.W( .W(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W, .W,W W,W. ,W.W W.W, .W,K W,K) ,K)N K)NK )NKW NKW. KW.W W.WK .WKW WKWN KWNK WNK: NK:N K:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W, ,W,O W,OW ,OW) OW)N W)ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.WO .WOK WOKN OKND KNDD NDDK DDKW DKW( KW(W W(W, (W,W W,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKK: KK:N K:NI :NIK NIK. IK.W K.WK .WKW WKWK KWKW WKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W. ,W.W W.W, .W,W W,WO ,WOW WOW, OW,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKK: KK:N K:NI :NIK NIK. IK.W K.WK .WKW WKWK KWKW WKWN KWND WNDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(W W(W( (W(S W(SS (SS) SS)) S))N ))NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNW SNWO NWOK WOKN OKNK KNKW NKW. KW.W W.WK .WKW WKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW. KW.W W.W[ .W[W W[W. [W.W W.W] .W]K W]KW ]KW, KW,( W,(S ,(SS (SSS SSSO SSO( SO(W O(W, (W,W W,W. ,W.W W.W[ .W[W W[W. [W.W W.W] .W], W],W ],W. ,W.W W.W) .W)) W))N ))ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.W[ .W[W W[W. [W.W W.W] .W]O W]OW ]OWN OWNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NW )NWO NWOK WOKN OKND KNDW NDW. DW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W. (W.W W.W) .W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,W K,WO ,WOK WOK, OK,O K,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDW NDW[ DW[S W[S] [S]O S]OW ]OWN OWNW WNWO NWOW WOW. OW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,S W,S, ,S,K S,K) ,K)K K)K( )K(S K(S, (S,) S,)N ,)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SS) SS)N S)ND )NDW NDWO DWOW WOW( OW(W W(W. (W.W W.W( .W() W()K ()KW )KWK KWKW WKW) KW)N W)NW )NWO NWOW WOW( OW(W W(W( (W(W W(W, (W,S W,S, ,S,( S,() ,()) ())) )))N ))NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,S W,S, ,S,K S,K) ,K)N K)ND )NDK NDKW DKWK KWKK WKK: KK:N K:NI :NIK NIKS IKSK KSKK SKKW KKW: KW:N W:NI :NIW NIWO IWOK WOKN OKNW KNW. NW.W W.W( .W(S W(S) (S)N S)ND )NDK NDK: DK:N K:NI :NIW NIWO IWOK WOKN OKND KNDD NDDW DDWO DWOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW, OW,O W,OW ,OW) OW)N W)NW )NW. NW.W W.WO .WOW WOWN OWNW WNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKKK KKKW KKWO KWOW WOW: OW:N W:NI :NIK NIKW IKW( KW(S W(SS (SSO SSOW SOW) OW)N W)ND )NDW NDW. DW.W W.W[ .W[W W[W] [W]O W]OW ]OWN OWND WNDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIWO IWOW WOW. OW.W W.W( .W(S W(S, (S,K S,K) ,K)N K)NW )NW. NW.W W.W( .W(W W(W, (W,W W,W, ,W,W W,W, ,W,O W,OW ,OW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W[ .W[W W[W] [W]O W]OW ]OWN OWNK WNKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW[ OW[W W[W] [W]N W]ND ]NDK NDK: DK:N K:NI :NIW NIWO IWOW WOWN OWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)NK )NKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW, KW,W W,W. ,W.W W.WN .WND WNDK NDK: DK:N K:NI :NIK NIKW IKW, KW,K W,KN ,KND KNDD NDDO DDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(K W(K, (K,W K,W, ,W,W W,W) ,W)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W(K W(K, (K,W K,W, ,W,W W,W) ,W)N W)ND )NDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW( KW(S W(SS (SSS SSS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDK NDK: DK:N K:NI :NIW NIW, IW,W W,WO ,WOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW: KW:N W:NI :NIK NIKW IKW( KW(S W(SS (SS. SS.W S.W( .W(W W(W) (W)) W))N ))ND )NDW NDWO DWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W, (W,{ W,{} ,{}) {})N })NW )NW[ NW[W W[W] [W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W): W):N ):NI :NIW NIW. IW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKWN KWND WNDK NDKW DKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W[ .W[W W[WK [WKW WKW. KW.W W.W] .W]O W]OW ]OWN OWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W[ .W[K W[K] [K]. K].W ].W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDO NDOW DOWN OWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(K W(K, (K,[ K,[] ,[]) []). ]).W ).W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,WO ,WOW WOW. OW.W W.W( .W(W W(W( (W(W W(W) (W)) W))N ))NK )NKW NKW, KW,W W,WK ,WK( WK(( K((W ((W. (W.W W.W, .W,W W,W) ,W), W),( ),(K ,(K, (K,W K,W) ,W), W),( ),(W ,(W. (W.W W.W, .W,K W,K) ,K), K),( ),(K ,(K, (K,K K,K) ,K), K),) ),): ,):N ):NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,{ W,{} ,{}) {}). }).W ).W( .W(W W(W) (W)N W)NK )NKK NKKW KKW: KW:N W:NI :NIK NIKN IKND KNDK NDKW DKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDD DDDD DDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.WK .WKK WKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKWN KWND WNDW NDWO DWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIK NIKW IKWN KWND WNDK NDKW DKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIK NIKK IKKN KKND KNDW NDWO DWOW WOW. OW.W W.W[ .W[S W[S] [S]N S]NK ]NK( NK(W K(WK (WKK WKKK KKKW KKW. KW.W W.WK .WKW WKW( KW(W W(W, (W,W W,W) ,W)) W)): )):N ):NI :NIK NIKK IKKN KKND KNDK NDKW DKW: KW:N W:NI :NIK NIKW IKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKK DKKN KKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKWN KWNK WNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIK NIKW IKW. KW.W W.WK .WKW WKW. KW.W W.W[ .W[S W[S] [S]: S]:N ]:NI :NIW NIW. IW.W W.WO .WOK WOKN OKNK KNKW NKW. KW.W W.W[ .W[V W[V] [V]K V]KK ]KKW KKW. KW.W W.W( .W() W(): ():N ):NI :NIW NIW. IW.W W.WO .WOS WOS. OS.W S.W( .W(O W(OW (OW. OW.W W.W) .W)N W)ND )NDD NDDK DDKK DKKW KKW( KW(W W(W, (W,S W,S) ,S): S):N ):NI :NIW NIW. IW.W W.WO .WO( WO() O()N ()ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W)K W)KK )KKW KKW. KW.W W.W( .W(W W(W) (W): W):N ):NI :NIK NIKW IKW. KW.W W.W( .W(W W(W) (W)N W)ND )NDW NDWO DWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)NK )NKW NKW. KW.W W.W: .W:N W:NI :NIK NIKW IKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDK: DK:N K:NI :NIK NIKW IKWN KWND WNDD NDDW DDW. DW.W W.W( .W(( W((W ((W, (W,W W,W, ,W,W W,W) ,W)) W))N ))NW )NWO NWOW WOW( OW() W()N ()NW )NW. NW.W W.WO .WOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKW DKW. KW.W W.W( .W(W W(W, (W,W W,WO ,WOK WOK) OK)N K)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W. .W.W W.W( .W(S W(SO (SO( SO(W O(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W), W),W ),WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNK( NK(K K(KW (KW. KW.W W.WK .WKK WKKW KKW( KW(W W(W. (W.W W.W, .W,W W,W) ,W)K W)KW )KW. KW.W W.WK .WK( WK(S K(S, (S,S S,S, ,S,S S,S) ,S)) S)): )):N ):NI :NIK NIKW IKW. KW.W W.WN .WND WNDK NDK. DK.W K.WK .WKW WKWN KWNK WNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNK WNKW NKW. KW.W W.WK .WKK WKKK KKK: KK:N K:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)ND )NDW NDWO DWOW WOW. OW.W W.WN .WNK WNK( NK(W K(W( (W(W W(W, (W,S W,S, ,S,K S,K) ,K)K K)KW )KW. KW.W W.WO .WOS WOS) OS): S):N ):NI :NIK NIKW IKW. KW.W W.W( .W() W()N ()ND )NDK NDKW DKW. KW.W W.W[ .W[W W[W. [W.W W.W] .W]( W](O ](OW (OW. OW.W W.W) .W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNW. NW.W W.W( .W() W()N ()NK )NK: NK:N K:NI :NIW NIW. IW.W W.W( .W(W W(W) (W)N W)NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKK WKK: KK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()N ()ND )NDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW. KW.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,WO ,WOK WOK) OK): K):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NK )NK: NK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NW. NW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW: KW:N W:NI :NIK NIKK IKKW KKW: KW:N W:NI :NIK NIKN IKND KNDW NDW. DW.W W.W. .W.W W.W( .W(S W(S) (S)N S)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W: .W:N W:NI :NIK NIKN IKND KNDK NDKW DKW. KW.W W.W: .W:N W:NI :NIK NIKW IKW. KW.W W.W: .W:N W:NI :NIK NIKN IKND KNDK NDKW DKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIW( IW() W()N ()ND )NDW NDW. DW.W W.WO .WOK WOKN OKND KNDD NDDK DDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.W( .W() W()N ()NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()NW )NW. NW.W W.W. .W.W W.W( .W(W W(W) (W)N W)NK )NKW NKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKK NKKN KKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOWO OWOK WOKN OKNK KNKW NKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)NK )NKW NKWO KWOV WOV: OV:N V:NI :NIW NIW, IW,W W,W, ,W,W W,WO ,WOW WOWN OWND WNDK NDKW DKWO KWOV WOV: OV:N V:NI :NIK NIKW IKW( KW(W W(W[ (W[V W[V] [V], V],( ],(W ,(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW, IW,W W,WO ,WOW WOWN OWND WNDK NDK: DK:N K:NI :NIW NIW, IW,W W,WO ,WOW WOWN OWND WNDD NDDK DDK: DK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSS) SS)N S)ND )NDD NDDK DDKW DKWK KWKK WKK: KK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSS) SS)N S)ND )NDK NDKK DKKW KKW( KW(W W(W, (W,W W,W. ,W.W W.W) .W): W):N ):NI :NIK NIKW IKW( KW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIWO IWOW WOW. OW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW, OW,W W,WO ,WOW WOW) OW)N W)NW )NWO NWOW WOWO OWOK WOKN OKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)K W)KW )KW( KW(W W(W) (W): W):N ):NI :NIK NIK: IK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W) .W)N W)ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(WO (WOW WOW, OW,W W,WO ,WOW WOW) OW)) W))N ))NW )NW( NW(W W(W, (W,W W,W, ,W,W W,W. ,W.W W.W( .W() W()[ ()[V )[V] [V]) V])N ])ND )NDD NDDK DDK: DK:N K:NI :NIK NIKW IKW( KW(S W(SS (SSS SSSS SSS. SS.W S.W( .W(W W(WO (WOW WOW) OW)) W))N ))ND )NDD NDDK DDKW DKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKW( KW(W W(W, (W,( W,(W ,(W, (W,W W,W, ,W,W W,W) ,W)) W)): )):N ):NI :NIW NIW. IW.W W.WO .WOW WOWN OWND WNDK NDK: DK:N K:NI :NIW NIW. IW.W W.WO .WOW WOWN OWND WNDD NDDK DDKW DKW: KW:N W:NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W) (W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKK WKKK KKK: KK:N K:NI :NIW NIWO IWO( WO(( O((W ((W. (W.W W.W. .W.W W.WK .WKK WKK) KK)K K)KK )KKW KKW. KW.W W.WK .WKK WKK) KK)N K)NK )NKW NKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W, .W,W W,WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW, OW,) W,)N ,)ND )NDK NDKW DKW. KW.W W.W[ .W[S W[S] [S]K S]KK ]KKK KKK: KK:N K:NI :NIK NIKW IKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],W ],WO ,WOW WOW. OW.W W.W[ .W[S W[S] [S], S],) ],)N ,)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKS NKSK KSKW SKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W(S W(S, (S,V S,V) ,V)[ V)[V )[V] [V]N V]NW ]NWO NWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W. .W.W W.W( .W(W W(W, (W,( W,() ,()) ())) )))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W) ,W)N W)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNW, NW,W W,W, ,W,W W,WO ,WOW WOW. OW.W W.W( .W() W()N ()NK )NKW NKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIK NIK: IK:N K:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOWN OWND WNDD NDDK DDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W, (W,W W,W, ,W,W W,W) ,W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W. .W.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W. (W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDW NDWO DWOW WOW. OW.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())N ))NK )NKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W. ,W.W W.W[ .W[W W[W] [W]) W])N ])ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW() W()N ()NK )NKW NKWK KWKK WKKK KKK: KK:N K:NI :NIK NIKW IKWN KWND WNDD NDDD DDDK DDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.WN .WNW WNWO NWOW WOW. OW.W W.W. .W.W W.WN .WNW WNWO NWOW WOW. OW.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDK NDKK DKKK KKKW KKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[K W[K] [K]) K])) ]))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW( OW(W W(W) (W)N W)ND )NDK NDKK DKKW KKW. KW.W W.W. .W.W W.W( .W(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW. IW.W W.W. .W.W W.W( .W(W W(W, (W,W W,W. ,W.W W.W, .W,W W,W) ,W)N W)ND )NDK NDKW DKWN KWND WNDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOW WOW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDW NDWO DWOW WOW( OW(W W(W. (W.W W.W. .W.W W.W( .W(K W(K, (K,( K,() ,()) ())) )))N ))NW )NWO NWOW WOW. OW.W W.W. .W.W W.W. .W.W W.WN .WNK WNKW NKWK KWKK WKKK KKKK KKKW KKWK KWKW WKW. KW.W W.W: .W:N W:NI :NIW NIWO IWOW WOW( OW(W W(W, (W,W W,W( ,W(W W(W. (W.W W.W[ .W[W W[W] [W]) W])) ]))N ))ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,WO ,WOW WOW) OW): W):N ):NI :NIS NISN ISNK SNKW NKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]ND ]NDK NDKW DKWK KWKW WKW( KW(W W(W. (W.W W.W) .W): W):N ):NI :NIW NIW( IW(W W(W) (W)N W)ND )NDW NDW. DW.W W.W( .W(W W(W, (W,W W,WO ,WOW WOW) OW)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W) (W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW): W):N ):NI :NIS NISN ISNK SNK. NK.W K.WK .WKW WKWN KWNW WNWO NWOW WOW( OW(W W(W, (W,O W,OW ,OW, OW,O W,OW ,OW) OW)N W)NK )NK: NK:N K:NI :NIK NIKW IKW. KW.W W.W( .W(W W(W. (W.W W.W( .W() W()) ())N ))ND )NDK NDK: DK:N K:NI :NIW NIW. IW.W W.W( .W() W()N ()ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNW SNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)NW )NWO NWOK WOKN OKNK KNK: NK:N K:NI :NIK NIK: IK:N K:NI :NIW NIW. IW.W W.W( .W() W()N ()NW )NWO NWOW WOW. OW.W W.W( .W() W()N ()ND )NDK NDKW DKWK KWKW WKW: KW:N W:NI :NIW NIWO IWOW WOWN OWNW WNWO NWOW WOW. OW.W W.W( .W(W W(W) (W)N W)ND )NDK NDK: DK:N K:NI :NIW NIWO IWOW WOW. OW.W W.W( .W() W()[ ()[V )[V] [V]N V]NK ]NKN NKND KNDK NDKW DKW( KW(W W(W, (W,W W,W) ,W)N W)ND )NDK NDK: DK:N K:NI :NIK NIKW IKW. KW.W W.W( .W(W W(W) (W): W):N ):NI :NIW NIWO IWOK WOKN OKND KNDW NDW. DW.W W.W( .W(W W(W) (W)N W)ND )NDD NDDK DDKW DKW( KW(W W(W, (W,W W,W, ,W,W W,W) ,W): W):N ):NI :NIS NISN ISNK SNKW NKW. KW.W W.W( .W(W W(W, (W,W W,W) ,W)N W)ND )NDK NDKW DKW( KW(W W(W) (W): W):N ):NI :NIK NIKS IKSO KSO( SO(W O(W. (W.W W.W. .W.W W.W, .W,W W,W. ,W.W W.W) .W)N W)ND )NDD NDDO DDOW DOWO","type":"boolean","boost":4.0}}}]}},"sort":[{"_score":{"order":"desc"}},{"file":{"order":"desc"}}]}]]; nested: TooManyClauses[maxClauseCount is set to 20480];
	at org.elasticsearch.search.SearchService.parseSource(SearchService.java:853)
	at org.elasticsearch.search.SearchService.createContext(SearchService.java:652)
	at org.elasticsearch.search.SearchService.createAndPutContext(SearchService.java:618)
	at org.elasticsearch.search.SearchService.executeFetchPhase(SearchService.java:461)
	at org.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryFetchTransportHandler.messageReceived(SearchServiceTransportAction.java:392)
	at org.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryFetchTransportHandler.messageReceived(SearchServiceTransportAction.java:389)
	at org.elasticsearch.transport.TransportService$4.doRun(TransportService.java:350)
	at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.lucene.search.BooleanQuery$TooManyClauses: maxClauseCount is set to 20480
	at org.apache.lucene.search.BooleanQuery$Builder.add(BooleanQuery.java:136)
	at org.apache.lucene.util.QueryBuilder.add(QueryBuilder.java:302)
	at org.apache.lucene.util.QueryBuilder.analyzeMultiBoolean(QueryBuilder.java:322)
	at org.apache.lucene.util.QueryBuilder.createFieldQuery(QueryBuilder.java:257)
	at org.apache.lucene.util.QueryBuilder.createBooleanQuery(QueryBuilder.java:87)
	at org.elasticsearch.index.search.MatchQuery.parse(MatchQuery.java:178)
	at org.elasticsearch.index.query.MatchQueryParser.parse(MatchQueryParser.java:165)
	at org.elasticsearch.index.query.QueryParseContext.parseInnerQuery(QueryParseContext.java:256)
	at org.elasticsearch.index.query.BoolQueryParser.parse(BoolQueryParser.java:116)
	at org.elasticsearch.index.query.QueryParseContext.parseInnerQuery(QueryParseContext.java:256)
	at org.elasticsearch.index.query.IndexQueryParserService.innerParse(IndexQueryParserService.java:303)
	at org.elasticsearch.index.query.IndexQueryParserService.parse(IndexQueryParserService.java:206)
	at org.elasticsearch.index.query.IndexQueryParserService.parse(IndexQueryParserService.java:201)
	at org.elasticsearch.search.query.QueryParseElement.parse(QueryParseElement.java:33)
	at org.elasticsearch.search.SearchService.parseSource(SearchService.java:836)
	... 10 more
[2020-03-04 14:54:51,751][INFO ][bootstrap                ] running graceful exit on windows
[2020-03-04 14:54:51,755][INFO ][node                     ] [Talisman] stopping ...
[2020-03-04 14:54:52,329][INFO ][node                     ] [Talisman] stopped
[2020-03-04 14:54:52,330][INFO ][node                     ] [Talisman] closing ...
[2020-03-04 14:54:52,335][INFO ][node                     ] [Talisman] closed
[2020-03-04 14:56:16,872][INFO ][node                     ] [Ramshot] version[2.2.0], pid[9008], build[8ff36d1/2016-01-27T13:32:39Z]
[2020-03-04 14:56:16,873][INFO ][node                     ] [Ramshot] initializing ...
[2020-03-04 14:56:17,429][INFO ][plugins                  ] [Ramshot] modules [lang-expression, lang-groovy], plugins [], sites []
[2020-03-04 14:56:17,458][INFO ][env                      ] [Ramshot] using [1] data paths, mounts [[Local Disk B (D:)]], net usable_space [42.7gb], net total_space [465.6gb], spins? [unknown], types [NTFS]
[2020-03-04 14:56:17,459][INFO ][env                      ] [Ramshot] heap size [910.5mb], compressed ordinary object pointers [true]
[2020-03-04 14:56:20,408][INFO ][node                     ] [Ramshot] initialized
[2020-03-04 14:56:20,409][INFO ][node                     ] [Ramshot] starting ...
[2020-03-04 14:56:21,033][INFO ][transport                ] [Ramshot] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}
[2020-03-04 14:56:21,041][INFO ][discovery                ] [Ramshot] stackoverflow/IuW_DtIfQZOLV2kdAjYwmg
[2020-03-04 14:56:25,569][INFO ][cluster.service          ] [Ramshot] new_master {Ramshot}{IuW_DtIfQZOLV2kdAjYwmg}{127.0.0.1}{127.0.0.1:9300}, reason: zen-disco-join(elected_as_master, [0] joins received)
[2020-03-04 14:56:25,785][INFO ][gateway                  ] [Ramshot] recovered [2] indices into cluster_state
[2020-03-04 14:56:26,494][INFO ][http                     ] [Ramshot] publish_address {127.0.0.1:9200}, bound_addresses {127.0.0.1:9200}, {[::1]:9200}
[2020-03-04 14:56:26,495][INFO ][node                     ] [Ramshot] started
[2020-03-04 14:56:26,566][INFO ][cluster.routing.allocation] [Ramshot] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[teddy][0], [teddy][0]] ...]).
[2020-03-04 14:56:27,079][INFO ][node                     ] [Ramshot] stopping ...
[2020-03-04 14:56:27,131][INFO ][node                     ] [Ramshot] stopped
[2020-03-04 14:56:27,131][INFO ][node                     ] [Ramshot] closing ...
[2020-03-04 14:56:27,137][INFO ][node                     ] [Ramshot] closed
[2020-03-04 14:58:09,101][INFO ][node                     ] [Famine] version[2.2.0], pid[4472], build[8ff36d1/2016-01-27T13:32:39Z]
[2020-03-04 14:58:09,102][INFO ][node                     ] [Famine] initializing ...
[2020-03-04 14:58:09,619][INFO ][plugins                  ] [Famine] modules [lang-expression, lang-groovy], plugins [], sites []
[2020-03-04 14:58:09,645][INFO ][env                      ] [Famine] using [1] data paths, mounts [[Local Disk B (D:)]], net usable_space [42.7gb], net total_space [465.6gb], spins? [unknown], types [NTFS]
[2020-03-04 14:58:09,645][INFO ][env                      ] [Famine] heap size [910.5mb], compressed ordinary object pointers [true]
[2020-03-04 14:58:11,800][INFO ][node                     ] [Famine] initialized
[2020-03-04 14:58:11,800][INFO ][node                     ] [Famine] starting ...
[2020-03-04 14:58:12,361][INFO ][transport                ] [Famine] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}
[2020-03-04 14:58:12,369][INFO ][discovery                ] [Famine] stackoverflow/9W4RQvAHTIKDTNxBQm34Fg
[2020-03-04 14:58:16,891][INFO ][cluster.service          ] [Famine] new_master {Famine}{9W4RQvAHTIKDTNxBQm34Fg}{127.0.0.1}{127.0.0.1:9300}, reason: zen-disco-join(elected_as_master, [0] joins received)
[2020-03-04 14:58:17,024][INFO ][gateway                  ] [Famine] recovered [2] indices into cluster_state
[2020-03-04 14:58:18,011][INFO ][http                     ] [Famine] publish_address {127.0.0.1:9200}, bound_addresses {127.0.0.1:9200}, {[::1]:9200}
[2020-03-04 14:58:18,013][INFO ][node                     ] [Famine] started
[2020-03-04 14:58:18,118][INFO ][cluster.routing.allocation] [Famine] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[teddy][0], [teddy][0]] ...]).
[2020-03-04 15:43:15,441][INFO ][bootstrap                ] running graceful exit on windows
[2020-03-04 15:43:15,443][INFO ][node                     ] [Famine] stopping ...
[2020-03-04 15:43:16,174][INFO ][node                     ] [Famine] stopped
[2020-03-04 15:43:16,175][INFO ][node                     ] [Famine] closing ...
[2020-03-04 15:43:16,205][INFO ][node                     ] [Famine] closed
[2020-03-04 17:19:36,233][INFO ][node                     ] [Charon] version[2.2.0], pid[10228], build[8ff36d1/2016-01-27T13:32:39Z]
[2020-03-04 17:19:36,249][INFO ][node                     ] [Charon] initializing ...
[2020-03-04 17:19:37,064][INFO ][plugins                  ] [Charon] modules [lang-expression, lang-groovy], plugins [], sites []
[2020-03-04 17:19:37,116][INFO ][env                      ] [Charon] using [1] data paths, mounts [[Local Disk B (D:)]], net usable_space [42.6gb], net total_space [465.6gb], spins? [unknown], types [NTFS]
[2020-03-04 17:19:37,116][INFO ][env                      ] [Charon] heap size [910.5mb], compressed ordinary object pointers [true]
[2020-03-04 17:19:42,087][INFO ][node                     ] [Charon] initialized
[2020-03-04 17:19:42,088][INFO ][node                     ] [Charon] starting ...
[2020-03-04 17:19:42,786][INFO ][transport                ] [Charon] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}
[2020-03-04 17:19:42,819][INFO ][discovery                ] [Charon] stackoverflow/sZGZbaStRfSl4f3Mbi7c_Q
[2020-03-04 17:19:47,347][INFO ][cluster.service          ] [Charon] new_master {Charon}{sZGZbaStRfSl4f3Mbi7c_Q}{127.0.0.1}{127.0.0.1:9300}, reason: zen-disco-join(elected_as_master, [0] joins received)
[2020-03-04 17:19:47,627][INFO ][gateway                  ] [Charon] recovered [2] indices into cluster_state
[2020-03-04 17:19:48,075][INFO ][http                     ] [Charon] publish_address {127.0.0.1:9200}, bound_addresses {127.0.0.1:9200}, {[::1]:9200}
[2020-03-04 17:19:48,075][INFO ][node                     ] [Charon] started
[2020-03-04 17:19:48,428][INFO ][cluster.routing.allocation] [Charon] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[teddy][0], [teddy][0]] ...]).
[2020-03-04 17:23:37,157][INFO ][cluster.metadata         ] [Charon] [flask] creating index, cause [api], templates [], shards [1]/[1], mappings [siamese]
[2020-03-04 17:23:37,310][INFO ][cluster.routing.allocation] [Charon] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[flask][0]] ...]).
[2020-03-04 17:24:13,928][INFO ][cluster.metadata         ] [Charon] [flask] update_mapping [siamese]
[2020-03-04 18:13:47,152][INFO ][cluster.metadata         ] [Charon] [teddy-2] creating index, cause [api], templates [], shards [1]/[1], mappings [siamese]
[2020-03-04 18:13:47,357][INFO ][cluster.routing.allocation] [Charon] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[teddy-2][0]] ...]).
[2020-03-04 18:13:49,313][INFO ][cluster.metadata         ] [Charon] [teddy-2] update_mapping [siamese]
[2020-03-04 20:13:58,957][INFO ][bootstrap                ] running graceful exit on windows
[2020-03-04 20:13:58,959][INFO ][node                     ] [Charon] stopping ...
[2020-03-04 20:14:02,640][INFO ][node                     ] [Charon] stopped
[2020-03-04 20:14:02,641][INFO ][node                     ] [Charon] closing ...
[2020-03-04 20:14:02,762][INFO ][node                     ] [Charon] closed
